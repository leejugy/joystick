
joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000958c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800972c  0800972c  0000a72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800980c  0800980c  0000b14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800980c  0800980c  0000a80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009814  08009814  0000b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009814  08009814  0000a814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009818  08009818  0000a818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800981c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016d8  2000014c  08009968  0000b14c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001824  08009968  0000b824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141b4  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003919  00000000  00000000  0001f330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00022c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbc  00000000  00000000  00023bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abc4  00000000  00000000  000247ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177be  00000000  00000000  0003f370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095df7  00000000  00000000  00056b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004350  00000000  00000000  000ec968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000f0cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009714 	.word	0x08009714

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	08009714 	.word	0x08009714

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b2f      	ldr	r3, [pc, #188]	@ (8000640 <MX_ADC1_Init+0xd0>)
 8000584:	4a2f      	ldr	r2, [pc, #188]	@ (8000644 <MX_ADC1_Init+0xd4>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b2d      	ldr	r3, [pc, #180]	@ (8000640 <MX_ADC1_Init+0xd0>)
 800058a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b2b      	ldr	r3, [pc, #172]	@ (8000640 <MX_ADC1_Init+0xd0>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000596:	4b2a      	ldr	r3, [pc, #168]	@ (8000640 <MX_ADC1_Init+0xd0>)
 8000598:	2201      	movs	r2, #1
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059c:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <MX_ADC1_Init+0xd0>)
 800059e:	2201      	movs	r2, #1
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b27      	ldr	r3, [pc, #156]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005b2:	4a25      	ldr	r2, [pc, #148]	@ (8000648 <MX_ADC1_Init+0xd8>)
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80005bc:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005be:	2203      	movs	r2, #3
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	481b      	ldr	r0, [pc, #108]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005d2:	f000 fccd 	bl	8000f70 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 fa9e 	bl	8000b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80005e8:	2304      	movs	r3, #4
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4813      	ldr	r0, [pc, #76]	@ (8000640 <MX_ADC1_Init+0xd0>)
 80005f2:	f000 fe0f 	bl	8001214 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 fa8e 	bl	8000b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000600:	2309      	movs	r3, #9
 8000602:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000604:	2302      	movs	r3, #2
 8000606:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	@ (8000640 <MX_ADC1_Init+0xd0>)
 800060e:	f000 fe01 	bl	8001214 <HAL_ADC_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000618:	f000 fa80 	bl	8000b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800061c:	2307      	movs	r3, #7
 800061e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000620:	2303      	movs	r3, #3
 8000622:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_ADC1_Init+0xd0>)
 800062a:	f000 fdf3 	bl	8001214 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000634:	f000 fa72 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000168 	.word	0x20000168
 8000644:	40012000 	.word	0x40012000
 8000648:	0f000001 	.word	0x0f000001

0800064c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	@ 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a3c      	ldr	r2, [pc, #240]	@ (800075c <HAL_ADC_MspInit+0x110>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d171      	bne.n	8000752 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b3b      	ldr	r3, [pc, #236]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000676:	4a3a      	ldr	r2, [pc, #232]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800067c:	6453      	str	r3, [r2, #68]	@ 0x44
 800067e:	4b38      	ldr	r3, [pc, #224]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b34      	ldr	r3, [pc, #208]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a33      	ldr	r2, [pc, #204]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b31      	ldr	r3, [pc, #196]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a2c      	ldr	r2, [pc, #176]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000760 <HAL_ADC_MspInit+0x114>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006c2:	2380      	movs	r3, #128	@ 0x80
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4823      	ldr	r0, [pc, #140]	@ (8000764 <HAL_ADC_MspInit+0x118>)
 80006d6:	f001 fccf 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006da:	2303      	movs	r3, #3
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	2303      	movs	r3, #3
 80006e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	481e      	ldr	r0, [pc, #120]	@ (8000768 <HAL_ADC_MspInit+0x11c>)
 80006ee:	f001 fcc3 	bl	8002078 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <HAL_ADC_MspInit+0x120>)
 80006f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000770 <HAL_ADC_MspInit+0x124>)
 80006f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <HAL_ADC_MspInit+0x120>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <HAL_ADC_MspInit+0x120>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000704:	4b19      	ldr	r3, [pc, #100]	@ (800076c <HAL_ADC_MspInit+0x120>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <HAL_ADC_MspInit+0x120>)
 800070c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000710:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <HAL_ADC_MspInit+0x120>)
 8000714:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000718:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <HAL_ADC_MspInit+0x120>)
 800071c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000720:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <HAL_ADC_MspInit+0x120>)
 8000724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000728:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <HAL_ADC_MspInit+0x120>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <HAL_ADC_MspInit+0x120>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000736:	480d      	ldr	r0, [pc, #52]	@ (800076c <HAL_ADC_MspInit+0x120>)
 8000738:	f001 f92e 	bl	8001998 <HAL_DMA_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000742:	f000 f9eb 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_ADC_MspInit+0x120>)
 800074a:	639a      	str	r2, [r3, #56]	@ 0x38
 800074c:	4a07      	ldr	r2, [pc, #28]	@ (800076c <HAL_ADC_MspInit+0x120>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	@ 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40012000 	.word	0x40012000
 8000760:	40023800 	.word	0x40023800
 8000764:	40020000 	.word	0x40020000
 8000768:	40020400 	.word	0x40020400
 800076c:	200001b0 	.word	0x200001b0
 8000770:	40026410 	.word	0x40026410

08000774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_DMA_Init+0x4c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a0f      	ldr	r2, [pc, #60]	@ (80007c0 <MX_DMA_Init+0x4c>)
 8000784:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <MX_DMA_Init+0x4c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	2038      	movs	r0, #56	@ 0x38
 800079c:	f001 f8c5 	bl	800192a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007a0:	2038      	movs	r0, #56	@ 0x38
 80007a2:	f001 f8de 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	203a      	movs	r0, #58	@ 0x3a
 80007ac:	f001 f8bd 	bl	800192a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007b0:	203a      	movs	r0, #58	@ 0x3a
 80007b2:	f001 f8d6 	bl	8001962 <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b27      	ldr	r3, [pc, #156]	@ (800087c <MX_GPIO_Init+0xb8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a26      	ldr	r2, [pc, #152]	@ (800087c <MX_GPIO_Init+0xb8>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b24      	ldr	r3, [pc, #144]	@ (800087c <MX_GPIO_Init+0xb8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b20      	ldr	r3, [pc, #128]	@ (800087c <MX_GPIO_Init+0xb8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a1f      	ldr	r2, [pc, #124]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a18      	ldr	r2, [pc, #96]	@ (800087c <MX_GPIO_Init+0xb8>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b16      	ldr	r3, [pc, #88]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a11      	ldr	r2, [pc, #68]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_GPIO_Init+0xb8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000850:	480b      	ldr	r0, [pc, #44]	@ (8000880 <MX_GPIO_Init+0xbc>)
 8000852:	f001 fd95 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000856:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_GPIO_Init+0xbc>)
 8000870:	f001 fc02 	bl	8002078 <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	@ 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40020800 	.word	0x40020800

08000884 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart1.Instance){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <HAL_UART_RxCpltCallback+0x2c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	429a      	cmp	r2, r3
 8000896:	d107      	bne.n	80008a8 <HAL_UART_RxCpltCallback+0x24>
		uart_rx_flag = true;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_UART_RxCpltCallback+0x30>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, &uart_rx_data, 1);
 800089e:	2201      	movs	r2, #1
 80008a0:	4905      	ldr	r1, [pc, #20]	@ (80008b8 <HAL_UART_RxCpltCallback+0x34>)
 80008a2:	4803      	ldr	r0, [pc, #12]	@ (80008b0 <HAL_UART_RxCpltCallback+0x2c>)
 80008a4:	f003 fd23 	bl	80042ee <HAL_UART_Receive_DMA>
	}
  UNUSED(huart);
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000024c 	.word	0x2000024c
 80008b4:	20000211 	.word	0x20000211
 80008b8:	20000210 	.word	0x20000210

080008bc <TX>:

void TX(TX_Type tx_type, char *fmt,...){
 80008bc:	b40e      	push	{r1, r2, r3}
 80008be:	b580      	push	{r7, lr}
 80008c0:	b085      	sub	sp, #20
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
	va_list arg;
	va_start(arg,fmt);
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	60fb      	str	r3, [r7, #12]
	vsnprintf((char *)&tx_buffer[0],32,fmt,arg);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	69fa      	ldr	r2, [r7, #28]
 80008d2:	2120      	movs	r1, #32
 80008d4:	480f      	ldr	r0, [pc, #60]	@ (8000914 <TX+0x58>)
 80008d6:	f008 fa8f 	bl	8008df8 <vsniprintf>

	if(tx_type==UART1){
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d106      	bne.n	80008ee <TX+0x32>
		HAL_UART_Transmit(&huart1,tx_buffer,32,10);
 80008e0:	230a      	movs	r3, #10
 80008e2:	2220      	movs	r2, #32
 80008e4:	490b      	ldr	r1, [pc, #44]	@ (8000914 <TX+0x58>)
 80008e6:	480c      	ldr	r0, [pc, #48]	@ (8000918 <TX+0x5c>)
 80008e8:	f003 fc76 	bl	80041d8 <HAL_UART_Transmit>
 80008ec:	e006      	b.n	80008fc <TX+0x40>
	}
	else if(tx_type==CDC){
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d103      	bne.n	80008fc <TX+0x40>
		CDC_Transmit_FS(tx_buffer,32);
 80008f4:	2120      	movs	r1, #32
 80008f6:	4807      	ldr	r0, [pc, #28]	@ (8000914 <TX+0x58>)
 80008f8:	f007 fe00 	bl	80084fc <CDC_Transmit_FS>
	}
	va_end(arg);
	memset(tx_buffer,0,32);
 80008fc:	2220      	movs	r2, #32
 80008fe:	2100      	movs	r1, #0
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <TX+0x58>)
 8000902:	f008 fa87 	bl	8008e14 <memset>
}
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000910:	b003      	add	sp, #12
 8000912:	4770      	bx	lr
 8000914:	20000228 	.word	0x20000228
 8000918:	2000024c 	.word	0x2000024c

0800091c <read_joystick_dma>:

void read_joystick_dma(){
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	TX(UART1,"X_VAL:%d\n",ADC_VAL[0]);
 8000920:	4b24      	ldr	r3, [pc, #144]	@ (80009b4 <read_joystick_dma+0x98>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4924      	ldr	r1, [pc, #144]	@ (80009b8 <read_joystick_dma+0x9c>)
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff ffc7 	bl	80008bc <TX>
	TX(UART1,"Y_VAL:%d\n",ADC_VAL[1]);
 800092e:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <read_joystick_dma+0x98>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	461a      	mov	r2, r3
 8000934:	4921      	ldr	r1, [pc, #132]	@ (80009bc <read_joystick_dma+0xa0>)
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff ffc0 	bl	80008bc <TX>
	TX(UART1,"SW_VAL:%d\n",ADC_VAL[2]);
 800093c:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <read_joystick_dma+0x98>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	461a      	mov	r2, r3
 8000942:	491f      	ldr	r1, [pc, #124]	@ (80009c0 <read_joystick_dma+0xa4>)
 8000944:	2000      	movs	r0, #0
 8000946:	f7ff ffb9 	bl	80008bc <TX>
	//x
	if(ADC_VAL[0]>=3000){
 800094a:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <read_joystick_dma+0x98>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000952:	4293      	cmp	r3, r2
 8000954:	d904      	bls.n	8000960 <read_joystick_dma+0x44>
		TX(CDC,"<-\n");
 8000956:	491b      	ldr	r1, [pc, #108]	@ (80009c4 <read_joystick_dma+0xa8>)
 8000958:	2001      	movs	r0, #1
 800095a:	f7ff ffaf 	bl	80008bc <TX>
 800095e:	e008      	b.n	8000972 <read_joystick_dma+0x56>
	}
	else if(ADC_VAL[0]<=500){
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <read_joystick_dma+0x98>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000968:	d803      	bhi.n	8000972 <read_joystick_dma+0x56>
		TX(CDC,"->\n");
 800096a:	4917      	ldr	r1, [pc, #92]	@ (80009c8 <read_joystick_dma+0xac>)
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff ffa5 	bl	80008bc <TX>
	}

	//y
	if(ADC_VAL[1]>=3000){
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <read_joystick_dma+0x98>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800097a:	4293      	cmp	r3, r2
 800097c:	d904      	bls.n	8000988 <read_joystick_dma+0x6c>
		TX(CDC,"^\n");
 800097e:	4913      	ldr	r1, [pc, #76]	@ (80009cc <read_joystick_dma+0xb0>)
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff ff9b 	bl	80008bc <TX>
	}

	else if(ADC_VAL[2]<=500){
		TX(CDC,"Switch click!\n");
	}
}
 8000986:	e012      	b.n	80009ae <read_joystick_dma+0x92>
	else if(ADC_VAL[1]<=500){
 8000988:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <read_joystick_dma+0x98>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000990:	d804      	bhi.n	800099c <read_joystick_dma+0x80>
		TX(CDC,"v\n");
 8000992:	490f      	ldr	r1, [pc, #60]	@ (80009d0 <read_joystick_dma+0xb4>)
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff ff91 	bl	80008bc <TX>
}
 800099a:	e008      	b.n	80009ae <read_joystick_dma+0x92>
	else if(ADC_VAL[2]<=500){
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <read_joystick_dma+0x98>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80009a4:	d803      	bhi.n	80009ae <read_joystick_dma+0x92>
		TX(CDC,"Switch click!\n");
 80009a6:	490b      	ldr	r1, [pc, #44]	@ (80009d4 <read_joystick_dma+0xb8>)
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff ff87 	bl	80008bc <TX>
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2000021c 	.word	0x2000021c
 80009b8:	0800972c 	.word	0x0800972c
 80009bc:	08009738 	.word	0x08009738
 80009c0:	08009744 	.word	0x08009744
 80009c4:	08009750 	.word	0x08009750
 80009c8:	08009754 	.word	0x08009754
 80009cc:	08009758 	.word	0x08009758
 80009d0:	0800975c 	.word	0x0800975c
 80009d4:	08009760 	.word	0x08009760

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f000 fa31 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 f833 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f7ff feed 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ea:	f7ff fec3 	bl	8000774 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80009ee:	f000 f959 	bl	8000ca4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80009f2:	f007 fcbb 	bl	800836c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80009f6:	f7ff fdbb 	bl	8000570 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t pretime=HAL_GetTick();
 80009fa:	f000 fa89 	bl	8000f10 <HAL_GetTick>
 80009fe:	6078      	str	r0, [r7, #4]


  UART_Start_Receive_DMA(&huart1, &uart_rx_data, 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	490d      	ldr	r1, [pc, #52]	@ (8000a38 <main+0x60>)
 8000a04:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <main+0x64>)
 8000a06:	f003 fe0f 	bl	8004628 <UART_Start_Receive_DMA>
  HAL_ADC_Start_DMA(&hadc1,&ADC_VAL[0], 3);
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	490c      	ldr	r1, [pc, #48]	@ (8000a40 <main+0x68>)
 8000a0e:	480d      	ldr	r0, [pc, #52]	@ (8000a44 <main+0x6c>)
 8000a10:	f000 faf2 	bl	8000ff8 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if(HAL_GetTick()-pretime>100){
 8000a14:	f000 fa7c 	bl	8000f10 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	2b64      	cmp	r3, #100	@ 0x64
 8000a20:	d9f8      	bls.n	8000a14 <main+0x3c>
  		PC13_Toggle;
 8000a22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a26:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <main+0x70>)
 8000a28:	f001 fcc3 	bl	80023b2 <HAL_GPIO_TogglePin>
  		pretime = HAL_GetTick();
 8000a2c:	f000 fa70 	bl	8000f10 <HAL_GetTick>
 8000a30:	6078      	str	r0, [r7, #4]
  		read_joystick_dma();
 8000a32:	f7ff ff73 	bl	800091c <read_joystick_dma>
  	if(HAL_GetTick()-pretime>100){
 8000a36:	e7ed      	b.n	8000a14 <main+0x3c>
 8000a38:	20000210 	.word	0x20000210
 8000a3c:	2000024c 	.word	0x2000024c
 8000a40:	2000021c 	.word	0x2000021c
 8000a44:	20000168 	.word	0x20000168
 8000a48:	40020800 	.word	0x40020800

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b094      	sub	sp, #80	@ 0x50
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	2230      	movs	r2, #48	@ 0x30
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f008 f9da 	bl	8008e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	4b27      	ldr	r3, [pc, #156]	@ (8000b14 <SystemClock_Config+0xc8>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	4a26      	ldr	r2, [pc, #152]	@ (8000b14 <SystemClock_Config+0xc8>)
 8000a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a80:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <SystemClock_Config+0xc8>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	4b21      	ldr	r3, [pc, #132]	@ (8000b18 <SystemClock_Config+0xcc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a20      	ldr	r2, [pc, #128]	@ (8000b18 <SystemClock_Config+0xcc>)
 8000a96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <SystemClock_Config+0xcc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000abc:	2319      	movs	r3, #25
 8000abe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ac0:	23c0      	movs	r3, #192	@ 0xc0
 8000ac2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 0320 	add.w	r3, r7, #32
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 fed9 	bl	8003888 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000adc:	f000 f81e 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2103      	movs	r1, #3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 f93b 	bl	8003d78 <HAL_RCC_ClockConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b08:	f000 f808 	bl	8000b1c <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3750      	adds	r7, #80	@ 0x50
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <Error_Handler+0x8>

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	4a0f      	ldr	r2, [pc, #60]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 f98b 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <DMA2_Stream0_IRQHandler+0x10>)
 8000bde:	f000 ffe1 	bl	8001ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200001b0 	.word	0x200001b0

08000bec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <DMA2_Stream2_IRQHandler+0x10>)
 8000bf2:	f000 ffd7 	bl	8001ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000294 	.word	0x20000294

08000c00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <OTG_FS_IRQHandler+0x10>)
 8000c06:	f001 fd32 	bl	800266e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000fd8 	.word	0x20000fd8

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f008 f8ee 	bl	8008e24 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20020000 	.word	0x20020000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	20000248 	.word	0x20000248
 8000c7c:	20001828 	.word	0x20001828

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <MX_USART1_UART_Init+0x50>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cdc:	f003 fa2c 	bl	8004138 <HAL_UART_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ce6:	f7ff ff19 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000024c 	.word	0x2000024c
 8000cf4:	40011000 	.word	0x40011000

08000cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a31      	ldr	r2, [pc, #196]	@ (8000ddc <HAL_UART_MspInit+0xe4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d15b      	bne.n	8000dd2 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b30      	ldr	r3, [pc, #192]	@ (8000de0 <HAL_UART_MspInit+0xe8>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	4a2f      	ldr	r2, [pc, #188]	@ (8000de0 <HAL_UART_MspInit+0xe8>)
 8000d24:	f043 0310 	orr.w	r3, r3, #16
 8000d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000de0 <HAL_UART_MspInit+0xe8>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b29      	ldr	r3, [pc, #164]	@ (8000de0 <HAL_UART_MspInit+0xe8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a28      	ldr	r2, [pc, #160]	@ (8000de0 <HAL_UART_MspInit+0xe8>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <HAL_UART_MspInit+0xe8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d64:	2307      	movs	r3, #7
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481d      	ldr	r0, [pc, #116]	@ (8000de4 <HAL_UART_MspInit+0xec>)
 8000d70:	f001 f982 	bl	8002078 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d76:	4a1d      	ldr	r2, [pc, #116]	@ (8000dec <HAL_UART_MspInit+0xf4>)
 8000d78:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d80:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d82:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d88:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d8e:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d94:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d96:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000da4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000da8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000daa:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db0:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000db6:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000db8:	f000 fdee 	bl	8001998 <HAL_DMA_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000dc2:	f7ff feab 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000dca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dcc:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <HAL_UART_MspInit+0xf0>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	@ 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	20000294 	.word	0x20000294
 8000dec:	40026440 	.word	0x40026440

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df4:	f7ff ff44 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	@ (8000e30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	@ (8000e3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f008 f807 	bl	8008e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fdd9 	bl	80009d8 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000e34:	0800981c 	.word	0x0800981c
  ldr r2, =_sbss
 8000e38:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000e3c:	20001824 	.word	0x20001824

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e48:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e84 <HAL_Init+0x40>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e54:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <HAL_Init+0x40>)
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	@ (8000e84 <HAL_Init+0x40>)
 8000e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 fd51 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	200f      	movs	r0, #15
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fe56 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fd69 	bl	800197e <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 fd31 	bl	800192a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	200002f4 	.word	0x200002f4

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200002f4 	.word	0x200002f4

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e033      	b.n	8000fee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d109      	bne.n	8000fa2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fb5c 	bl	800064c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d118      	bne.n	8000fe0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fb6:	f023 0302 	bic.w	r3, r3, #2
 8000fba:	f043 0202 	orr.w	r2, r3, #2
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 fa58 	bl	8001478 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f023 0303 	bic.w	r3, r3, #3
 8000fd6:	f043 0201 	orr.w	r2, r3, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fde:	e001      	b.n	8000fe4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800100e:	2b01      	cmp	r3, #1
 8001010:	d101      	bne.n	8001016 <HAL_ADC_Start_DMA+0x1e>
 8001012:	2302      	movs	r3, #2
 8001014:	e0ce      	b.n	80011b4 <HAL_ADC_Start_DMA+0x1bc>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b01      	cmp	r3, #1
 800102a:	d018      	beq.n	800105e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f042 0201 	orr.w	r2, r2, #1
 800103a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800103c:	4b5f      	ldr	r3, [pc, #380]	@ (80011bc <HAL_ADC_Start_DMA+0x1c4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a5f      	ldr	r2, [pc, #380]	@ (80011c0 <HAL_ADC_Start_DMA+0x1c8>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	0c9a      	lsrs	r2, r3, #18
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001050:	e002      	b.n	8001058 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	3b01      	subs	r3, #1
 8001056:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f9      	bne.n	8001052 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800106c:	d107      	bne.n	800107e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800107c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b01      	cmp	r3, #1
 800108a:	f040 8086 	bne.w	800119a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001096:	f023 0301 	bic.w	r3, r3, #1
 800109a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d007      	beq.n	80010c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010cc:	d106      	bne.n	80010dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f023 0206 	bic.w	r2, r3, #6
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80010da:	e002      	b.n	80010e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2200      	movs	r2, #0
 80010e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010ea:	4b36      	ldr	r3, [pc, #216]	@ (80011c4 <HAL_ADC_Start_DMA+0x1cc>)
 80010ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f2:	4a35      	ldr	r2, [pc, #212]	@ (80011c8 <HAL_ADC_Start_DMA+0x1d0>)
 80010f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010fa:	4a34      	ldr	r2, [pc, #208]	@ (80011cc <HAL_ADC_Start_DMA+0x1d4>)
 80010fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001102:	4a33      	ldr	r2, [pc, #204]	@ (80011d0 <HAL_ADC_Start_DMA+0x1d8>)
 8001104:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800110e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800111e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800112e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	334c      	adds	r3, #76	@ 0x4c
 800113a:	4619      	mov	r1, r3
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f000 fcd8 	bl	8001af4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10f      	bne.n	8001170 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d129      	bne.n	80011b2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	e020      	b.n	80011b2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a17      	ldr	r2, [pc, #92]	@ (80011d4 <HAL_ADC_Start_DMA+0x1dc>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d11b      	bne.n	80011b2 <HAL_ADC_Start_DMA+0x1ba>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d114      	bne.n	80011b2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	e00b      	b.n	80011b2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f043 0210 	orr.w	r2, r3, #16
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f043 0201 	orr.w	r2, r3, #1
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	431bde83 	.word	0x431bde83
 80011c4:	40012300 	.word	0x40012300
 80011c8:	08001671 	.word	0x08001671
 80011cc:	0800172b 	.word	0x0800172b
 80011d0:	08001747 	.word	0x08001747
 80011d4:	40012000 	.word	0x40012000

080011d8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1c>
 800122c:	2302      	movs	r3, #2
 800122e:	e113      	b.n	8001458 <HAL_ADC_ConfigChannel+0x244>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b09      	cmp	r3, #9
 800123e:	d925      	bls.n	800128c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68d9      	ldr	r1, [r3, #12]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	3b1e      	subs	r3, #30
 8001256:	2207      	movs	r2, #7
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43da      	mvns	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	400a      	ands	r2, r1
 8001264:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68d9      	ldr	r1, [r3, #12]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	4603      	mov	r3, r0
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4403      	add	r3, r0
 800127e:	3b1e      	subs	r3, #30
 8001280:	409a      	lsls	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	e022      	b.n	80012d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6919      	ldr	r1, [r3, #16]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	2207      	movs	r2, #7
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	400a      	ands	r2, r1
 80012ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6919      	ldr	r1, [r3, #16]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4403      	add	r3, r0
 80012c8:	409a      	lsls	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d824      	bhi.n	8001324 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	3b05      	subs	r3, #5
 80012ec:	221f      	movs	r2, #31
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	400a      	ands	r2, r1
 80012fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	3b05      	subs	r3, #5
 8001316:	fa00 f203 	lsl.w	r2, r0, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	635a      	str	r2, [r3, #52]	@ 0x34
 8001322:	e04c      	b.n	80013be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b0c      	cmp	r3, #12
 800132a:	d824      	bhi.n	8001376 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3b23      	subs	r3, #35	@ 0x23
 800133e:	221f      	movs	r2, #31
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43da      	mvns	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	400a      	ands	r2, r1
 800134c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	3b23      	subs	r3, #35	@ 0x23
 8001368:	fa00 f203 	lsl.w	r2, r0, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	631a      	str	r2, [r3, #48]	@ 0x30
 8001374:	e023      	b.n	80013be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	3b41      	subs	r3, #65	@ 0x41
 8001388:	221f      	movs	r2, #31
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	400a      	ands	r2, r1
 8001396:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	3b41      	subs	r3, #65	@ 0x41
 80013b2:	fa00 f203 	lsl.w	r2, r0, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013be:	4b29      	ldr	r3, [pc, #164]	@ (8001464 <HAL_ADC_ConfigChannel+0x250>)
 80013c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a28      	ldr	r2, [pc, #160]	@ (8001468 <HAL_ADC_ConfigChannel+0x254>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d10f      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1d8>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b12      	cmp	r3, #18
 80013d2:	d10b      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001468 <HAL_ADC_ConfigChannel+0x254>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12b      	bne.n	800144e <HAL_ADC_ConfigChannel+0x23a>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1c      	ldr	r2, [pc, #112]	@ (800146c <HAL_ADC_ConfigChannel+0x258>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d003      	beq.n	8001408 <HAL_ADC_ConfigChannel+0x1f4>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b11      	cmp	r3, #17
 8001406:	d122      	bne.n	800144e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a11      	ldr	r2, [pc, #68]	@ (800146c <HAL_ADC_ConfigChannel+0x258>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d111      	bne.n	800144e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <HAL_ADC_ConfigChannel+0x25c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a11      	ldr	r2, [pc, #68]	@ (8001474 <HAL_ADC_ConfigChannel+0x260>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	0c9a      	lsrs	r2, r3, #18
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001440:	e002      	b.n	8001448 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3b01      	subs	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f9      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40012300 	.word	0x40012300
 8001468:	40012000 	.word	0x40012000
 800146c:	10000012 	.word	0x10000012
 8001470:	20000000 	.word	0x20000000
 8001474:	431bde83 	.word	0x431bde83

08001478 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001480:	4b79      	ldr	r3, [pc, #484]	@ (8001668 <ADC_Init+0x1f0>)
 8001482:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	431a      	orrs	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	021a      	lsls	r2, r3, #8
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80014d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6899      	ldr	r1, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150a:	4a58      	ldr	r2, [pc, #352]	@ (800166c <ADC_Init+0x1f4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d022      	beq.n	8001556 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800151e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6899      	ldr	r1, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6899      	ldr	r1, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	e00f      	b.n	8001576 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001564:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001574:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0202 	bic.w	r2, r2, #2
 8001584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6899      	ldr	r1, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7e1b      	ldrb	r3, [r3, #24]
 8001590:	005a      	lsls	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01b      	beq.n	80015dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80015c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6859      	ldr	r1, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	3b01      	subs	r3, #1
 80015d0:	035a      	lsls	r2, r3, #13
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	e007      	b.n	80015ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	3b01      	subs	r3, #1
 8001608:	051a      	lsls	r2, r3, #20
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6899      	ldr	r1, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800162e:	025a      	lsls	r2, r3, #9
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001646:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6899      	ldr	r1, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	029a      	lsls	r2, r3, #10
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	609a      	str	r2, [r3, #8]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40012300 	.word	0x40012300
 800166c:	0f000001 	.word	0x0f000001

08001670 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800167c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001686:	2b00      	cmp	r3, #0
 8001688:	d13c      	bne.n	8001704 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d12b      	bne.n	80016fc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d127      	bne.n	80016fc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d119      	bne.n	80016fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0220 	bic.w	r2, r2, #32
 80016d6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d105      	bne.n	80016fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7ff fd6b 	bl	80011d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001702:	e00e      	b.n	8001722 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f7ff fd75 	bl	8001200 <HAL_ADC_ErrorCallback>
}
 8001716:	e004      	b.n	8001722 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001736:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff fd57 	bl	80011ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001752:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2240      	movs	r2, #64	@ 0x40
 8001758:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175e:	f043 0204 	orr.w	r2, r3, #4
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f7ff fd4a 	bl	8001200 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4907      	ldr	r1, [pc, #28]	@ (8001810 <__NVIC_EnableIRQ+0x38>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	@ (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	@ (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	@ 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff8e 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff29 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff3e 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff8e 	bl	8001868 <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5d 	bl	8001814 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff31 	bl	80017d8 <__NVIC_EnableIRQ>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffa2 	bl	80018d0 <SysTick_Config>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff fab4 	bl	8000f10 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e099      	b.n	8001ae8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d4:	e00f      	b.n	80019f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d6:	f7ff fa9b 	bl	8000f10 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d908      	bls.n	80019f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2220      	movs	r2, #32
 80019e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e078      	b.n	8001ae8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e8      	bne.n	80019d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <HAL_DMA_Init+0x158>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d107      	bne.n	8001a60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f023 0307 	bic.w	r3, r3, #7
 8001a76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d117      	bne.n	8001aba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00e      	beq.n	8001aba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fa6f 	bl	8001f80 <DMA_CheckFifoParam>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2240      	movs	r2, #64	@ 0x40
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e016      	b.n	8001ae8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fa26 	bl	8001f14 <DMA_CalcBaseAndBitshift>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad0:	223f      	movs	r2, #63	@ 0x3f
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	f010803f 	.word	0xf010803f

08001af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_DMA_Start_IT+0x26>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e040      	b.n	8001b9c <HAL_DMA_Start_IT+0xa8>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d12f      	bne.n	8001b8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2202      	movs	r2, #2
 8001b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f9b8 	bl	8001eb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4c:	223f      	movs	r2, #63	@ 0x3f
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0216 	orr.w	r2, r2, #22
 8001b62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0208 	orr.w	r2, r2, #8
 8001b7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e005      	b.n	8001b9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b96:	2302      	movs	r3, #2
 8001b98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bb0:	4b8e      	ldr	r3, [pc, #568]	@ (8001dec <HAL_DMA_IRQHandler+0x248>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a8e      	ldr	r2, [pc, #568]	@ (8001df0 <HAL_DMA_IRQHandler+0x24c>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0a9b      	lsrs	r3, r3, #10
 8001bbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bce:	2208      	movs	r2, #8
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d01a      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0204 	bic.w	r2, r2, #4
 8001bf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c14:	2201      	movs	r2, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d012      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c32:	2201      	movs	r2, #1
 8001c34:	409a      	lsls	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3e:	f043 0202 	orr.w	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d012      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c68:	2204      	movs	r2, #4
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c74:	f043 0204 	orr.w	r2, r3, #4
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	2210      	movs	r2, #16
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d043      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d03c      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d018      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d108      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d024      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
 8001cd2:	e01f      	b.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01b      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
 8001ce4:	e016      	b.n	8001d14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d107      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0208 	bic.w	r2, r2, #8
 8001d02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d18:	2220      	movs	r2, #32
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 808f 	beq.w	8001e44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8087 	beq.w	8001e44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d136      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0216 	bic.w	r2, r2, #22
 8001d5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x1da>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0208 	bic.w	r2, r2, #8
 8001d8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d92:	223f      	movs	r2, #63	@ 0x3f
 8001d94:	409a      	lsls	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d07e      	beq.n	8001eb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	4798      	blx	r3
        }
        return;
 8001dba:	e079      	b.n	8001eb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01d      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10d      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d031      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
 8001de8:	e02c      	b.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
 8001dea:	bf00      	nop
 8001dec:	20000000 	.word	0x20000000
 8001df0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d023      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	e01e      	b.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10f      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0210 	bic.w	r2, r2, #16
 8001e22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d032      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2205      	movs	r2, #5
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d307      	bcc.n	8001e8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f2      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x2cc>
 8001e8a:	e000      	b.n	8001e8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	4798      	blx	r3
 8001eae:	e000      	b.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001eb0:	bf00      	nop
    }
  }
}
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b40      	cmp	r3, #64	@ 0x40
 8001ee4:	d108      	bne.n	8001ef8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ef6:	e007      	b.n	8001f08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	3b10      	subs	r3, #16
 8001f24:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <DMA_CalcBaseAndBitshift+0x64>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f2e:	4a13      	ldr	r2, [pc, #76]	@ (8001f7c <DMA_CalcBaseAndBitshift+0x68>)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d909      	bls.n	8001f56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	1d1a      	adds	r2, r3, #4
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f54:	e007      	b.n	8001f66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	aaaaaaab 	.word	0xaaaaaaab
 8001f7c:	080097d0 	.word	0x080097d0

08001f80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d11f      	bne.n	8001fda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d856      	bhi.n	800204e <DMA_CheckFifoParam+0xce>
 8001fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa8 <DMA_CheckFifoParam+0x28>)
 8001fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa6:	bf00      	nop
 8001fa8:	08001fb9 	.word	0x08001fb9
 8001fac:	08001fcb 	.word	0x08001fcb
 8001fb0:	08001fb9 	.word	0x08001fb9
 8001fb4:	0800204f 	.word	0x0800204f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d046      	beq.n	8002052 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc8:	e043      	b.n	8002052 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fd2:	d140      	bne.n	8002056 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd8:	e03d      	b.n	8002056 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fe2:	d121      	bne.n	8002028 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d837      	bhi.n	800205a <DMA_CheckFifoParam+0xda>
 8001fea:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff0 <DMA_CheckFifoParam+0x70>)
 8001fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff0:	08002001 	.word	0x08002001
 8001ff4:	08002007 	.word	0x08002007
 8001ff8:	08002001 	.word	0x08002001
 8001ffc:	08002019 	.word	0x08002019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
      break;
 8002004:	e030      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d025      	beq.n	800205e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002016:	e022      	b.n	800205e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002020:	d11f      	bne.n	8002062 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002026:	e01c      	b.n	8002062 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d903      	bls.n	8002036 <DMA_CheckFifoParam+0xb6>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d003      	beq.n	800203c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002034:	e018      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
      break;
 800203a:	e015      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
      break;
 800204c:	e00b      	b.n	8002066 <DMA_CheckFifoParam+0xe6>
      break;
 800204e:	bf00      	nop
 8002050:	e00a      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 8002052:	bf00      	nop
 8002054:	e008      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 8002056:	bf00      	nop
 8002058:	e006      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 800205a:	bf00      	nop
 800205c:	e004      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 800205e:	bf00      	nop
 8002060:	e002      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;   
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 8002066:	bf00      	nop
    }
  } 
  
  return status; 
 8002068:	7bfb      	ldrb	r3, [r7, #15]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	@ 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	e159      	b.n	8002348 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f040 8148 	bne.w	8002342 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d005      	beq.n	80020ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d130      	bne.n	800212c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 0201 	and.w	r2, r3, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b03      	cmp	r3, #3
 8002136:	d017      	beq.n	8002168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d123      	bne.n	80021bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	08da      	lsrs	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3208      	adds	r2, #8
 80021b6:	69b9      	ldr	r1, [r7, #24]
 80021b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0203 	and.w	r2, r3, #3
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a2 	beq.w	8002342 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b57      	ldr	r3, [pc, #348]	@ (8002360 <HAL_GPIO_Init+0x2e8>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	4a56      	ldr	r2, [pc, #344]	@ (8002360 <HAL_GPIO_Init+0x2e8>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800220c:	6453      	str	r3, [r2, #68]	@ 0x44
 800220e:	4b54      	ldr	r3, [pc, #336]	@ (8002360 <HAL_GPIO_Init+0x2e8>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221a:	4a52      	ldr	r2, [pc, #328]	@ (8002364 <HAL_GPIO_Init+0x2ec>)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a49      	ldr	r2, [pc, #292]	@ (8002368 <HAL_GPIO_Init+0x2f0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d019      	beq.n	800227a <HAL_GPIO_Init+0x202>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a48      	ldr	r2, [pc, #288]	@ (800236c <HAL_GPIO_Init+0x2f4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0x1fe>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a47      	ldr	r2, [pc, #284]	@ (8002370 <HAL_GPIO_Init+0x2f8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00d      	beq.n	8002272 <HAL_GPIO_Init+0x1fa>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a46      	ldr	r2, [pc, #280]	@ (8002374 <HAL_GPIO_Init+0x2fc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d007      	beq.n	800226e <HAL_GPIO_Init+0x1f6>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a45      	ldr	r2, [pc, #276]	@ (8002378 <HAL_GPIO_Init+0x300>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_GPIO_Init+0x1f2>
 8002266:	2304      	movs	r3, #4
 8002268:	e008      	b.n	800227c <HAL_GPIO_Init+0x204>
 800226a:	2307      	movs	r3, #7
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x204>
 800226e:	2303      	movs	r3, #3
 8002270:	e004      	b.n	800227c <HAL_GPIO_Init+0x204>
 8002272:	2302      	movs	r3, #2
 8002274:	e002      	b.n	800227c <HAL_GPIO_Init+0x204>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_GPIO_Init+0x204>
 800227a:	2300      	movs	r3, #0
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f002 0203 	and.w	r2, r2, #3
 8002282:	0092      	lsls	r2, r2, #2
 8002284:	4093      	lsls	r3, r2
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800228c:	4935      	ldr	r1, [pc, #212]	@ (8002364 <HAL_GPIO_Init+0x2ec>)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229a:	4b38      	ldr	r3, [pc, #224]	@ (800237c <HAL_GPIO_Init+0x304>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022be:	4a2f      	ldr	r2, [pc, #188]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c4:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e8:	4a24      	ldr	r2, [pc, #144]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ee:	4b23      	ldr	r3, [pc, #140]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002312:	4a1a      	ldr	r2, [pc, #104]	@ (800237c <HAL_GPIO_Init+0x304>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002318:	4b18      	ldr	r3, [pc, #96]	@ (800237c <HAL_GPIO_Init+0x304>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800233c:	4a0f      	ldr	r2, [pc, #60]	@ (800237c <HAL_GPIO_Init+0x304>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3301      	adds	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	f67f aea2 	bls.w	8002094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3724      	adds	r7, #36	@ 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40013800 	.word	0x40013800
 8002368:	40020000 	.word	0x40020000
 800236c:	40020400 	.word	0x40020400
 8002370:	40020800 	.word	0x40020800
 8002374:	40020c00 	.word	0x40020c00
 8002378:	40021000 	.word	0x40021000
 800237c:	40013c00 	.word	0x40013c00

08002380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
 800238c:	4613      	mov	r3, r2
 800238e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002390:	787b      	ldrb	r3, [r7, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800239c:	e003      	b.n	80023a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	041a      	lsls	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	619a      	str	r2, [r3, #24]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b085      	sub	sp, #20
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023c4:	887a      	ldrh	r2, [r7, #2]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4013      	ands	r3, r2
 80023ca:	041a      	lsls	r2, r3, #16
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	887b      	ldrh	r3, [r7, #2]
 80023d2:	400b      	ands	r3, r1
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	619a      	str	r2, [r3, #24]
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af02      	add	r7, sp, #8
 80023ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e101      	b.n	80025fc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f006 f9ba 	bl	800878c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2203      	movs	r2, #3
 800241c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002426:	d102      	bne.n	800242e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fda9 	bl	8004f8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7c1a      	ldrb	r2, [r3, #16]
 8002440:	f88d 2000 	strb.w	r2, [sp]
 8002444:	3304      	adds	r3, #4
 8002446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002448:	f002 fc88 	bl	8004d5c <USB_CoreInit>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0ce      	b.n	80025fc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f002 fda1 	bl	8004fac <USB_SetCurrentMode>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0bf      	b.n	80025fc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e04a      	b.n	8002518 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3315      	adds	r3, #21
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	3314      	adds	r3, #20
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	b298      	uxth	r0, r3
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	332e      	adds	r3, #46	@ 0x2e
 80024be:	4602      	mov	r2, r0
 80024c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3318      	adds	r3, #24
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	331c      	adds	r3, #28
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3320      	adds	r3, #32
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3324      	adds	r3, #36	@ 0x24
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	3301      	adds	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	791b      	ldrb	r3, [r3, #4]
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	429a      	cmp	r2, r3
 8002520:	d3af      	bcc.n	8002482 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	e044      	b.n	80025b2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	3301      	adds	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	791b      	ldrb	r3, [r3, #4]
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3b5      	bcc.n	8002528 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7c1a      	ldrb	r2, [r3, #16]
 80025c4:	f88d 2000 	strb.w	r2, [sp]
 80025c8:	3304      	adds	r3, #4
 80025ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025cc:	f002 fd3a 	bl	8005044 <USB_DevInit>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2202      	movs	r2, #2
 80025da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00c      	b.n	80025fc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 fd7e 	bl	80060f6 <USB_DevDisconnect>

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_PCD_Start+0x1c>
 800261c:	2302      	movs	r3, #2
 800261e:	e022      	b.n	8002666 <HAL_PCD_Start+0x62>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d009      	beq.n	8002648 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002640:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f002 fc8b 	bl	8004f68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f003 fd2c 	bl	80060b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800266e:	b590      	push	{r4, r7, lr}
 8002670:	b08d      	sub	sp, #52	@ 0x34
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f003 fdea 	bl	800625e <USB_GetMode>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 848c 	bne.w	8002faa <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fd4e 	bl	8006138 <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8482 	beq.w	8002fa8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 fd3b 	bl	8006138 <USB_ReadInterrupts>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d107      	bne.n	80026dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f002 0202 	and.w	r2, r2, #2
 80026da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 fd29 	bl	8006138 <USB_ReadInterrupts>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d161      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0210 	bic.w	r2, r2, #16
 80026fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f003 020f 	and.w	r2, r3, #15
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	0c5b      	lsrs	r3, r3, #17
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	2b02      	cmp	r3, #2
 800272a:	d124      	bne.n	8002776 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d035      	beq.n	80027a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	6a38      	ldr	r0, [r7, #32]
 800274c:	f003 fb60 	bl	8005e10 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800275c:	441a      	add	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800276e:	441a      	add	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	615a      	str	r2, [r3, #20]
 8002774:	e016      	b.n	80027a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	0c5b      	lsrs	r3, r3, #17
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	2b06      	cmp	r3, #6
 8002780:	d110      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002788:	2208      	movs	r2, #8
 800278a:	4619      	mov	r1, r3
 800278c:	6a38      	ldr	r0, [r7, #32]
 800278e:	f003 fb3f 	bl	8005e10 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279e:	441a      	add	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0210 	orr.w	r2, r2, #16
 80027b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f003 fcbd 	bl	8006138 <USB_ReadInterrupts>
 80027be:	4603      	mov	r3, r0
 80027c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027c8:	f040 80a7 	bne.w	800291a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 fcc2 	bl	800615e <USB_ReadDevAllOutEpInterrupt>
 80027da:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027dc:	e099      	b.n	8002912 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 808e 	beq.w	8002906 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 fce6 	bl	80061c6 <USB_ReadDevOutEPInterrupt>
 80027fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00c      	beq.n	8002820 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002812:	461a      	mov	r2, r3
 8002814:	2301      	movs	r3, #1
 8002816:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002818:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fea2 	bl	8003564 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00c      	beq.n	8002844 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	4413      	add	r3, r2
 8002832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002836:	461a      	mov	r2, r3
 8002838:	2308      	movs	r3, #8
 800283a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800283c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 ff78 	bl	8003734 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800285a:	461a      	mov	r2, r3
 800285c:	2310      	movs	r3, #16
 800285e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d030      	beq.n	80028cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002872:	2b80      	cmp	r3, #128	@ 0x80
 8002874:	d109      	bne.n	800288a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002884:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002888:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800288a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	3304      	adds	r3, #4
 800289e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	78db      	ldrb	r3, [r3, #3]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d108      	bne.n	80028ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2200      	movs	r2, #0
 80028ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	4619      	mov	r1, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f006 f865 	bl	8008984 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028c6:	461a      	mov	r2, r3
 80028c8:	2302      	movs	r3, #2
 80028ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e2:	461a      	mov	r2, r3
 80028e4:	2320      	movs	r3, #32
 80028e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028fe:	461a      	mov	r2, r3
 8002900:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002904:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	3301      	adds	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	f47f af62 	bne.w	80027de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f003 fc0a 	bl	8006138 <USB_ReadInterrupts>
 8002924:	4603      	mov	r3, r0
 8002926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800292a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800292e:	f040 80db 	bne.w	8002ae8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fc2b 	bl	8006192 <USB_ReadDevAllInEpInterrupt>
 800293c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002942:	e0cd      	b.n	8002ae0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80c2 	beq.w	8002ad4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fc51 	bl	8006202 <USB_ReadDevInEPInterrupt>
 8002960:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d057      	beq.n	8002a1c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	2201      	movs	r2, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002980:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	69f9      	ldr	r1, [r7, #28]
 8002988:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800298c:	4013      	ands	r3, r2
 800298e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800299c:	461a      	mov	r2, r3
 800299e:	2301      	movs	r3, #1
 80029a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	799b      	ldrb	r3, [r3, #6]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d132      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3320      	adds	r3, #32
 80029ba:	6819      	ldr	r1, [r3, #0]
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4403      	add	r3, r0
 80029ca:	331c      	adds	r3, #28
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4419      	add	r1, r3
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4403      	add	r3, r0
 80029de:	3320      	adds	r3, #32
 80029e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d113      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x3a2>
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3324      	adds	r3, #36	@ 0x24
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d108      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	f003 fc58 	bl	80062c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f005 ff39 	bl	800888e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a32:	461a      	mov	r2, r3
 8002a34:	2308      	movs	r3, #8
 8002a36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2310      	movs	r3, #16
 8002a52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2340      	movs	r3, #64	@ 0x40
 8002a6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d023      	beq.n	8002ac2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a7c:	6a38      	ldr	r0, [r7, #32]
 8002a7e:	f002 fc45 	bl	800530c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3310      	adds	r3, #16
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	78db      	ldrb	r3, [r3, #3]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d108      	bne.n	8002ab0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f005 ff7c 	bl	80089a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002abc:	461a      	mov	r2, r3
 8002abe:	2302      	movs	r3, #2
 8002ac0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002acc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fcbb 	bl	800344a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f47f af2e 	bne.w	8002944 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 fb23 	bl	8006138 <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002af8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002afc:	d122      	bne.n	8002b44 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d108      	bne.n	8002b2e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b24:	2100      	movs	r1, #0
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fea2 	bl	8003870 <HAL_PCDEx_LPM_Callback>
 8002b2c:	e002      	b.n	8002b34 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f005 ff1a 	bl	8008968 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 faf5 	bl	8006138 <USB_ReadInterrupts>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b58:	d112      	bne.n	8002b80 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d102      	bne.n	8002b70 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f005 fed6 	bl	800891c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b7e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fad7 	bl	8006138 <USB_ReadInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b94:	f040 80b7 	bne.w	8002d06 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2110      	movs	r1, #16
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 fbaa 	bl	800530c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bbc:	e046      	b.n	8002c4c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002bd0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002be2:	0151      	lsls	r1, r2, #5
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	440a      	add	r2, r1
 8002be8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002bec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bf0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c04:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c16:	0151      	lsls	r1, r2, #5
 8002c18:	69fa      	ldr	r2, [r7, #28]
 8002c1a:	440a      	add	r2, r1
 8002c1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c20:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c36:	0151      	lsls	r1, r2, #5
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	440a      	add	r2, r1
 8002c3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002c44:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c48:	3301      	adds	r3, #1
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	791b      	ldrb	r3, [r3, #4]
 8002c50:	461a      	mov	r2, r3
 8002c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d3b2      	bcc.n	8002bbe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c66:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c6a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	7bdb      	ldrb	r3, [r3, #15]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d016      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c84:	f043 030b 	orr.w	r3, r3, #11
 8002c88:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c9a:	f043 030b 	orr.w	r3, r3, #11
 8002c9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca0:	e015      	b.n	8002cce <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cb0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cb4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002cb8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cc8:	f043 030b 	orr.w	r3, r3, #11
 8002ccc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cdc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002ce0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f003 fae5 	bl	80062c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 fa14 	bl	8006138 <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d1a:	d123      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 faaa 	bl	800627a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f002 fb67 	bl	80053fe <USB_GetDevSpeed>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681c      	ldr	r4, [r3, #0]
 8002d3c:	f001 f9c8 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 8002d40:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d46:	461a      	mov	r2, r3
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f002 f86b 	bl	8004e24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f005 fdc5 	bl	80088de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f003 f9e5 	bl	8006138 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d10a      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f005 fda2 	bl	80088c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f002 0208 	and.w	r2, r2, #8
 8002d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 f9d0 	bl	8006138 <USB_ReadInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9e:	2b80      	cmp	r3, #128	@ 0x80
 8002da0:	d123      	bne.n	8002dea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dae:	2301      	movs	r3, #1
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db2:	e014      	b.n	8002dde <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fb08 	bl	80033e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	3301      	adds	r3, #1
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	791b      	ldrb	r3, [r3, #4]
 8002de2:	461a      	mov	r2, r3
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d3e4      	bcc.n	8002db4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 f9a2 	bl	8006138 <USB_ReadInterrupts>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dfe:	d13c      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e00:	2301      	movs	r3, #1
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e04:	e02b      	b.n	8002e5e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3318      	adds	r3, #24
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d115      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	da12      	bge.n	8002e58 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	3317      	adds	r3, #23
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	4619      	mov	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fac8 	bl	80033e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	791b      	ldrb	r3, [r3, #4]
 8002e62:	461a      	mov	r2, r3
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d3cd      	bcc.n	8002e06 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 f95a 	bl	8006138 <USB_ReadInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e8e:	d156      	bne.n	8002f3e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e90:	2301      	movs	r3, #1
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e94:	e045      	b.n	8002f22 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d12e      	bne.n	8002f1c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ebe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da2b      	bge.n	8002f1c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002ed0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d121      	bne.n	8002f1c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f18:	6053      	str	r3, [r2, #4]
            break;
 8002f1a:	e008      	b.n	8002f2e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	3301      	adds	r3, #1
 8002f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	791b      	ldrb	r3, [r3, #4]
 8002f26:	461a      	mov	r2, r3
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d3b3      	bcc.n	8002e96 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 f8f8 	bl	8006138 <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f52:	d10a      	bne.n	8002f6a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f005 fd39 	bl	80089cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 f8e2 	bl	8006138 <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d115      	bne.n	8002faa <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f005 fd29 	bl	80089e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	e000      	b.n	8002faa <HAL_PCD_IRQHandler+0x93c>
      return;
 8002fa8:	bf00      	nop
    }
  }
}
 8002faa:	3734      	adds	r7, #52	@ 0x34
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd90      	pop	{r4, r7, pc}

08002fb0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_PCD_SetAddress+0x1a>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e012      	b.n	8002ff0 <HAL_PCD_SetAddress+0x40>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 f841 	bl	8006068 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	4608      	mov	r0, r1
 8003002:	4611      	mov	r1, r2
 8003004:	461a      	mov	r2, r3
 8003006:	4603      	mov	r3, r0
 8003008:	70fb      	strb	r3, [r7, #3]
 800300a:	460b      	mov	r3, r1
 800300c:	803b      	strh	r3, [r7, #0]
 800300e:	4613      	mov	r3, r2
 8003010:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800301a:	2b00      	cmp	r3, #0
 800301c:	da0f      	bge.n	800303e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	f003 020f 	and.w	r2, r3, #15
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	3310      	adds	r3, #16
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	3304      	adds	r3, #4
 8003034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	705a      	strb	r2, [r3, #1]
 800303c:	e00f      	b.n	800305e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 020f 	and.w	r2, r3, #15
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	3304      	adds	r3, #4
 8003056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	b2da      	uxtb	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800306a:	883a      	ldrh	r2, [r7, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	78ba      	ldrb	r2, [r7, #2]
 8003074:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d004      	beq.n	8003088 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003088:	78bb      	ldrb	r3, [r7, #2]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d102      	bne.n	8003094 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_PCD_EP_Open+0xaa>
 800309e:	2302      	movs	r3, #2
 80030a0:	e00e      	b.n	80030c0 <HAL_PCD_EP_Open+0xc8>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68f9      	ldr	r1, [r7, #12]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 f9c9 	bl	8005448 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80030be:	7afb      	ldrb	r3, [r7, #11]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	da0f      	bge.n	80030fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	f003 020f 	and.w	r2, r3, #15
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	3310      	adds	r3, #16
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	3304      	adds	r3, #4
 80030f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	705a      	strb	r2, [r3, #1]
 80030fa:	e00f      	b.n	800311c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	f003 020f 	and.w	r2, r3, #15
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	3304      	adds	r3, #4
 8003114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	b2da      	uxtb	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_PCD_EP_Close+0x6e>
 8003132:	2302      	movs	r3, #2
 8003134:	e00e      	b.n	8003154 <HAL_PCD_EP_Close+0x8c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68f9      	ldr	r1, [r7, #12]
 8003144:	4618      	mov	r0, r3
 8003146:	f002 fa07 	bl	8005558 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	460b      	mov	r3, r1
 800316a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800316c:	7afb      	ldrb	r3, [r7, #11]
 800316e:	f003 020f 	and.w	r2, r3, #15
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	3304      	adds	r3, #4
 8003184:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2200      	movs	r2, #0
 8003196:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2200      	movs	r2, #0
 800319c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800319e:	7afb      	ldrb	r3, [r7, #11]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	799b      	ldrb	r3, [r3, #6]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d102      	bne.n	80031b8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	799b      	ldrb	r3, [r3, #6]
 80031c0:	461a      	mov	r2, r3
 80031c2:	6979      	ldr	r1, [r7, #20]
 80031c4:	f002 faa4 	bl	8005710 <USB_EPStartXfer>

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 020f 	and.w	r2, r3, #15
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80031f4:	681b      	ldr	r3, [r3, #0]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	460b      	mov	r3, r1
 8003210:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003212:	7afb      	ldrb	r3, [r7, #11]
 8003214:	f003 020f 	and.w	r2, r3, #15
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	3310      	adds	r3, #16
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4413      	add	r3, r2
 8003226:	3304      	adds	r3, #4
 8003228:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2200      	movs	r2, #0
 800323a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2201      	movs	r2, #1
 8003240:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003242:	7afb      	ldrb	r3, [r7, #11]
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	b2da      	uxtb	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	799b      	ldrb	r3, [r3, #6]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d102      	bne.n	800325c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	799b      	ldrb	r3, [r3, #6]
 8003264:	461a      	mov	r2, r3
 8003266:	6979      	ldr	r1, [r7, #20]
 8003268:	f002 fa52 	bl	8005710 <USB_EPStartXfer>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	460b      	mov	r3, r1
 8003280:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	7912      	ldrb	r2, [r2, #4]
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e04f      	b.n	8003334 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003298:	2b00      	cmp	r3, #0
 800329a:	da0f      	bge.n	80032bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	f003 020f 	and.w	r2, r3, #15
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	3310      	adds	r3, #16
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	3304      	adds	r3, #4
 80032b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	705a      	strb	r2, [r3, #1]
 80032ba:	e00d      	b.n	80032d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	3304      	adds	r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_PCD_EP_SetStall+0x82>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e01d      	b.n	8003334 <HAL_PCD_EP_SetStall+0xbe>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68f9      	ldr	r1, [r7, #12]
 8003306:	4618      	mov	r0, r3
 8003308:	f002 fdda 	bl	8005ec0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	7999      	ldrb	r1, [r3, #6]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003324:	461a      	mov	r2, r3
 8003326:	f002 ffcb 	bl	80062c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	7912      	ldrb	r2, [r2, #4]
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e042      	b.n	80033e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800335a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800335e:	2b00      	cmp	r3, #0
 8003360:	da0f      	bge.n	8003382 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	f003 020f 	and.w	r2, r3, #15
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	3310      	adds	r3, #16
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	705a      	strb	r2, [r3, #1]
 8003380:	e00f      	b.n	80033a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	f003 020f 	and.w	r2, r3, #15
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	3304      	adds	r3, #4
 800339a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_PCD_EP_ClrStall+0x86>
 80033be:	2302      	movs	r3, #2
 80033c0:	e00e      	b.n	80033e0 <HAL_PCD_EP_ClrStall+0xa4>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68f9      	ldr	r1, [r7, #12]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f002 fde3 	bl	8005f9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80033f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	da0c      	bge.n	8003416 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	f003 020f 	and.w	r2, r3, #15
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	3310      	adds	r3, #16
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	3304      	adds	r3, #4
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e00c      	b.n	8003430 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	f003 020f 	and.w	r2, r3, #15
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	4413      	add	r3, r2
 800342c:	3304      	adds	r3, #4
 800342e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68f9      	ldr	r1, [r7, #12]
 8003436:	4618      	mov	r0, r3
 8003438:	f002 fc02 	bl	8005c40 <USB_EPStopXfer>
 800343c:	4603      	mov	r3, r0
 800343e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003440:	7afb      	ldrb	r3, [r7, #11]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b08a      	sub	sp, #40	@ 0x28
 800344e:	af02      	add	r7, sp, #8
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	3310      	adds	r3, #16
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	3304      	adds	r3, #4
 8003470:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	429a      	cmp	r2, r3
 800347c:	d901      	bls.n	8003482 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e06b      	b.n	800355a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	429a      	cmp	r2, r3
 8003496:	d902      	bls.n	800349e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3303      	adds	r3, #3
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034a6:	e02a      	b.n	80034fe <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d902      	bls.n	80034c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	3303      	adds	r3, #3
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	68d9      	ldr	r1, [r3, #12]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	4603      	mov	r3, r0
 80034e0:	6978      	ldr	r0, [r7, #20]
 80034e2:	f002 fc57 	bl	8005d94 <USB_WritePacket>

    ep->xfer_buff  += len;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	441a      	add	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	441a      	add	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	429a      	cmp	r2, r3
 8003512:	d809      	bhi.n	8003528 <PCD_WriteEmptyTxFifo+0xde>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800351c:	429a      	cmp	r2, r3
 800351e:	d203      	bcs.n	8003528 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1bf      	bne.n	80034a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	429a      	cmp	r2, r3
 8003532:	d811      	bhi.n	8003558 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	2201      	movs	r2, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	43db      	mvns	r3, r3
 800354e:	6939      	ldr	r1, [r7, #16]
 8003550:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003554:	4013      	ands	r3, r2
 8003556:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3720      	adds	r7, #32
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	333c      	adds	r3, #60	@ 0x3c
 800357c:	3304      	adds	r3, #4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	799b      	ldrb	r3, [r3, #6]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d17b      	bne.n	8003692 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d015      	beq.n	80035d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	4a61      	ldr	r2, [pc, #388]	@ (800372c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	f240 80b9 	bls.w	8003720 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80b3 	beq.w	8003720 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c6:	461a      	mov	r2, r3
 80035c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035cc:	6093      	str	r3, [r2, #8]
 80035ce:	e0a7      	b.n	8003720 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e6:	461a      	mov	r2, r3
 80035e8:	2320      	movs	r3, #32
 80035ea:	6093      	str	r3, [r2, #8]
 80035ec:	e098      	b.n	8003720 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f040 8093 	bne.w	8003720 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	4a4b      	ldr	r2, [pc, #300]	@ (800372c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d90f      	bls.n	8003622 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003618:	461a      	mov	r2, r3
 800361a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800361e:	6093      	str	r3, [r2, #8]
 8003620:	e07e      	b.n	8003720 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4413      	add	r3, r2
 8003634:	3304      	adds	r3, #4
 8003636:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	0159      	lsls	r1, r3, #5
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	440b      	add	r3, r1
 8003644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364e:	1ad2      	subs	r2, r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d114      	bne.n	8003684 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800366c:	461a      	mov	r2, r3
 800366e:	2101      	movs	r1, #1
 8003670:	f002 fe26 	bl	80062c0 <USB_EP0_OutStart>
 8003674:	e006      	b.n	8003684 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	441a      	add	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	4619      	mov	r1, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f005 f8e4 	bl	8008858 <HAL_PCD_DataOutStageCallback>
 8003690:	e046      	b.n	8003720 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	4a26      	ldr	r2, [pc, #152]	@ (8003730 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d124      	bne.n	80036e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036b0:	461a      	mov	r2, r3
 80036b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036b6:	6093      	str	r3, [r2, #8]
 80036b8:	e032      	b.n	8003720 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d0:	461a      	mov	r2, r3
 80036d2:	2320      	movs	r3, #32
 80036d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	4619      	mov	r1, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f005 f8bb 	bl	8008858 <HAL_PCD_DataOutStageCallback>
 80036e2:	e01d      	b.n	8003720 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d114      	bne.n	8003714 <PCD_EP_OutXfrComplete_int+0x1b0>
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d108      	bne.n	8003714 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800370c:	461a      	mov	r2, r3
 800370e:	2100      	movs	r1, #0
 8003710:	f002 fdd6 	bl	80062c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	4619      	mov	r1, r3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f005 f89c 	bl	8008858 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	4f54300a 	.word	0x4f54300a
 8003730:	4f54310a 	.word	0x4f54310a

08003734 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	333c      	adds	r3, #60	@ 0x3c
 800374c:	3304      	adds	r3, #4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4a15      	ldr	r2, [pc, #84]	@ (80037bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d90e      	bls.n	8003788 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003770:	2b00      	cmp	r3, #0
 8003772:	d009      	beq.n	8003788 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003780:	461a      	mov	r2, r3
 8003782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003786:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f005 f853 	bl	8008834 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a0a      	ldr	r2, [pc, #40]	@ (80037bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d90c      	bls.n	80037b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	799b      	ldrb	r3, [r3, #6]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d108      	bne.n	80037b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037a8:	461a      	mov	r2, r3
 80037aa:	2101      	movs	r1, #1
 80037ac:	f002 fd88 	bl	80062c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	4f54300a 	.word	0x4f54300a

080037c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	70fb      	strb	r3, [r7, #3]
 80037cc:	4613      	mov	r3, r2
 80037ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d107      	bne.n	80037ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80037de:	883b      	ldrh	r3, [r7, #0]
 80037e0:	0419      	lsls	r1, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80037ec:	e028      	b.n	8003840 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	0c1b      	lsrs	r3, r3, #16
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	4413      	add	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037fc:	2300      	movs	r3, #0
 80037fe:	73fb      	strb	r3, [r7, #15]
 8003800:	e00d      	b.n	800381e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	3340      	adds	r3, #64	@ 0x40
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	0c1b      	lsrs	r3, r3, #16
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	4413      	add	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	3301      	adds	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	3b01      	subs	r3, #1
 8003824:	429a      	cmp	r2, r3
 8003826:	d3ec      	bcc.n	8003802 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003828:	883b      	ldrh	r3, [r7, #0]
 800382a:	0418      	lsls	r0, r3, #16
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	3b01      	subs	r3, #1
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	4302      	orrs	r2, r0
 8003838:	3340      	adds	r3, #64	@ 0x40
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	460b      	mov	r3, r1
 8003858:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e267      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d075      	beq.n	8003992 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038a6:	4b88      	ldr	r3, [pc, #544]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d00c      	beq.n	80038cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038b2:	4b85      	ldr	r3, [pc, #532]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d112      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038be:	4b82      	ldr	r3, [pc, #520]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ca:	d10b      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d05b      	beq.n	8003990 <HAL_RCC_OscConfig+0x108>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d157      	bne.n	8003990 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e242      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ec:	d106      	bne.n	80038fc <HAL_RCC_OscConfig+0x74>
 80038ee:	4b76      	ldr	r3, [pc, #472]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a75      	ldr	r2, [pc, #468]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e01d      	b.n	8003938 <HAL_RCC_OscConfig+0xb0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003904:	d10c      	bne.n	8003920 <HAL_RCC_OscConfig+0x98>
 8003906:	4b70      	ldr	r3, [pc, #448]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a6f      	ldr	r2, [pc, #444]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 800390c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	4b6d      	ldr	r3, [pc, #436]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a6c      	ldr	r2, [pc, #432]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e00b      	b.n	8003938 <HAL_RCC_OscConfig+0xb0>
 8003920:	4b69      	ldr	r3, [pc, #420]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a68      	ldr	r2, [pc, #416]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b66      	ldr	r3, [pc, #408]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a65      	ldr	r2, [pc, #404]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003932:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d013      	beq.n	8003968 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fd fae6 	bl	8000f10 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003948:	f7fd fae2 	bl	8000f10 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	@ 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e207      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0xc0>
 8003966:	e014      	b.n	8003992 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fd fad2 	bl	8000f10 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003970:	f7fd face 	bl	8000f10 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	@ 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e1f3      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003982:	4b51      	ldr	r3, [pc, #324]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0xe8>
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d063      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800399e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039aa:	4b47      	ldr	r3, [pc, #284]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d11c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b6:	4b44      	ldr	r3, [pc, #272]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d116      	bne.n	80039f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c2:	4b41      	ldr	r3, [pc, #260]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_RCC_OscConfig+0x152>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d001      	beq.n	80039da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e1c7      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039da:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4937      	ldr	r1, [pc, #220]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	e03a      	b.n	8003a66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f8:	4b34      	ldr	r3, [pc, #208]	@ (8003acc <HAL_RCC_OscConfig+0x244>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fd fa87 	bl	8000f10 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a06:	f7fd fa83 	bl	8000f10 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e1a8      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a18:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	4b28      	ldr	r3, [pc, #160]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4925      	ldr	r1, [pc, #148]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
 8003a38:	e015      	b.n	8003a66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3a:	4b24      	ldr	r3, [pc, #144]	@ (8003acc <HAL_RCC_OscConfig+0x244>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fd fa66 	bl	8000f10 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a48:	f7fd fa62 	bl	8000f10 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e187      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d036      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d016      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ad0 <HAL_RCC_OscConfig+0x248>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fd fa46 	bl	8000f10 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a88:	f7fd fa42 	bl	8000f10 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e167      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x200>
 8003aa6:	e01b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa8:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <HAL_RCC_OscConfig+0x248>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aae:	f7fd fa2f 	bl	8000f10 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	e00e      	b.n	8003ad4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab6:	f7fd fa2b 	bl	8000f10 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d907      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e150      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	42470000 	.word	0x42470000
 8003ad0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad4:	4b88      	ldr	r3, [pc, #544]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ea      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8097 	beq.w	8003c1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af2:	4b81      	ldr	r3, [pc, #516]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	4b7d      	ldr	r3, [pc, #500]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	4a7c      	ldr	r2, [pc, #496]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b0e:	4b7a      	ldr	r3, [pc, #488]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	4b77      	ldr	r3, [pc, #476]	@ (8003cfc <HAL_RCC_OscConfig+0x474>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d118      	bne.n	8003b5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b2a:	4b74      	ldr	r3, [pc, #464]	@ (8003cfc <HAL_RCC_OscConfig+0x474>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a73      	ldr	r2, [pc, #460]	@ (8003cfc <HAL_RCC_OscConfig+0x474>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b36:	f7fd f9eb 	bl	8000f10 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7fd f9e7 	bl	8000f10 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e10c      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	4b6a      	ldr	r3, [pc, #424]	@ (8003cfc <HAL_RCC_OscConfig+0x474>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d106      	bne.n	8003b72 <HAL_RCC_OscConfig+0x2ea>
 8003b64:	4b64      	ldr	r3, [pc, #400]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b68:	4a63      	ldr	r2, [pc, #396]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b70:	e01c      	b.n	8003bac <HAL_RCC_OscConfig+0x324>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b05      	cmp	r3, #5
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x30c>
 8003b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7e:	4a5e      	ldr	r2, [pc, #376]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b80:	f043 0304 	orr.w	r3, r3, #4
 8003b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b86:	4b5c      	ldr	r3, [pc, #368]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	4a5b      	ldr	r2, [pc, #364]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0x324>
 8003b94:	4b58      	ldr	r3, [pc, #352]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b98:	4a57      	ldr	r2, [pc, #348]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba0:	4b55      	ldr	r3, [pc, #340]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba4:	4a54      	ldr	r2, [pc, #336]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	f023 0304 	bic.w	r3, r3, #4
 8003baa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d015      	beq.n	8003be0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7fd f9ac 	bl	8000f10 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bbc:	f7fd f9a8 	bl	8000f10 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e0cb      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd2:	4b49      	ldr	r3, [pc, #292]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0ee      	beq.n	8003bbc <HAL_RCC_OscConfig+0x334>
 8003bde:	e014      	b.n	8003c0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be0:	f7fd f996 	bl	8000f10 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fd f992 	bl	8000f10 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0b5      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1ee      	bne.n	8003be8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c10:	4b39      	ldr	r3, [pc, #228]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	4a38      	ldr	r2, [pc, #224]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80a1 	beq.w	8003d68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c26:	4b34      	ldr	r3, [pc, #208]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d05c      	beq.n	8003cec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d141      	bne.n	8003cbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3a:	4b31      	ldr	r3, [pc, #196]	@ (8003d00 <HAL_RCC_OscConfig+0x478>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fd f966 	bl	8000f10 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fd f962 	bl	8000f10 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e087      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5a:	4b27      	ldr	r3, [pc, #156]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	019b      	lsls	r3, r3, #6
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	491b      	ldr	r1, [pc, #108]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c90:	4b1b      	ldr	r3, [pc, #108]	@ (8003d00 <HAL_RCC_OscConfig+0x478>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c96:	f7fd f93b 	bl	8000f10 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9e:	f7fd f937 	bl	8000f10 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e05c      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb0:	4b11      	ldr	r3, [pc, #68]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x416>
 8003cbc:	e054      	b.n	8003d68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbe:	4b10      	ldr	r3, [pc, #64]	@ (8003d00 <HAL_RCC_OscConfig+0x478>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fd f924 	bl	8000f10 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fd f920 	bl	8000f10 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e045      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cde:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x444>
 8003cea:	e03d      	b.n	8003d68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e038      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d04:	4b1b      	ldr	r3, [pc, #108]	@ (8003d74 <HAL_RCC_OscConfig+0x4ec>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d028      	beq.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d121      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d11a      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d34:	4013      	ands	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d111      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800

08003d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0cc      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b68      	ldr	r3, [pc, #416]	@ (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d90c      	bls.n	8003db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b65      	ldr	r3, [pc, #404]	@ (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da2:	4b63      	ldr	r3, [pc, #396]	@ (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0b8      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d020      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dcc:	4b59      	ldr	r3, [pc, #356]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a58      	ldr	r2, [pc, #352]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de4:	4b53      	ldr	r3, [pc, #332]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4a52      	ldr	r2, [pc, #328]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df0:	4b50      	ldr	r3, [pc, #320]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	494d      	ldr	r1, [pc, #308]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d044      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	4b47      	ldr	r3, [pc, #284]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d119      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e07f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e36:	4b3f      	ldr	r3, [pc, #252]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e06f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e46:	4b3b      	ldr	r3, [pc, #236]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e067      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e56:	4b37      	ldr	r3, [pc, #220]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 0203 	bic.w	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4934      	ldr	r1, [pc, #208]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e68:	f7fd f852 	bl	8000f10 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e70:	f7fd f84e 	bl	8000f10 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e04f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	4b2b      	ldr	r3, [pc, #172]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 020c 	and.w	r2, r3, #12
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1eb      	bne.n	8003e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e98:	4b25      	ldr	r3, [pc, #148]	@ (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d20c      	bcs.n	8003ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b22      	ldr	r3, [pc, #136]	@ (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b20      	ldr	r3, [pc, #128]	@ (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e032      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ecc:	4b19      	ldr	r3, [pc, #100]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4916      	ldr	r1, [pc, #88]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eea:	4b12      	ldr	r3, [pc, #72]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	490e      	ldr	r1, [pc, #56]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003efe:	f000 f821 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 8003f02:	4602      	mov	r2, r0
 8003f04:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	490a      	ldr	r1, [pc, #40]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003f10:	5ccb      	ldrb	r3, [r1, r3]
 8003f12:	fa22 f303 	lsr.w	r3, r2, r3
 8003f16:	4a09      	ldr	r2, [pc, #36]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f1a:	4b09      	ldr	r3, [pc, #36]	@ (8003f40 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fc ffb2 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023c00 	.word	0x40023c00
 8003f34:	40023800 	.word	0x40023800
 8003f38:	080097b8 	.word	0x080097b8
 8003f3c:	20000000 	.word	0x20000000
 8003f40:	20000004 	.word	0x20000004

08003f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f48:	b090      	sub	sp, #64	@ 0x40
 8003f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f50:	2300      	movs	r3, #0
 8003f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f54:	2300      	movs	r3, #0
 8003f56:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f5c:	4b59      	ldr	r3, [pc, #356]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d00d      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x40>
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	f200 80a1 	bhi.w	80040b0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x34>
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d003      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f76:	e09b      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f78:	4b53      	ldr	r3, [pc, #332]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003f7c:	e09b      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f7e:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x188>)
 8003f80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f82:	e098      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f84:	4b4f      	ldr	r3, [pc, #316]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f8e:	4b4d      	ldr	r3, [pc, #308]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d028      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	623b      	str	r3, [r7, #32]
 8003fa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fac:	2100      	movs	r1, #0
 8003fae:	4b47      	ldr	r3, [pc, #284]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x188>)
 8003fb0:	fb03 f201 	mul.w	r2, r3, r1
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	fb00 f303 	mul.w	r3, r0, r3
 8003fba:	4413      	add	r3, r2
 8003fbc:	4a43      	ldr	r2, [pc, #268]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x188>)
 8003fbe:	fba0 1202 	umull	r1, r2, r0, r2
 8003fc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fc4:	460a      	mov	r2, r1
 8003fc6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fca:	4413      	add	r3, r2
 8003fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	61fa      	str	r2, [r7, #28]
 8003fd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003fde:	f7fc f94f 	bl	8000280 <__aeabi_uldivmod>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fea:	e053      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fec:	4b35      	ldr	r3, [pc, #212]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	099b      	lsrs	r3, r3, #6
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	617a      	str	r2, [r7, #20]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ffe:	f04f 0b00 	mov.w	fp, #0
 8004002:	4652      	mov	r2, sl
 8004004:	465b      	mov	r3, fp
 8004006:	f04f 0000 	mov.w	r0, #0
 800400a:	f04f 0100 	mov.w	r1, #0
 800400e:	0159      	lsls	r1, r3, #5
 8004010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004014:	0150      	lsls	r0, r2, #5
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	ebb2 080a 	subs.w	r8, r2, sl
 800401e:	eb63 090b 	sbc.w	r9, r3, fp
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800402e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004032:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004036:	ebb2 0408 	subs.w	r4, r2, r8
 800403a:	eb63 0509 	sbc.w	r5, r3, r9
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	00eb      	lsls	r3, r5, #3
 8004048:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800404c:	00e2      	lsls	r2, r4, #3
 800404e:	4614      	mov	r4, r2
 8004050:	461d      	mov	r5, r3
 8004052:	eb14 030a 	adds.w	r3, r4, sl
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	eb45 030b 	adc.w	r3, r5, fp
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800406a:	4629      	mov	r1, r5
 800406c:	028b      	lsls	r3, r1, #10
 800406e:	4621      	mov	r1, r4
 8004070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004074:	4621      	mov	r1, r4
 8004076:	028a      	lsls	r2, r1, #10
 8004078:	4610      	mov	r0, r2
 800407a:	4619      	mov	r1, r3
 800407c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407e:	2200      	movs	r2, #0
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	60fa      	str	r2, [r7, #12]
 8004084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004088:	f7fc f8fa 	bl	8000280 <__aeabi_uldivmod>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4613      	mov	r3, r2
 8004092:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004094:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	3301      	adds	r3, #1
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80040a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040ae:	e002      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b0:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80040b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3740      	adds	r7, #64	@ 0x40
 80040bc:	46bd      	mov	sp, r7
 80040be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
 80040c8:	00f42400 	.word	0x00f42400
 80040cc:	017d7840 	.word	0x017d7840

080040d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d4:	4b03      	ldr	r3, [pc, #12]	@ (80040e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000000 	.word	0x20000000

080040e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040ec:	f7ff fff0 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b05      	ldr	r3, [pc, #20]	@ (8004108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	0a9b      	lsrs	r3, r3, #10
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4903      	ldr	r1, [pc, #12]	@ (800410c <HAL_RCC_GetPCLK1Freq+0x24>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40023800 	.word	0x40023800
 800410c:	080097c8 	.word	0x080097c8

08004110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004114:	f7ff ffdc 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	0b5b      	lsrs	r3, r3, #13
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	4903      	ldr	r1, [pc, #12]	@ (8004134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40023800 	.word	0x40023800
 8004134:	080097c8 	.word	0x080097c8

08004138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e042      	b.n	80041d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fc fdca 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2224      	movs	r2, #36	@ 0x24
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800417a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fb79 	bl	8004874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	@ 0x28
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d175      	bne.n	80042e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_UART_Transmit+0x2c>
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e06e      	b.n	80042e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2221      	movs	r2, #33	@ 0x21
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004216:	f7fc fe7b 	bl	8000f10 <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	88fa      	ldrh	r2, [r7, #6]
 8004220:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	88fa      	ldrh	r2, [r7, #6]
 8004226:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004230:	d108      	bne.n	8004244 <HAL_UART_Transmit+0x6c>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d104      	bne.n	8004244 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	e003      	b.n	800424c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800424c:	e02e      	b.n	80042ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	@ 0x80
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f98b 	bl	8004574 <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e03a      	b.n	80042e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004284:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	3302      	adds	r3, #2
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	e007      	b.n	800429e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	781a      	ldrb	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	3301      	adds	r3, #1
 800429c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1cb      	bne.n	800424e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2200      	movs	r2, #0
 80042be:	2140      	movs	r1, #64	@ 0x40
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f957 	bl	8004574 <UART_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e006      	b.n	80042e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3720      	adds	r7, #32
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	4613      	mov	r3, r2
 80042fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b20      	cmp	r3, #32
 8004306:	d112      	bne.n	800432e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <HAL_UART_Receive_DMA+0x26>
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e00b      	b.n	8004330 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	461a      	mov	r2, r3
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f97f 	bl	8004628 <UART_Start_Receive_DMA>
 800432a:	4603      	mov	r3, r0
 800432c:	e000      	b.n	8004330 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800432e:	2302      	movs	r3, #2
  }
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b09c      	sub	sp, #112	@ 0x70
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004384:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d172      	bne.n	800447a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004396:	2200      	movs	r2, #0
 8004398:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800439a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	330c      	adds	r3, #12
 80043a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80043ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e5      	bne.n	800439a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80043e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3314      	adds	r3, #20
 80043ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80043ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80043f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043f6:	e841 2300 	strex	r3, r2, [r1]
 80043fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e5      	bne.n	80043ce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3314      	adds	r3, #20
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	623b      	str	r3, [r7, #32]
   return(result);
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004418:	663b      	str	r3, [r7, #96]	@ 0x60
 800441a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3314      	adds	r3, #20
 8004420:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004422:	633a      	str	r2, [r7, #48]	@ 0x30
 8004424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e5      	bne.n	8004402 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004438:	2220      	movs	r2, #32
 800443a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004442:	2b01      	cmp	r3, #1
 8004444:	d119      	bne.n	800447a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	60fb      	str	r3, [r7, #12]
   return(result);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f023 0310 	bic.w	r3, r3, #16
 800445c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800445e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004466:	61fa      	str	r2, [r7, #28]
 8004468:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	69b9      	ldr	r1, [r7, #24]
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	617b      	str	r3, [r7, #20]
   return(result);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e5      	bne.n	8004446 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800447a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800447c:	2200      	movs	r2, #0
 800447e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004484:	2b01      	cmp	r3, #1
 8004486:	d106      	bne.n	8004496 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800448a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800448c:	4619      	mov	r1, r3
 800448e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004490:	f7ff ff66 	bl	8004360 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004494:	e002      	b.n	800449c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004496:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004498:	f7fc f9f4 	bl	8000884 <HAL_UART_RxCpltCallback>
}
 800449c:	bf00      	nop
 800449e:	3770      	adds	r7, #112	@ 0x70
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d108      	bne.n	80044d2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	4619      	mov	r1, r3
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f7ff ff48 	bl	8004360 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044d0:	e002      	b.n	80044d8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff ff30 	bl	8004338 <HAL_UART_RxHalfCpltCallback>
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fc:	2b80      	cmp	r3, #128	@ 0x80
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b21      	cmp	r3, #33	@ 0x21
 8004512:	d108      	bne.n	8004526 <UART_DMAError+0x46>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2200      	movs	r2, #0
 800451e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004520:	68b8      	ldr	r0, [r7, #8]
 8004522:	f000 f91b 	bl	800475c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004530:	2b40      	cmp	r3, #64	@ 0x40
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b22      	cmp	r3, #34	@ 0x22
 8004546:	d108      	bne.n	800455a <UART_DMAError+0x7a>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2200      	movs	r2, #0
 8004552:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004554:	68b8      	ldr	r0, [r7, #8]
 8004556:	f000 f929 	bl	80047ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455e:	f043 0210 	orr.w	r2, r3, #16
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004566:	68b8      	ldr	r0, [r7, #8]
 8004568:	f7ff fef0 	bl	800434c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004584:	e03b      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d037      	beq.n	80045fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458e:	f7fc fcbf 	bl	8000f10 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	6a3a      	ldr	r2, [r7, #32]
 800459a:	429a      	cmp	r2, r3
 800459c:	d302      	bcc.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e03a      	b.n	800461e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d023      	beq.n	80045fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b80      	cmp	r3, #128	@ 0x80
 80045ba:	d020      	beq.n	80045fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b40      	cmp	r3, #64	@ 0x40
 80045c0:	d01d      	beq.n	80045fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d116      	bne.n	80045fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f8e0 	bl	80047ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2208      	movs	r2, #8
 80045f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e00f      	b.n	800461e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4013      	ands	r3, r2
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	429a      	cmp	r2, r3
 800460c:	bf0c      	ite	eq
 800460e:	2301      	moveq	r3, #1
 8004610:	2300      	movne	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	429a      	cmp	r2, r3
 800461a:	d0b4      	beq.n	8004586 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b098      	sub	sp, #96	@ 0x60
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	4613      	mov	r3, r2
 8004634:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	88fa      	ldrh	r2, [r7, #6]
 8004640:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2222      	movs	r2, #34	@ 0x22
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004654:	4a3e      	ldr	r2, [pc, #248]	@ (8004750 <UART_Start_Receive_DMA+0x128>)
 8004656:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465c:	4a3d      	ldr	r2, [pc, #244]	@ (8004754 <UART_Start_Receive_DMA+0x12c>)
 800465e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004664:	4a3c      	ldr	r2, [pc, #240]	@ (8004758 <UART_Start_Receive_DMA+0x130>)
 8004666:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466c:	2200      	movs	r2, #0
 800466e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004670:	f107 0308 	add.w	r3, r7, #8
 8004674:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3304      	adds	r3, #4
 8004680:	4619      	mov	r1, r3
 8004682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	f7fd fa34 	bl	8001af4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d019      	beq.n	80046de <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	330c      	adds	r3, #12
 80046b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	330c      	adds	r3, #12
 80046c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046ca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80046cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80046d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80046d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e5      	bne.n	80046aa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3314      	adds	r3, #20
 80046fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004700:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004704:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800470c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e5      	bne.n	80046de <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3314      	adds	r3, #20
 8004718:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	617b      	str	r3, [r7, #20]
   return(result);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004728:	653b      	str	r3, [r7, #80]	@ 0x50
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3314      	adds	r3, #20
 8004730:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004732:	627a      	str	r2, [r7, #36]	@ 0x24
 8004734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6a39      	ldr	r1, [r7, #32]
 8004738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e5      	bne.n	8004712 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3760      	adds	r7, #96	@ 0x60
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	08004379 	.word	0x08004379
 8004754:	080044a5 	.word	0x080044a5
 8004758:	080044e1 	.word	0x080044e1

0800475c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	@ 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	330c      	adds	r3, #12
 800476a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	60bb      	str	r3, [r7, #8]
   return(result);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	330c      	adds	r3, #12
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	61ba      	str	r2, [r7, #24]
 8004786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6979      	ldr	r1, [r7, #20]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	613b      	str	r3, [r7, #16]
   return(result);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e5      	bne.n	8004764 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80047a0:	bf00      	nop
 80047a2:	3724      	adds	r7, #36	@ 0x24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b095      	sub	sp, #84	@ 0x54
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	330c      	adds	r3, #12
 80047ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80047d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e5      	bne.n	80047b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3314      	adds	r3, #20
 80047ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3314      	adds	r3, #20
 8004806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004808:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800480a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800480e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e5      	bne.n	80047e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	2b01      	cmp	r3, #1
 8004822:	d119      	bne.n	8004858 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	330c      	adds	r3, #12
 800482a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	60bb      	str	r3, [r7, #8]
   return(result);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f023 0310 	bic.w	r3, r3, #16
 800483a:	647b      	str	r3, [r7, #68]	@ 0x44
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	330c      	adds	r3, #12
 8004842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004844:	61ba      	str	r2, [r7, #24]
 8004846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6979      	ldr	r1, [r7, #20]
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	613b      	str	r3, [r7, #16]
   return(result);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e5      	bne.n	8004824 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004866:	bf00      	nop
 8004868:	3754      	adds	r7, #84	@ 0x54
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004878:	b0c0      	sub	sp, #256	@ 0x100
 800487a:	af00      	add	r7, sp, #0
 800487c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004890:	68d9      	ldr	r1, [r3, #12]
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	ea40 0301 	orr.w	r3, r0, r1
 800489c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800489e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048cc:	f021 010c 	bic.w	r1, r1, #12
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048da:	430b      	orrs	r3, r1
 80048dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ee:	6999      	ldr	r1, [r3, #24]
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	ea40 0301 	orr.w	r3, r0, r1
 80048fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b8f      	ldr	r3, [pc, #572]	@ (8004b40 <UART_SetConfig+0x2cc>)
 8004904:	429a      	cmp	r2, r3
 8004906:	d005      	beq.n	8004914 <UART_SetConfig+0xa0>
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b8d      	ldr	r3, [pc, #564]	@ (8004b44 <UART_SetConfig+0x2d0>)
 8004910:	429a      	cmp	r2, r3
 8004912:	d104      	bne.n	800491e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004914:	f7ff fbfc 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 8004918:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800491c:	e003      	b.n	8004926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800491e:	f7ff fbe3 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 8004922:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004930:	f040 810c 	bne.w	8004b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004938:	2200      	movs	r2, #0
 800493a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800493e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004946:	4622      	mov	r2, r4
 8004948:	462b      	mov	r3, r5
 800494a:	1891      	adds	r1, r2, r2
 800494c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800494e:	415b      	adcs	r3, r3
 8004950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004956:	4621      	mov	r1, r4
 8004958:	eb12 0801 	adds.w	r8, r2, r1
 800495c:	4629      	mov	r1, r5
 800495e:	eb43 0901 	adc.w	r9, r3, r1
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800496e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004976:	4690      	mov	r8, r2
 8004978:	4699      	mov	r9, r3
 800497a:	4623      	mov	r3, r4
 800497c:	eb18 0303 	adds.w	r3, r8, r3
 8004980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004984:	462b      	mov	r3, r5
 8004986:	eb49 0303 	adc.w	r3, r9, r3
 800498a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800499a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800499e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049a2:	460b      	mov	r3, r1
 80049a4:	18db      	adds	r3, r3, r3
 80049a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80049a8:	4613      	mov	r3, r2
 80049aa:	eb42 0303 	adc.w	r3, r2, r3
 80049ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80049b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049b8:	f7fb fc62 	bl	8000280 <__aeabi_uldivmod>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4b61      	ldr	r3, [pc, #388]	@ (8004b48 <UART_SetConfig+0x2d4>)
 80049c2:	fba3 2302 	umull	r2, r3, r3, r2
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049dc:	4642      	mov	r2, r8
 80049de:	464b      	mov	r3, r9
 80049e0:	1891      	adds	r1, r2, r2
 80049e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049e4:	415b      	adcs	r3, r3
 80049e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049ec:	4641      	mov	r1, r8
 80049ee:	eb12 0a01 	adds.w	sl, r2, r1
 80049f2:	4649      	mov	r1, r9
 80049f4:	eb43 0b01 	adc.w	fp, r3, r1
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a0c:	4692      	mov	sl, r2
 8004a0e:	469b      	mov	fp, r3
 8004a10:	4643      	mov	r3, r8
 8004a12:	eb1a 0303 	adds.w	r3, sl, r3
 8004a16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	18db      	adds	r3, r3, r3
 8004a3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a3e:	4613      	mov	r3, r2
 8004a40:	eb42 0303 	adc.w	r3, r2, r3
 8004a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a4e:	f7fb fc17 	bl	8000280 <__aeabi_uldivmod>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	4b3b      	ldr	r3, [pc, #236]	@ (8004b48 <UART_SetConfig+0x2d4>)
 8004a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	2264      	movs	r2, #100	@ 0x64
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
 8004a66:	1acb      	subs	r3, r1, r3
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a6e:	4b36      	ldr	r3, [pc, #216]	@ (8004b48 <UART_SetConfig+0x2d4>)
 8004a70:	fba3 2302 	umull	r2, r3, r3, r2
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a7c:	441c      	add	r4, r3
 8004a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a90:	4642      	mov	r2, r8
 8004a92:	464b      	mov	r3, r9
 8004a94:	1891      	adds	r1, r2, r2
 8004a96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a98:	415b      	adcs	r3, r3
 8004a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004aa0:	4641      	mov	r1, r8
 8004aa2:	1851      	adds	r1, r2, r1
 8004aa4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	414b      	adcs	r3, r1
 8004aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ab8:	4659      	mov	r1, fp
 8004aba:	00cb      	lsls	r3, r1, #3
 8004abc:	4651      	mov	r1, sl
 8004abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	00ca      	lsls	r2, r1, #3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4603      	mov	r3, r0
 8004acc:	4642      	mov	r2, r8
 8004ace:	189b      	adds	r3, r3, r2
 8004ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	460a      	mov	r2, r1
 8004ad8:	eb42 0303 	adc.w	r3, r2, r3
 8004adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004aec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004af4:	460b      	mov	r3, r1
 8004af6:	18db      	adds	r3, r3, r3
 8004af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004afa:	4613      	mov	r3, r2
 8004afc:	eb42 0303 	adc.w	r3, r2, r3
 8004b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b0a:	f7fb fbb9 	bl	8000280 <__aeabi_uldivmod>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4b0d      	ldr	r3, [pc, #52]	@ (8004b48 <UART_SetConfig+0x2d4>)
 8004b14:	fba3 1302 	umull	r1, r3, r3, r2
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	2164      	movs	r1, #100	@ 0x64
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	3332      	adds	r3, #50	@ 0x32
 8004b26:	4a08      	ldr	r2, [pc, #32]	@ (8004b48 <UART_SetConfig+0x2d4>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	f003 0207 	and.w	r2, r3, #7
 8004b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4422      	add	r2, r4
 8004b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b3c:	e106      	b.n	8004d4c <UART_SetConfig+0x4d8>
 8004b3e:	bf00      	nop
 8004b40:	40011000 	.word	0x40011000
 8004b44:	40011400 	.word	0x40011400
 8004b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b5e:	4642      	mov	r2, r8
 8004b60:	464b      	mov	r3, r9
 8004b62:	1891      	adds	r1, r2, r2
 8004b64:	6239      	str	r1, [r7, #32]
 8004b66:	415b      	adcs	r3, r3
 8004b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b6e:	4641      	mov	r1, r8
 8004b70:	1854      	adds	r4, r2, r1
 8004b72:	4649      	mov	r1, r9
 8004b74:	eb43 0501 	adc.w	r5, r3, r1
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	00eb      	lsls	r3, r5, #3
 8004b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b86:	00e2      	lsls	r2, r4, #3
 8004b88:	4614      	mov	r4, r2
 8004b8a:	461d      	mov	r5, r3
 8004b8c:	4643      	mov	r3, r8
 8004b8e:	18e3      	adds	r3, r4, r3
 8004b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b94:	464b      	mov	r3, r9
 8004b96:	eb45 0303 	adc.w	r3, r5, r3
 8004b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004baa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bba:	4629      	mov	r1, r5
 8004bbc:	008b      	lsls	r3, r1, #2
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	008a      	lsls	r2, r1, #2
 8004bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004bcc:	f7fb fb58 	bl	8000280 <__aeabi_uldivmod>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4b60      	ldr	r3, [pc, #384]	@ (8004d58 <UART_SetConfig+0x4e4>)
 8004bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	011c      	lsls	r4, r3, #4
 8004bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004be8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	1891      	adds	r1, r2, r2
 8004bf6:	61b9      	str	r1, [r7, #24]
 8004bf8:	415b      	adcs	r3, r3
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c00:	4641      	mov	r1, r8
 8004c02:	1851      	adds	r1, r2, r1
 8004c04:	6139      	str	r1, [r7, #16]
 8004c06:	4649      	mov	r1, r9
 8004c08:	414b      	adcs	r3, r1
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c18:	4659      	mov	r1, fp
 8004c1a:	00cb      	lsls	r3, r1, #3
 8004c1c:	4651      	mov	r1, sl
 8004c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c22:	4651      	mov	r1, sl
 8004c24:	00ca      	lsls	r2, r1, #3
 8004c26:	4610      	mov	r0, r2
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4642      	mov	r2, r8
 8004c2e:	189b      	adds	r3, r3, r2
 8004c30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c34:	464b      	mov	r3, r9
 8004c36:	460a      	mov	r2, r1
 8004c38:	eb42 0303 	adc.w	r3, r2, r3
 8004c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c58:	4649      	mov	r1, r9
 8004c5a:	008b      	lsls	r3, r1, #2
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c62:	4641      	mov	r1, r8
 8004c64:	008a      	lsls	r2, r1, #2
 8004c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c6a:	f7fb fb09 	bl	8000280 <__aeabi_uldivmod>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	4b38      	ldr	r3, [pc, #224]	@ (8004d58 <UART_SetConfig+0x4e4>)
 8004c76:	fba3 2301 	umull	r2, r3, r3, r1
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	2264      	movs	r2, #100	@ 0x64
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	1acb      	subs	r3, r1, r3
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	3332      	adds	r3, #50	@ 0x32
 8004c88:	4a33      	ldr	r2, [pc, #204]	@ (8004d58 <UART_SetConfig+0x4e4>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c94:	441c      	add	r4, r3
 8004c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	464b      	mov	r3, r9
 8004ca8:	1891      	adds	r1, r2, r2
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	415b      	adcs	r3, r3
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	1851      	adds	r1, r2, r1
 8004cb8:	6039      	str	r1, [r7, #0]
 8004cba:	4649      	mov	r1, r9
 8004cbc:	414b      	adcs	r3, r1
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ccc:	4659      	mov	r1, fp
 8004cce:	00cb      	lsls	r3, r1, #3
 8004cd0:	4651      	mov	r1, sl
 8004cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd6:	4651      	mov	r1, sl
 8004cd8:	00ca      	lsls	r2, r1, #3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	189b      	adds	r3, r3, r2
 8004ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	460a      	mov	r2, r1
 8004cea:	eb42 0303 	adc.w	r3, r2, r3
 8004cee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d08:	4649      	mov	r1, r9
 8004d0a:	008b      	lsls	r3, r1, #2
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d12:	4641      	mov	r1, r8
 8004d14:	008a      	lsls	r2, r1, #2
 8004d16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d1a:	f7fb fab1 	bl	8000280 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4b0d      	ldr	r3, [pc, #52]	@ (8004d58 <UART_SetConfig+0x4e4>)
 8004d24:	fba3 1302 	umull	r1, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	2164      	movs	r1, #100	@ 0x64
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	3332      	adds	r3, #50	@ 0x32
 8004d36:	4a08      	ldr	r2, [pc, #32]	@ (8004d58 <UART_SetConfig+0x4e4>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	f003 020f 	and.w	r2, r3, #15
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4422      	add	r2, r4
 8004d4a:	609a      	str	r2, [r3, #8]
}
 8004d4c:	bf00      	nop
 8004d4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d52:	46bd      	mov	sp, r7
 8004d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d58:	51eb851f 	.word	0x51eb851f

08004d5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	f107 001c 	add.w	r0, r7, #28
 8004d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d6e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d123      	bne.n	8004dbe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d105      	bne.n	8004db2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f001 fae2 	bl	800637c <USB_CoreReset>
 8004db8:	4603      	mov	r3, r0
 8004dba:	73fb      	strb	r3, [r7, #15]
 8004dbc:	e01b      	b.n	8004df6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 fad6 	bl	800637c <USB_CoreReset>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004dd4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	639a      	str	r2, [r3, #56]	@ 0x38
 8004de8:	e005      	b.n	8004df6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004df6:	7fbb      	ldrb	r3, [r7, #30]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d10b      	bne.n	8004e14 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f043 0206 	orr.w	r2, r3, #6
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f043 0220 	orr.w	r2, r3, #32
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e20:	b004      	add	sp, #16
 8004e22:	4770      	bx	lr

08004e24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d165      	bne.n	8004f04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4a41      	ldr	r2, [pc, #260]	@ (8004f40 <USB_SetTurnaroundTime+0x11c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d906      	bls.n	8004e4e <USB_SetTurnaroundTime+0x2a>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4a40      	ldr	r2, [pc, #256]	@ (8004f44 <USB_SetTurnaroundTime+0x120>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d202      	bcs.n	8004e4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e48:	230f      	movs	r3, #15
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	e062      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4a3c      	ldr	r2, [pc, #240]	@ (8004f44 <USB_SetTurnaroundTime+0x120>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d306      	bcc.n	8004e64 <USB_SetTurnaroundTime+0x40>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4a3b      	ldr	r2, [pc, #236]	@ (8004f48 <USB_SetTurnaroundTime+0x124>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d202      	bcs.n	8004e64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e5e:	230e      	movs	r3, #14
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e057      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4a38      	ldr	r2, [pc, #224]	@ (8004f48 <USB_SetTurnaroundTime+0x124>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d306      	bcc.n	8004e7a <USB_SetTurnaroundTime+0x56>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4a37      	ldr	r2, [pc, #220]	@ (8004f4c <USB_SetTurnaroundTime+0x128>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d202      	bcs.n	8004e7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e74:	230d      	movs	r3, #13
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	e04c      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4a33      	ldr	r2, [pc, #204]	@ (8004f4c <USB_SetTurnaroundTime+0x128>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d306      	bcc.n	8004e90 <USB_SetTurnaroundTime+0x6c>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4a32      	ldr	r2, [pc, #200]	@ (8004f50 <USB_SetTurnaroundTime+0x12c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d802      	bhi.n	8004e90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e8a:	230c      	movs	r3, #12
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e041      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4a2f      	ldr	r2, [pc, #188]	@ (8004f50 <USB_SetTurnaroundTime+0x12c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d906      	bls.n	8004ea6 <USB_SetTurnaroundTime+0x82>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8004f54 <USB_SetTurnaroundTime+0x130>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d802      	bhi.n	8004ea6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ea0:	230b      	movs	r3, #11
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	e036      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f54 <USB_SetTurnaroundTime+0x130>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d906      	bls.n	8004ebc <USB_SetTurnaroundTime+0x98>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4a29      	ldr	r2, [pc, #164]	@ (8004f58 <USB_SetTurnaroundTime+0x134>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d802      	bhi.n	8004ebc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004eb6:	230a      	movs	r3, #10
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e02b      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4a26      	ldr	r2, [pc, #152]	@ (8004f58 <USB_SetTurnaroundTime+0x134>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d906      	bls.n	8004ed2 <USB_SetTurnaroundTime+0xae>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4a25      	ldr	r2, [pc, #148]	@ (8004f5c <USB_SetTurnaroundTime+0x138>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d202      	bcs.n	8004ed2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ecc:	2309      	movs	r3, #9
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e020      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4a21      	ldr	r2, [pc, #132]	@ (8004f5c <USB_SetTurnaroundTime+0x138>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d306      	bcc.n	8004ee8 <USB_SetTurnaroundTime+0xc4>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4a20      	ldr	r2, [pc, #128]	@ (8004f60 <USB_SetTurnaroundTime+0x13c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d802      	bhi.n	8004ee8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	e015      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4a1d      	ldr	r2, [pc, #116]	@ (8004f60 <USB_SetTurnaroundTime+0x13c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d906      	bls.n	8004efe <USB_SetTurnaroundTime+0xda>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f64 <USB_SetTurnaroundTime+0x140>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d202      	bcs.n	8004efe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ef8:	2307      	movs	r3, #7
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e00a      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004efe:	2306      	movs	r3, #6
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e007      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f0a:	2309      	movs	r3, #9
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	e001      	b.n	8004f14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f10:	2309      	movs	r3, #9
 8004f12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	029b      	lsls	r3, r3, #10
 8004f28:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	00d8acbf 	.word	0x00d8acbf
 8004f44:	00e4e1c0 	.word	0x00e4e1c0
 8004f48:	00f42400 	.word	0x00f42400
 8004f4c:	01067380 	.word	0x01067380
 8004f50:	011a499f 	.word	0x011a499f
 8004f54:	01312cff 	.word	0x01312cff
 8004f58:	014ca43f 	.word	0x014ca43f
 8004f5c:	016e3600 	.word	0x016e3600
 8004f60:	01a6ab1f 	.word	0x01a6ab1f
 8004f64:	01e84800 	.word	0x01e84800

08004f68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f043 0201 	orr.w	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f023 0201 	bic.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d115      	bne.n	8004ffa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fda:	200a      	movs	r0, #10
 8004fdc:	f7fb ffa4 	bl	8000f28 <HAL_Delay>
      ms += 10U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	330a      	adds	r3, #10
 8004fe4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f001 f939 	bl	800625e <USB_GetMode>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d01e      	beq.n	8005030 <USB_SetCurrentMode+0x84>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ff6:	d9f0      	bls.n	8004fda <USB_SetCurrentMode+0x2e>
 8004ff8:	e01a      	b.n	8005030 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d115      	bne.n	800502c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800500c:	200a      	movs	r0, #10
 800500e:	f7fb ff8b 	bl	8000f28 <HAL_Delay>
      ms += 10U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	330a      	adds	r3, #10
 8005016:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f001 f920 	bl	800625e <USB_GetMode>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <USB_SetCurrentMode+0x84>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2bc7      	cmp	r3, #199	@ 0xc7
 8005028:	d9f0      	bls.n	800500c <USB_SetCurrentMode+0x60>
 800502a:	e001      	b.n	8005030 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e005      	b.n	800503c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2bc8      	cmp	r3, #200	@ 0xc8
 8005034:	d101      	bne.n	800503a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005044:	b084      	sub	sp, #16
 8005046:	b580      	push	{r7, lr}
 8005048:	b086      	sub	sp, #24
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800505e:	2300      	movs	r3, #0
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	e009      	b.n	8005078 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3340      	adds	r3, #64	@ 0x40
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	2200      	movs	r2, #0
 8005070:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	3301      	adds	r3, #1
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b0e      	cmp	r3, #14
 800507c:	d9f2      	bls.n	8005064 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800507e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005082:	2b00      	cmp	r3, #0
 8005084:	d11c      	bne.n	80050c0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005094:	f043 0302 	orr.w	r3, r3, #2
 8005098:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050aa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80050be:	e00b      	b.n	80050d8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050de:	461a      	mov	r2, r3
 80050e0:	2300      	movs	r3, #0
 80050e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d10d      	bne.n	8005108 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050f4:	2100      	movs	r1, #0
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f968 	bl	80053cc <USB_SetDevSpeed>
 80050fc:	e008      	b.n	8005110 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050fe:	2101      	movs	r1, #1
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f963 	bl	80053cc <USB_SetDevSpeed>
 8005106:	e003      	b.n	8005110 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005108:	2103      	movs	r1, #3
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f95e 	bl	80053cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005110:	2110      	movs	r1, #16
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f8fa 	bl	800530c <USB_FlushTxFifo>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f924 	bl	8005370 <USB_FlushRxFifo>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005138:	461a      	mov	r2, r3
 800513a:	2300      	movs	r3, #0
 800513c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005144:	461a      	mov	r2, r3
 8005146:	2300      	movs	r3, #0
 8005148:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005150:	461a      	mov	r2, r3
 8005152:	2300      	movs	r3, #0
 8005154:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005156:	2300      	movs	r3, #0
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	e043      	b.n	80051e4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800516e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005172:	d118      	bne.n	80051a6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005186:	461a      	mov	r2, r3
 8005188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	e013      	b.n	80051b8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800519c:	461a      	mov	r2, r3
 800519e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	e008      	b.n	80051b8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b2:	461a      	mov	r2, r3
 80051b4:	2300      	movs	r3, #0
 80051b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c4:	461a      	mov	r2, r3
 80051c6:	2300      	movs	r3, #0
 80051c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d6:	461a      	mov	r2, r3
 80051d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	3301      	adds	r3, #1
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051e8:	461a      	mov	r2, r3
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d3b5      	bcc.n	800515c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f0:	2300      	movs	r3, #0
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	e043      	b.n	800527e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005208:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800520c:	d118      	bne.n	8005240 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005220:	461a      	mov	r2, r3
 8005222:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e013      	b.n	8005252 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005236:	461a      	mov	r2, r3
 8005238:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e008      	b.n	8005252 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524c:	461a      	mov	r2, r3
 800524e:	2300      	movs	r3, #0
 8005250:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525e:	461a      	mov	r2, r3
 8005260:	2300      	movs	r3, #0
 8005262:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005270:	461a      	mov	r2, r3
 8005272:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005276:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	3301      	adds	r3, #1
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005282:	461a      	mov	r2, r3
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4293      	cmp	r3, r2
 8005288:	d3b5      	bcc.n	80051f6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800529c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80052aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d105      	bne.n	80052c0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f043 0210 	orr.w	r2, r3, #16
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	4b10      	ldr	r3, [pc, #64]	@ (8005308 <USB_DevInit+0x2c4>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f043 0208 	orr.w	r2, r3, #8
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d107      	bne.n	80052f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052f0:	f043 0304 	orr.w	r3, r3, #4
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005304:	b004      	add	sp, #16
 8005306:	4770      	bx	lr
 8005308:	803c3800 	.word	0x803c3800

0800530c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005326:	d901      	bls.n	800532c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e01b      	b.n	8005364 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	daf2      	bge.n	800531a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	019b      	lsls	r3, r3, #6
 800533c:	f043 0220 	orr.w	r2, r3, #32
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3301      	adds	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005350:	d901      	bls.n	8005356 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e006      	b.n	8005364 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b20      	cmp	r3, #32
 8005360:	d0f0      	beq.n	8005344 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3301      	adds	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005388:	d901      	bls.n	800538e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e018      	b.n	80053c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	daf2      	bge.n	800537c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2210      	movs	r2, #16
 800539e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053ac:	d901      	bls.n	80053b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e006      	b.n	80053c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d0f0      	beq.n	80053a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	68f9      	ldr	r1, [r7, #12]
 80053e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053ec:	4313      	orrs	r3, r2
 80053ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80053fe:	b480      	push	{r7}
 8005400:	b087      	sub	sp, #28
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0306 	and.w	r3, r3, #6
 8005416:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d102      	bne.n	8005424 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]
 8005422:	e00a      	b.n	800543a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d002      	beq.n	8005430 <USB_GetDevSpeed+0x32>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b06      	cmp	r3, #6
 800542e:	d102      	bne.n	8005436 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005430:	2302      	movs	r3, #2
 8005432:	75fb      	strb	r3, [r7, #23]
 8005434:	e001      	b.n	800543a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005436:	230f      	movs	r3, #15
 8005438:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800543a:	7dfb      	ldrb	r3, [r7, #23]
}
 800543c:	4618      	mov	r0, r3
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d13a      	bne.n	80054da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	2101      	movs	r1, #1
 8005476:	fa01 f303 	lsl.w	r3, r1, r3
 800547a:	b29b      	uxth	r3, r3
 800547c:	68f9      	ldr	r1, [r7, #12]
 800547e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005482:	4313      	orrs	r3, r2
 8005484:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d155      	bne.n	8005548 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	791b      	ldrb	r3, [r3, #4]
 80054b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	059b      	lsls	r3, r3, #22
 80054be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c0:	4313      	orrs	r3, r2
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	e036      	b.n	8005548 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e0:	69da      	ldr	r2, [r3, #28]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	2101      	movs	r1, #1
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	041b      	lsls	r3, r3, #16
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d11a      	bne.n	8005548 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	791b      	ldrb	r3, [r3, #4]
 800552c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800552e:	430b      	orrs	r3, r1
 8005530:	4313      	orrs	r3, r2
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800553e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005546:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d161      	bne.n	8005638 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800558a:	d11f      	bne.n	80055cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	2101      	movs	r1, #1
 80055de:	fa01 f303 	lsl.w	r3, r1, r3
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055ec:	4013      	ands	r3, r2
 80055ee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f303 	lsl.w	r3, r1, r3
 8005606:	b29b      	uxth	r3, r3
 8005608:	43db      	mvns	r3, r3
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005610:	4013      	ands	r3, r2
 8005612:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	0159      	lsls	r1, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	440b      	add	r3, r1
 800562a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800562e:	4619      	mov	r1, r3
 8005630:	4b35      	ldr	r3, [pc, #212]	@ (8005708 <USB_DeactivateEndpoint+0x1b0>)
 8005632:	4013      	ands	r3, r2
 8005634:	600b      	str	r3, [r1, #0]
 8005636:	e060      	b.n	80056fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800564a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800564e:	d11f      	bne.n	8005690 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800566a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800566e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800568a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800568e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	2101      	movs	r1, #1
 80056a2:	fa01 f303 	lsl.w	r3, r1, r3
 80056a6:	041b      	lsls	r3, r3, #16
 80056a8:	43db      	mvns	r3, r3
 80056aa:	68f9      	ldr	r1, [r7, #12]
 80056ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056b0:	4013      	ands	r3, r2
 80056b2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	2101      	movs	r1, #1
 80056c6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ca:	041b      	lsls	r3, r3, #16
 80056cc:	43db      	mvns	r3, r3
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056d4:	4013      	ands	r3, r2
 80056d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	0159      	lsls	r1, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	440b      	add	r3, r1
 80056ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f2:	4619      	mov	r1, r3
 80056f4:	4b05      	ldr	r3, [pc, #20]	@ (800570c <USB_DeactivateEndpoint+0x1b4>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	ec337800 	.word	0xec337800
 800570c:	eff37800 	.word	0xeff37800

08005710 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	@ 0x28
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	4613      	mov	r3, r2
 800571c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	2b01      	cmp	r3, #1
 800572e:	f040 817a 	bne.w	8005a26 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d132      	bne.n	80057a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005754:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005758:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800575c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	440a      	add	r2, r1
 8005774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005778:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800577c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	440a      	add	r2, r1
 8005794:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005798:	0cdb      	lsrs	r3, r3, #19
 800579a:	04db      	lsls	r3, r3, #19
 800579c:	6113      	str	r3, [r2, #16]
 800579e:	e092      	b.n	80058c6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ba:	0cdb      	lsrs	r3, r3, #19
 80057bc:	04db      	lsls	r3, r3, #19
 80057be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057da:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80057de:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80057e2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d11a      	bne.n	8005820 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d903      	bls.n	80057fe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005818:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800581c:	6113      	str	r3, [r2, #16]
 800581e:	e01b      	b.n	8005858 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800582c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	6919      	ldr	r1, [r3, #16]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	440b      	add	r3, r1
 8005838:	1e59      	subs	r1, r3, #1
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005842:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005844:	4ba2      	ldr	r3, [pc, #648]	@ (8005ad0 <USB_EPStartXfer+0x3c0>)
 8005846:	400b      	ands	r3, r1
 8005848:	69b9      	ldr	r1, [r7, #24]
 800584a:	0148      	lsls	r0, r1, #5
 800584c:	69f9      	ldr	r1, [r7, #28]
 800584e:	4401      	add	r1, r0
 8005850:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005854:	4313      	orrs	r3, r2
 8005856:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800586e:	69b9      	ldr	r1, [r7, #24]
 8005870:	0148      	lsls	r0, r1, #5
 8005872:	69f9      	ldr	r1, [r7, #28]
 8005874:	4401      	add	r1, r0
 8005876:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800587a:	4313      	orrs	r3, r2
 800587c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	791b      	ldrb	r3, [r3, #4]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d11f      	bne.n	80058c6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058a0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80058a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d14b      	bne.n	8005964 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e0:	461a      	mov	r2, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	791b      	ldrb	r3, [r3, #4]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d128      	bne.n	8005942 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d110      	bne.n	8005922 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800591a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	e00f      	b.n	8005942 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	0151      	lsls	r1, r2, #5
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	440a      	add	r2, r1
 8005938:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800593c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005940:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	0151      	lsls	r1, r2, #5
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	440a      	add	r2, r1
 8005958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800595c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	e165      	b.n	8005c30 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	0151      	lsls	r1, r2, #5
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	440a      	add	r2, r1
 800597a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800597e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005982:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	791b      	ldrb	r3, [r3, #4]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d015      	beq.n	80059b8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 814d 	beq.w	8005c30 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	2101      	movs	r1, #1
 80059a8:	fa01 f303 	lsl.w	r3, r1, r3
 80059ac:	69f9      	ldr	r1, [r7, #28]
 80059ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059b2:	4313      	orrs	r3, r2
 80059b4:	634b      	str	r3, [r1, #52]	@ 0x34
 80059b6:	e13b      	b.n	8005c30 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d110      	bne.n	80059ea <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	e00f      	b.n	8005a0a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	68d9      	ldr	r1, [r3, #12]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	b298      	uxth	r0, r3
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f9b8 	bl	8005d94 <USB_WritePacket>
 8005a24:	e104      	b.n	8005c30 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a40:	0cdb      	lsrs	r3, r3, #19
 8005a42:	04db      	lsls	r3, r3, #19
 8005a44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a60:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a64:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a68:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d131      	bne.n	8005ad4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a9e:	69b9      	ldr	r1, [r7, #24]
 8005aa0:	0148      	lsls	r0, r1, #5
 8005aa2:	69f9      	ldr	r1, [r7, #28]
 8005aa4:	4401      	add	r1, r0
 8005aa6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ac8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005acc:	6113      	str	r3, [r2, #16]
 8005ace:	e061      	b.n	8005b94 <USB_EPStartXfer+0x484>
 8005ad0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d123      	bne.n	8005b24 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae8:	691a      	ldr	r2, [r3, #16]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005af2:	69b9      	ldr	r1, [r7, #24]
 8005af4:	0148      	lsls	r0, r1, #5
 8005af6:	69f9      	ldr	r1, [r7, #28]
 8005af8:	4401      	add	r1, r0
 8005afa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005afe:	4313      	orrs	r3, r2
 8005b00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	0151      	lsls	r1, r2, #5
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	440a      	add	r2, r1
 8005b18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b20:	6113      	str	r3, [r2, #16]
 8005b22:	e037      	b.n	8005b94 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	1e5a      	subs	r2, r3, #1
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b38:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	8afa      	ldrh	r2, [r7, #22]
 8005b40:	fb03 f202 	mul.w	r2, r3, r2
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	8afb      	ldrh	r3, [r7, #22]
 8005b58:	04d9      	lsls	r1, r3, #19
 8005b5a:	4b38      	ldr	r3, [pc, #224]	@ (8005c3c <USB_EPStartXfer+0x52c>)
 8005b5c:	400b      	ands	r3, r1
 8005b5e:	69b9      	ldr	r1, [r7, #24]
 8005b60:	0148      	lsls	r0, r1, #5
 8005b62:	69f9      	ldr	r1, [r7, #28]
 8005b64:	4401      	add	r1, r0
 8005b66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b84:	69b9      	ldr	r1, [r7, #24]
 8005b86:	0148      	lsls	r0, r1, #5
 8005b88:	69f9      	ldr	r1, [r7, #28]
 8005b8a:	4401      	add	r1, r0
 8005b8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b90:	4313      	orrs	r3, r2
 8005b92:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d10d      	bne.n	8005bb6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d009      	beq.n	8005bb6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	68d9      	ldr	r1, [r3, #12]
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb2:	460a      	mov	r2, r1
 8005bb4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	791b      	ldrb	r3, [r3, #4]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d128      	bne.n	8005c10 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d110      	bne.n	8005bf0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005be8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	e00f      	b.n	8005c10 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	1ff80000 	.word	0x1ff80000

08005c40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d14a      	bne.n	8005cf4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c76:	f040 8086 	bne.w	8005d86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	7812      	ldrb	r2, [r2, #0]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d902      	bls.n	8005cd8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	75fb      	strb	r3, [r7, #23]
          break;
 8005cd6:	e056      	b.n	8005d86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cf0:	d0e7      	beq.n	8005cc2 <USB_EPStopXfer+0x82>
 8005cf2:	e048      	b.n	8005d86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d0c:	d13b      	bne.n	8005d86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	7812      	ldrb	r2, [r2, #0]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	7812      	ldrb	r2, [r2, #0]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d902      	bls.n	8005d6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]
          break;
 8005d6a:	e00c      	b.n	8005d86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d84:	d0e7      	beq.n	8005d56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b089      	sub	sp, #36	@ 0x24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4611      	mov	r1, r2
 8005da0:	461a      	mov	r2, r3
 8005da2:	460b      	mov	r3, r1
 8005da4:	71fb      	strb	r3, [r7, #7]
 8005da6:	4613      	mov	r3, r2
 8005da8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005db2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d123      	bne.n	8005e02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005dba:	88bb      	ldrh	r3, [r7, #4]
 8005dbc:	3303      	adds	r3, #3
 8005dbe:	089b      	lsrs	r3, r3, #2
 8005dc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	e018      	b.n	8005dfa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005dc8:	79fb      	ldrb	r3, [r7, #7]
 8005dca:	031a      	lsls	r2, r3, #12
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	3301      	adds	r3, #1
 8005de0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	3301      	adds	r3, #1
 8005de6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	3301      	adds	r3, #1
 8005dec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	3301      	adds	r3, #1
 8005df2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	3301      	adds	r3, #1
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d3e2      	bcc.n	8005dc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3724      	adds	r7, #36	@ 0x24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b08b      	sub	sp, #44	@ 0x2c
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e26:	88fb      	ldrh	r3, [r7, #6]
 8005e28:	089b      	lsrs	r3, r3, #2
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e36:	2300      	movs	r3, #0
 8005e38:	623b      	str	r3, [r7, #32]
 8005e3a:	e014      	b.n	8005e66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e50:	3301      	adds	r3, #1
 8005e52:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e56:	3301      	adds	r3, #1
 8005e58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	3301      	adds	r3, #1
 8005e64:	623b      	str	r3, [r7, #32]
 8005e66:	6a3a      	ldr	r2, [r7, #32]
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d3e6      	bcc.n	8005e3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e6e:	8bfb      	ldrh	r3, [r7, #30]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01e      	beq.n	8005eb2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f107 0310 	add.w	r3, r7, #16
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	fa22 f303 	lsr.w	r3, r2, r3
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	701a      	strb	r2, [r3, #0]
      i++;
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005ea6:	8bfb      	ldrh	r3, [r7, #30]
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005eac:	8bfb      	ldrh	r3, [r7, #30]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1ea      	bne.n	8005e88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	372c      	adds	r7, #44	@ 0x2c
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d12c      	bne.n	8005f36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	db12      	blt.n	8005f14 <USB_EPSetStall+0x54>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00f      	beq.n	8005f14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	e02b      	b.n	8005f8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	db12      	blt.n	8005f6e <USB_EPSetStall+0xae>
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00f      	beq.n	8005f6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d128      	bne.n	800600a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fd6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	791b      	ldrb	r3, [r3, #4]
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d003      	beq.n	8005fe8 <USB_EPClearStall+0x4c>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	791b      	ldrb	r3, [r3, #4]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d138      	bne.n	800605a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	e027      	b.n	800605a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	440a      	add	r2, r1
 8006020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006024:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006028:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	791b      	ldrb	r3, [r3, #4]
 800602e:	2b03      	cmp	r3, #3
 8006030:	d003      	beq.n	800603a <USB_EPClearStall+0x9e>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	791b      	ldrb	r3, [r3, #4]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d10f      	bne.n	800605a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006058:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006086:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800608a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800609c:	68f9      	ldr	r1, [r7, #12]
 800609e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060a2:	4313      	orrs	r3, r2
 80060a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80060ce:	f023 0303 	bic.w	r3, r3, #3
 80060d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060e2:	f023 0302 	bic.w	r3, r3, #2
 80060e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006110:	f023 0303 	bic.w	r3, r3, #3
 8006114:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006124:	f043 0302 	orr.w	r3, r3, #2
 8006128:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4013      	ands	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006150:	68fb      	ldr	r3, [r7, #12]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	4013      	ands	r3, r2
 8006180:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	0c1b      	lsrs	r3, r3, #16
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	4013      	ands	r3, r2
 80061b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	b29b      	uxth	r3, r3
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	4013      	ands	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061f4:	68bb      	ldr	r3, [r7, #8]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006202:	b480      	push	{r7}
 8006204:	b087      	sub	sp, #28
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006224:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	fa22 f303 	lsr.w	r3, r2, r3
 8006232:	01db      	lsls	r3, r3, #7
 8006234:	b2db      	uxtb	r3, r3
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4013      	ands	r3, r2
 800624e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006250:	68bb      	ldr	r3, [r7, #8]
}
 8006252:	4618      	mov	r0, r3
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f003 0301 	and.w	r3, r3, #1
}
 800626e:	4618      	mov	r0, r3
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006294:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006298:	f023 0307 	bic.w	r3, r3, #7
 800629c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	460b      	mov	r3, r1
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	333c      	adds	r3, #60	@ 0x3c
 80062d6:	3304      	adds	r3, #4
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	4a26      	ldr	r2, [pc, #152]	@ (8006378 <USB_EP0_OutStart+0xb8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d90a      	bls.n	80062fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062f4:	d101      	bne.n	80062fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e037      	b.n	800636a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006300:	461a      	mov	r2, r3
 8006302:	2300      	movs	r3, #0
 8006304:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006314:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006318:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006328:	f043 0318 	orr.w	r3, r3, #24
 800632c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800633c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006340:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006342:	7afb      	ldrb	r3, [r7, #11]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d10f      	bne.n	8006368 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634e:	461a      	mov	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006362:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006366:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	4f54300a 	.word	0x4f54300a

0800637c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006394:	d901      	bls.n	800639a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e01b      	b.n	80063d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	daf2      	bge.n	8006388 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f043 0201 	orr.w	r2, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3301      	adds	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063be:	d901      	bls.n	80063c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e006      	b.n	80063d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d0f0      	beq.n	80063b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80063ec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80063f0:	f002 fc92 	bl	8008d18 <USBD_static_malloc>
 80063f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d109      	bne.n	8006410 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	32b0      	adds	r2, #176	@ 0xb0
 8006406:	2100      	movs	r1, #0
 8006408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800640c:	2302      	movs	r3, #2
 800640e:	e0d4      	b.n	80065ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006410:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006414:	2100      	movs	r1, #0
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f002 fcfc 	bl	8008e14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	32b0      	adds	r2, #176	@ 0xb0
 8006426:	68f9      	ldr	r1, [r7, #12]
 8006428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	32b0      	adds	r2, #176	@ 0xb0
 8006436:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	7c1b      	ldrb	r3, [r3, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d138      	bne.n	80064ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006448:	4b5e      	ldr	r3, [pc, #376]	@ (80065c4 <USBD_CDC_Init+0x1e4>)
 800644a:	7819      	ldrb	r1, [r3, #0]
 800644c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006450:	2202      	movs	r2, #2
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f002 fb3d 	bl	8008ad2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006458:	4b5a      	ldr	r3, [pc, #360]	@ (80065c4 <USBD_CDC_Init+0x1e4>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	f003 020f 	and.w	r2, r3, #15
 8006460:	6879      	ldr	r1, [r7, #4]
 8006462:	4613      	mov	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	440b      	add	r3, r1
 800646c:	3324      	adds	r3, #36	@ 0x24
 800646e:	2201      	movs	r2, #1
 8006470:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006472:	4b55      	ldr	r3, [pc, #340]	@ (80065c8 <USBD_CDC_Init+0x1e8>)
 8006474:	7819      	ldrb	r1, [r3, #0]
 8006476:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800647a:	2202      	movs	r2, #2
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f002 fb28 	bl	8008ad2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006482:	4b51      	ldr	r3, [pc, #324]	@ (80065c8 <USBD_CDC_Init+0x1e8>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	f003 020f 	and.w	r2, r3, #15
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800649a:	2201      	movs	r2, #1
 800649c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800649e:	4b4b      	ldr	r3, [pc, #300]	@ (80065cc <USBD_CDC_Init+0x1ec>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	f003 020f 	and.w	r2, r3, #15
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	440b      	add	r3, r1
 80064b2:	3326      	adds	r3, #38	@ 0x26
 80064b4:	2210      	movs	r2, #16
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	e035      	b.n	8006526 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064ba:	4b42      	ldr	r3, [pc, #264]	@ (80065c4 <USBD_CDC_Init+0x1e4>)
 80064bc:	7819      	ldrb	r1, [r3, #0]
 80064be:	2340      	movs	r3, #64	@ 0x40
 80064c0:	2202      	movs	r2, #2
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f002 fb05 	bl	8008ad2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064c8:	4b3e      	ldr	r3, [pc, #248]	@ (80065c4 <USBD_CDC_Init+0x1e4>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	f003 020f 	and.w	r2, r3, #15
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	3324      	adds	r3, #36	@ 0x24
 80064de:	2201      	movs	r2, #1
 80064e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80064e2:	4b39      	ldr	r3, [pc, #228]	@ (80065c8 <USBD_CDC_Init+0x1e8>)
 80064e4:	7819      	ldrb	r1, [r3, #0]
 80064e6:	2340      	movs	r3, #64	@ 0x40
 80064e8:	2202      	movs	r2, #2
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f002 faf1 	bl	8008ad2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064f0:	4b35      	ldr	r3, [pc, #212]	@ (80065c8 <USBD_CDC_Init+0x1e8>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	f003 020f 	and.w	r2, r3, #15
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006508:	2201      	movs	r2, #1
 800650a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800650c:	4b2f      	ldr	r3, [pc, #188]	@ (80065cc <USBD_CDC_Init+0x1ec>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	f003 020f 	and.w	r2, r3, #15
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	440b      	add	r3, r1
 8006520:	3326      	adds	r3, #38	@ 0x26
 8006522:	2210      	movs	r2, #16
 8006524:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006526:	4b29      	ldr	r3, [pc, #164]	@ (80065cc <USBD_CDC_Init+0x1ec>)
 8006528:	7819      	ldrb	r1, [r3, #0]
 800652a:	2308      	movs	r3, #8
 800652c:	2203      	movs	r2, #3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f002 facf 	bl	8008ad2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006534:	4b25      	ldr	r3, [pc, #148]	@ (80065cc <USBD_CDC_Init+0x1ec>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f003 020f 	and.w	r2, r3, #15
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	3324      	adds	r3, #36	@ 0x24
 800654a:	2201      	movs	r2, #1
 800654c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	33b0      	adds	r3, #176	@ 0xb0
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006584:	2302      	movs	r3, #2
 8006586:	e018      	b.n	80065ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	7c1b      	ldrb	r3, [r3, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006590:	4b0d      	ldr	r3, [pc, #52]	@ (80065c8 <USBD_CDC_Init+0x1e8>)
 8006592:	7819      	ldrb	r1, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800659a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f002 fb86 	bl	8008cb0 <USBD_LL_PrepareReceive>
 80065a4:	e008      	b.n	80065b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065a6:	4b08      	ldr	r3, [pc, #32]	@ (80065c8 <USBD_CDC_Init+0x1e8>)
 80065a8:	7819      	ldrb	r1, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80065b0:	2340      	movs	r3, #64	@ 0x40
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f002 fb7c 	bl	8008cb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000093 	.word	0x20000093
 80065c8:	20000094 	.word	0x20000094
 80065cc:	20000095 	.word	0x20000095

080065d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80065dc:	4b3a      	ldr	r3, [pc, #232]	@ (80066c8 <USBD_CDC_DeInit+0xf8>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f002 fa9b 	bl	8008b1e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80065e8:	4b37      	ldr	r3, [pc, #220]	@ (80066c8 <USBD_CDC_DeInit+0xf8>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 020f 	and.w	r2, r3, #15
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	3324      	adds	r3, #36	@ 0x24
 80065fe:	2200      	movs	r2, #0
 8006600:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006602:	4b32      	ldr	r3, [pc, #200]	@ (80066cc <USBD_CDC_DeInit+0xfc>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f002 fa88 	bl	8008b1e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800660e:	4b2f      	ldr	r3, [pc, #188]	@ (80066cc <USBD_CDC_DeInit+0xfc>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	f003 020f 	and.w	r2, r3, #15
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006626:	2200      	movs	r2, #0
 8006628:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800662a:	4b29      	ldr	r3, [pc, #164]	@ (80066d0 <USBD_CDC_DeInit+0x100>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f002 fa74 	bl	8008b1e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006636:	4b26      	ldr	r3, [pc, #152]	@ (80066d0 <USBD_CDC_DeInit+0x100>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	f003 020f 	and.w	r2, r3, #15
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	440b      	add	r3, r1
 800664a:	3324      	adds	r3, #36	@ 0x24
 800664c:	2200      	movs	r2, #0
 800664e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006650:	4b1f      	ldr	r3, [pc, #124]	@ (80066d0 <USBD_CDC_DeInit+0x100>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f003 020f 	and.w	r2, r3, #15
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	440b      	add	r3, r1
 8006664:	3326      	adds	r3, #38	@ 0x26
 8006666:	2200      	movs	r2, #0
 8006668:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	32b0      	adds	r2, #176	@ 0xb0
 8006674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01f      	beq.n	80066bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	33b0      	adds	r3, #176	@ 0xb0
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	32b0      	adds	r2, #176	@ 0xb0
 800669a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669e:	4618      	mov	r0, r3
 80066a0:	f002 fb48 	bl	8008d34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	32b0      	adds	r2, #176	@ 0xb0
 80066ae:	2100      	movs	r1, #0
 80066b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000093 	.word	0x20000093
 80066cc:	20000094 	.word	0x20000094
 80066d0:	20000095 	.word	0x20000095

080066d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	32b0      	adds	r2, #176	@ 0xb0
 80066e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006700:	2303      	movs	r3, #3
 8006702:	e0bf      	b.n	8006884 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800670c:	2b00      	cmp	r3, #0
 800670e:	d050      	beq.n	80067b2 <USBD_CDC_Setup+0xde>
 8006710:	2b20      	cmp	r3, #32
 8006712:	f040 80af 	bne.w	8006874 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	88db      	ldrh	r3, [r3, #6]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d03a      	beq.n	8006794 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b25b      	sxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	da1b      	bge.n	8006760 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	33b0      	adds	r3, #176	@ 0xb0
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800673e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	88d2      	ldrh	r2, [r2, #6]
 8006744:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	88db      	ldrh	r3, [r3, #6]
 800674a:	2b07      	cmp	r3, #7
 800674c:	bf28      	it	cs
 800674e:	2307      	movcs	r3, #7
 8006750:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	89fa      	ldrh	r2, [r7, #14]
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 fd87 	bl	800826c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800675e:	e090      	b.n	8006882 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	785a      	ldrb	r2, [r3, #1]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	88db      	ldrh	r3, [r3, #6]
 800676e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006770:	d803      	bhi.n	800677a <USBD_CDC_Setup+0xa6>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	88db      	ldrh	r3, [r3, #6]
 8006776:	b2da      	uxtb	r2, r3
 8006778:	e000      	b.n	800677c <USBD_CDC_Setup+0xa8>
 800677a:	2240      	movs	r2, #64	@ 0x40
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006782:	6939      	ldr	r1, [r7, #16]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800678a:	461a      	mov	r2, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 fd99 	bl	80082c4 <USBD_CtlPrepareRx>
      break;
 8006792:	e076      	b.n	8006882 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	33b0      	adds	r3, #176	@ 0xb0
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	7850      	ldrb	r0, [r2, #1]
 80067aa:	2200      	movs	r2, #0
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	4798      	blx	r3
      break;
 80067b0:	e067      	b.n	8006882 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	785b      	ldrb	r3, [r3, #1]
 80067b6:	2b0b      	cmp	r3, #11
 80067b8:	d851      	bhi.n	800685e <USBD_CDC_Setup+0x18a>
 80067ba:	a201      	add	r2, pc, #4	@ (adr r2, 80067c0 <USBD_CDC_Setup+0xec>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	080067f1 	.word	0x080067f1
 80067c4:	0800686d 	.word	0x0800686d
 80067c8:	0800685f 	.word	0x0800685f
 80067cc:	0800685f 	.word	0x0800685f
 80067d0:	0800685f 	.word	0x0800685f
 80067d4:	0800685f 	.word	0x0800685f
 80067d8:	0800685f 	.word	0x0800685f
 80067dc:	0800685f 	.word	0x0800685f
 80067e0:	0800685f 	.word	0x0800685f
 80067e4:	0800685f 	.word	0x0800685f
 80067e8:	0800681b 	.word	0x0800681b
 80067ec:	08006845 	.word	0x08006845
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d107      	bne.n	800680c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80067fc:	f107 030a 	add.w	r3, r7, #10
 8006800:	2202      	movs	r2, #2
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f001 fd31 	bl	800826c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800680a:	e032      	b.n	8006872 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 fcbb 	bl	800818a <USBD_CtlError>
            ret = USBD_FAIL;
 8006814:	2303      	movs	r3, #3
 8006816:	75fb      	strb	r3, [r7, #23]
          break;
 8006818:	e02b      	b.n	8006872 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b03      	cmp	r3, #3
 8006824:	d107      	bne.n	8006836 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006826:	f107 030d 	add.w	r3, r7, #13
 800682a:	2201      	movs	r2, #1
 800682c:	4619      	mov	r1, r3
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f001 fd1c 	bl	800826c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006834:	e01d      	b.n	8006872 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 fca6 	bl	800818a <USBD_CtlError>
            ret = USBD_FAIL;
 800683e:	2303      	movs	r3, #3
 8006840:	75fb      	strb	r3, [r7, #23]
          break;
 8006842:	e016      	b.n	8006872 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b03      	cmp	r3, #3
 800684e:	d00f      	beq.n	8006870 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fc99 	bl	800818a <USBD_CtlError>
            ret = USBD_FAIL;
 8006858:	2303      	movs	r3, #3
 800685a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800685c:	e008      	b.n	8006870 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 fc92 	bl	800818a <USBD_CtlError>
          ret = USBD_FAIL;
 8006866:	2303      	movs	r3, #3
 8006868:	75fb      	strb	r3, [r7, #23]
          break;
 800686a:	e002      	b.n	8006872 <USBD_CDC_Setup+0x19e>
          break;
 800686c:	bf00      	nop
 800686e:	e008      	b.n	8006882 <USBD_CDC_Setup+0x1ae>
          break;
 8006870:	bf00      	nop
      }
      break;
 8006872:	e006      	b.n	8006882 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 fc87 	bl	800818a <USBD_CtlError>
      ret = USBD_FAIL;
 800687c:	2303      	movs	r3, #3
 800687e:	75fb      	strb	r3, [r7, #23]
      break;
 8006880:	bf00      	nop
  }

  return (uint8_t)ret;
 8006882:	7dfb      	ldrb	r3, [r7, #23]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800689e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	32b0      	adds	r2, #176	@ 0xb0
 80068aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e065      	b.n	8006982 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	32b0      	adds	r2, #176	@ 0xb0
 80068c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80068c6:	78fb      	ldrb	r3, [r7, #3]
 80068c8:	f003 020f 	and.w	r2, r3, #15
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	440b      	add	r3, r1
 80068d8:	3318      	adds	r3, #24
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d02f      	beq.n	8006940 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80068e0:	78fb      	ldrb	r3, [r7, #3]
 80068e2:	f003 020f 	and.w	r2, r3, #15
 80068e6:	6879      	ldr	r1, [r7, #4]
 80068e8:	4613      	mov	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	440b      	add	r3, r1
 80068f2:	3318      	adds	r3, #24
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	f003 010f 	and.w	r1, r3, #15
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	460b      	mov	r3, r1
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	440b      	add	r3, r1
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4403      	add	r3, r0
 8006908:	331c      	adds	r3, #28
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006910:	fb01 f303 	mul.w	r3, r1, r3
 8006914:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006916:	2b00      	cmp	r3, #0
 8006918:	d112      	bne.n	8006940 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	f003 020f 	and.w	r2, r3, #15
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	3318      	adds	r3, #24
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006932:	78f9      	ldrb	r1, [r7, #3]
 8006934:	2300      	movs	r3, #0
 8006936:	2200      	movs	r2, #0
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f002 f998 	bl	8008c6e <USBD_LL_Transmit>
 800693e:	e01f      	b.n	8006980 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2200      	movs	r2, #0
 8006944:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	33b0      	adds	r3, #176	@ 0xb0
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d010      	beq.n	8006980 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	33b0      	adds	r3, #176	@ 0xb0
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800697c:	78fa      	ldrb	r2, [r7, #3]
 800697e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	32b0      	adds	r2, #176	@ 0xb0
 80069a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	32b0      	adds	r2, #176	@ 0xb0
 80069b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e01a      	b.n	80069f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f002 f996 	bl	8008cf2 <USBD_LL_GetRxDataSize>
 80069c6:	4602      	mov	r2, r0
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	33b0      	adds	r3, #176	@ 0xb0
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80069ec:	4611      	mov	r1, r2
 80069ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	32b0      	adds	r2, #176	@ 0xb0
 8006a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e024      	b.n	8006a66 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	33b0      	adds	r3, #176	@ 0xb0
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d019      	beq.n	8006a64 <USBD_CDC_EP0_RxReady+0x6a>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006a36:	2bff      	cmp	r3, #255	@ 0xff
 8006a38:	d014      	beq.n	8006a64 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	33b0      	adds	r3, #176	@ 0xb0
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006a52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006a5a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	22ff      	movs	r2, #255	@ 0xff
 8006a60:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a78:	2182      	movs	r1, #130	@ 0x82
 8006a7a:	4818      	ldr	r0, [pc, #96]	@ (8006adc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a7c:	f000 fd4f 	bl	800751e <USBD_GetEpDesc>
 8006a80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a82:	2101      	movs	r1, #1
 8006a84:	4815      	ldr	r0, [pc, #84]	@ (8006adc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a86:	f000 fd4a 	bl	800751e <USBD_GetEpDesc>
 8006a8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a8c:	2181      	movs	r1, #129	@ 0x81
 8006a8e:	4813      	ldr	r0, [pc, #76]	@ (8006adc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006a90:	f000 fd45 	bl	800751e <USBD_GetEpDesc>
 8006a94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2210      	movs	r2, #16
 8006aa0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d006      	beq.n	8006ab6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ab0:	711a      	strb	r2, [r3, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d006      	beq.n	8006aca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ac4:	711a      	strb	r2, [r3, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2243      	movs	r2, #67	@ 0x43
 8006ace:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ad0:	4b02      	ldr	r3, [pc, #8]	@ (8006adc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20000050 	.word	0x20000050

08006ae0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ae8:	2182      	movs	r1, #130	@ 0x82
 8006aea:	4818      	ldr	r0, [pc, #96]	@ (8006b4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006aec:	f000 fd17 	bl	800751e <USBD_GetEpDesc>
 8006af0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006af2:	2101      	movs	r1, #1
 8006af4:	4815      	ldr	r0, [pc, #84]	@ (8006b4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006af6:	f000 fd12 	bl	800751e <USBD_GetEpDesc>
 8006afa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006afc:	2181      	movs	r1, #129	@ 0x81
 8006afe:	4813      	ldr	r0, [pc, #76]	@ (8006b4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b00:	f000 fd0d 	bl	800751e <USBD_GetEpDesc>
 8006b04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2210      	movs	r2, #16
 8006b10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d006      	beq.n	8006b26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	711a      	strb	r2, [r3, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f042 0202 	orr.w	r2, r2, #2
 8006b24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d006      	beq.n	8006b3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	711a      	strb	r2, [r3, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f042 0202 	orr.w	r2, r2, #2
 8006b38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2243      	movs	r2, #67	@ 0x43
 8006b3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b40:	4b02      	ldr	r3, [pc, #8]	@ (8006b4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000050 	.word	0x20000050

08006b50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b58:	2182      	movs	r1, #130	@ 0x82
 8006b5a:	4818      	ldr	r0, [pc, #96]	@ (8006bbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b5c:	f000 fcdf 	bl	800751e <USBD_GetEpDesc>
 8006b60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b62:	2101      	movs	r1, #1
 8006b64:	4815      	ldr	r0, [pc, #84]	@ (8006bbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b66:	f000 fcda 	bl	800751e <USBD_GetEpDesc>
 8006b6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b6c:	2181      	movs	r1, #129	@ 0x81
 8006b6e:	4813      	ldr	r0, [pc, #76]	@ (8006bbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006b70:	f000 fcd5 	bl	800751e <USBD_GetEpDesc>
 8006b74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2210      	movs	r2, #16
 8006b80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b90:	711a      	strb	r2, [r3, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d006      	beq.n	8006baa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ba4:	711a      	strb	r2, [r3, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2243      	movs	r2, #67	@ 0x43
 8006bae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bb0:	4b02      	ldr	r3, [pc, #8]	@ (8006bbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000050 	.word	0x20000050

08006bc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	220a      	movs	r2, #10
 8006bcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006bce:	4b03      	ldr	r3, [pc, #12]	@ (8006bdc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	2000000c 	.word	0x2000000c

08006be0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e009      	b.n	8006c08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	33b0      	adds	r3, #176	@ 0xb0
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	32b0      	adds	r2, #176	@ 0xb0
 8006c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e008      	b.n	8006c4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	32b0      	adds	r2, #176	@ 0xb0
 8006c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e004      	b.n	8006c86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
	...

08006c94 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	32b0      	adds	r2, #176	@ 0xb0
 8006ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006caa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006cac:	2301      	movs	r3, #1
 8006cae:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e025      	b.n	8006d06 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d11f      	bne.n	8006d04 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006ccc:	4b10      	ldr	r3, [pc, #64]	@ (8006d10 <USBD_CDC_TransmitPacket+0x7c>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	f003 020f 	and.w	r2, r3, #15
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4403      	add	r3, r0
 8006ce6:	3318      	adds	r3, #24
 8006ce8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006cea:	4b09      	ldr	r3, [pc, #36]	@ (8006d10 <USBD_CDC_TransmitPacket+0x7c>)
 8006cec:	7819      	ldrb	r1, [r3, #0]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f001 ffb7 	bl	8008c6e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000093 	.word	0x20000093

08006d14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	32b0      	adds	r2, #176	@ 0xb0
 8006d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	32b0      	adds	r2, #176	@ 0xb0
 8006d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e018      	b.n	8006d74 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	7c1b      	ldrb	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d7c <USBD_CDC_ReceivePacket+0x68>)
 8006d4c:	7819      	ldrb	r1, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f001 ffa9 	bl	8008cb0 <USBD_LL_PrepareReceive>
 8006d5e:	e008      	b.n	8006d72 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d60:	4b06      	ldr	r3, [pc, #24]	@ (8006d7c <USBD_CDC_ReceivePacket+0x68>)
 8006d62:	7819      	ldrb	r1, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d6a:	2340      	movs	r3, #64	@ 0x40
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 ff9f 	bl	8008cb0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000094 	.word	0x20000094

08006d80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e01f      	b.n	8006dd8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	79fa      	ldrb	r2, [r7, #7]
 8006dca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f001 fe19 	bl	8008a04 <USBD_LL_Init>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e025      	b.n	8006e44 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	32ae      	adds	r2, #174	@ 0xae
 8006e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00f      	beq.n	8006e34 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	32ae      	adds	r2, #174	@ 0xae
 8006e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e24:	f107 020e 	add.w	r2, r7, #14
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 fe21 	bl	8008a9c <USBD_LL_Start>
 8006e5a:	4603      	mov	r3, r0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e6c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	460b      	mov	r3, r1
 8006e84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d009      	beq.n	8006ea8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	78fa      	ldrb	r2, [r7, #3]
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	4798      	blx	r3
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	78fa      	ldrb	r2, [r7, #3]
 8006ecc:	4611      	mov	r1, r2
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 f90c 	bl	8008116 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d01a      	beq.n	8006f58 <USBD_LL_SetupStage+0x72>
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d822      	bhi.n	8006f6c <USBD_LL_SetupStage+0x86>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <USBD_LL_SetupStage+0x4a>
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d00a      	beq.n	8006f44 <USBD_LL_SetupStage+0x5e>
 8006f2e:	e01d      	b.n	8006f6c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fb63 	bl	8007604 <USBD_StdDevReq>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	73fb      	strb	r3, [r7, #15]
      break;
 8006f42:	e020      	b.n	8006f86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fbcb 	bl	80076e8 <USBD_StdItfReq>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]
      break;
 8006f56:	e016      	b.n	8006f86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fc2d 	bl	80077c0 <USBD_StdEPReq>
 8006f66:	4603      	mov	r3, r0
 8006f68:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6a:	e00c      	b.n	8006f86 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006f72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 fdee 	bl	8008b5c <USBD_LL_StallEP>
 8006f80:	4603      	mov	r3, r0
 8006f82:	73fb      	strb	r3, [r7, #15]
      break;
 8006f84:	bf00      	nop
  }

  return ret;
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006fa2:	7afb      	ldrb	r3, [r7, #11]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d16e      	bne.n	8007086 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006fae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	f040 8098 	bne.w	80070ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d913      	bls.n	8006ff0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	1ad2      	subs	r2, r2, r3
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	bf28      	it	cs
 8006fe2:	4613      	movcs	r3, r2
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f001 f988 	bl	80082fe <USBD_CtlContinueRx>
 8006fee:	e07d      	b.n	80070ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ff6:	f003 031f 	and.w	r3, r3, #31
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d014      	beq.n	8007028 <USBD_LL_DataOutStage+0x98>
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d81d      	bhi.n	800703e <USBD_LL_DataOutStage+0xae>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <USBD_LL_DataOutStage+0x7c>
 8007006:	2b01      	cmp	r3, #1
 8007008:	d003      	beq.n	8007012 <USBD_LL_DataOutStage+0x82>
 800700a:	e018      	b.n	800703e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	75bb      	strb	r3, [r7, #22]
            break;
 8007010:	e018      	b.n	8007044 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007018:	b2db      	uxtb	r3, r3
 800701a:	4619      	mov	r1, r3
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 fa64 	bl	80074ea <USBD_CoreFindIF>
 8007022:	4603      	mov	r3, r0
 8007024:	75bb      	strb	r3, [r7, #22]
            break;
 8007026:	e00d      	b.n	8007044 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800702e:	b2db      	uxtb	r3, r3
 8007030:	4619      	mov	r1, r3
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fa66 	bl	8007504 <USBD_CoreFindEP>
 8007038:	4603      	mov	r3, r0
 800703a:	75bb      	strb	r3, [r7, #22]
            break;
 800703c:	e002      	b.n	8007044 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	75bb      	strb	r3, [r7, #22]
            break;
 8007042:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007044:	7dbb      	ldrb	r3, [r7, #22]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d119      	bne.n	800707e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b03      	cmp	r3, #3
 8007054:	d113      	bne.n	800707e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007056:	7dba      	ldrb	r2, [r7, #22]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	32ae      	adds	r2, #174	@ 0xae
 800705c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00b      	beq.n	800707e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007066:	7dba      	ldrb	r2, [r7, #22]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800706e:	7dba      	ldrb	r2, [r7, #22]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	32ae      	adds	r2, #174	@ 0xae
 8007074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f001 f94e 	bl	8008320 <USBD_CtlSendStatus>
 8007084:	e032      	b.n	80070ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007086:	7afb      	ldrb	r3, [r7, #11]
 8007088:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800708c:	b2db      	uxtb	r3, r3
 800708e:	4619      	mov	r1, r3
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 fa37 	bl	8007504 <USBD_CoreFindEP>
 8007096:	4603      	mov	r3, r0
 8007098:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800709a:	7dbb      	ldrb	r3, [r7, #22]
 800709c:	2bff      	cmp	r3, #255	@ 0xff
 800709e:	d025      	beq.n	80070ec <USBD_LL_DataOutStage+0x15c>
 80070a0:	7dbb      	ldrb	r3, [r7, #22]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d122      	bne.n	80070ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d117      	bne.n	80070e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80070b2:	7dba      	ldrb	r2, [r7, #22]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	32ae      	adds	r2, #174	@ 0xae
 80070b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00f      	beq.n	80070e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80070c2:	7dba      	ldrb	r2, [r7, #22]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80070ca:	7dba      	ldrb	r2, [r7, #22]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	32ae      	adds	r2, #174	@ 0xae
 80070d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	7afa      	ldrb	r2, [r7, #11]
 80070d8:	4611      	mov	r1, r2
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	4798      	blx	r3
 80070de:	4603      	mov	r3, r0
 80070e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	e000      	b.n	80070ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b086      	sub	sp, #24
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	460b      	mov	r3, r1
 8007100:	607a      	str	r2, [r7, #4]
 8007102:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007104:	7afb      	ldrb	r3, [r7, #11]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d16f      	bne.n	80071ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3314      	adds	r3, #20
 800710e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007116:	2b02      	cmp	r3, #2
 8007118:	d15a      	bne.n	80071d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	689a      	ldr	r2, [r3, #8]
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	429a      	cmp	r2, r3
 8007124:	d914      	bls.n	8007150 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	689a      	ldr	r2, [r3, #8]
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	1ad2      	subs	r2, r2, r3
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	461a      	mov	r2, r3
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f001 f8b0 	bl	80082a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007142:	2300      	movs	r3, #0
 8007144:	2200      	movs	r2, #0
 8007146:	2100      	movs	r1, #0
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f001 fdb1 	bl	8008cb0 <USBD_LL_PrepareReceive>
 800714e:	e03f      	b.n	80071d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	429a      	cmp	r2, r3
 800715a:	d11c      	bne.n	8007196 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007164:	429a      	cmp	r2, r3
 8007166:	d316      	bcc.n	8007196 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007172:	429a      	cmp	r2, r3
 8007174:	d20f      	bcs.n	8007196 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007176:	2200      	movs	r2, #0
 8007178:	2100      	movs	r1, #0
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f001 f891 	bl	80082a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007188:	2300      	movs	r3, #0
 800718a:	2200      	movs	r2, #0
 800718c:	2100      	movs	r1, #0
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f001 fd8e 	bl	8008cb0 <USBD_LL_PrepareReceive>
 8007194:	e01c      	b.n	80071d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d10f      	bne.n	80071c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d009      	beq.n	80071c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071c2:	2180      	movs	r1, #128	@ 0x80
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f001 fcc9 	bl	8008b5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f001 f8bb 	bl	8008346 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d03a      	beq.n	8007250 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7ff fe42 	bl	8006e64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80071e8:	e032      	b.n	8007250 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80071ea:	7afb      	ldrb	r3, [r7, #11]
 80071ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	4619      	mov	r1, r3
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f985 	bl	8007504 <USBD_CoreFindEP>
 80071fa:	4603      	mov	r3, r0
 80071fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	2bff      	cmp	r3, #255	@ 0xff
 8007202:	d025      	beq.n	8007250 <USBD_LL_DataInStage+0x15a>
 8007204:	7dfb      	ldrb	r3, [r7, #23]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d122      	bne.n	8007250 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b03      	cmp	r3, #3
 8007214:	d11c      	bne.n	8007250 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007216:	7dfa      	ldrb	r2, [r7, #23]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	32ae      	adds	r2, #174	@ 0xae
 800721c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d014      	beq.n	8007250 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007226:	7dfa      	ldrb	r2, [r7, #23]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800722e:	7dfa      	ldrb	r2, [r7, #23]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	32ae      	adds	r2, #174	@ 0xae
 8007234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	7afa      	ldrb	r2, [r7, #11]
 800723c:	4611      	mov	r1, r2
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	4798      	blx	r3
 8007242:	4603      	mov	r3, r0
 8007244:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007246:	7dbb      	ldrb	r3, [r7, #22]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800724c:	7dbb      	ldrb	r3, [r7, #22]
 800724e:	e000      	b.n	8007252 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d014      	beq.n	80072c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00e      	beq.n	80072c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6852      	ldr	r2, [r2, #4]
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	4611      	mov	r1, r2
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80072bc:	2303      	movs	r3, #3
 80072be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072c0:	2340      	movs	r3, #64	@ 0x40
 80072c2:	2200      	movs	r2, #0
 80072c4:	2100      	movs	r1, #0
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 fc03 	bl	8008ad2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2240      	movs	r2, #64	@ 0x40
 80072d8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072dc:	2340      	movs	r3, #64	@ 0x40
 80072de:	2200      	movs	r2, #0
 80072e0:	2180      	movs	r1, #128	@ 0x80
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 fbf5 	bl	8008ad2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2240      	movs	r2, #64	@ 0x40
 80072f2:	621a      	str	r2, [r3, #32]

  return ret;
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	78fa      	ldrb	r2, [r7, #3]
 800730e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b04      	cmp	r3, #4
 8007330:	d006      	beq.n	8007340 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007338:	b2da      	uxtb	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2204      	movs	r2, #4
 8007344:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b04      	cmp	r3, #4
 8007368:	d106      	bne.n	8007378 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007370:	b2da      	uxtb	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b03      	cmp	r3, #3
 8007398:	d110      	bne.n	80073bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d005      	beq.n	80073bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	32ae      	adds	r2, #174	@ 0xae
 80073dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e01c      	b.n	8007422 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d115      	bne.n	8007420 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	32ae      	adds	r2, #174	@ 0xae
 80073fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00b      	beq.n	8007420 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	32ae      	adds	r2, #174	@ 0xae
 8007412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	78fa      	ldrb	r2, [r7, #3]
 800741a:	4611      	mov	r1, r2
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	32ae      	adds	r2, #174	@ 0xae
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007448:	2303      	movs	r3, #3
 800744a:	e01c      	b.n	8007486 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b03      	cmp	r3, #3
 8007456:	d115      	bne.n	8007484 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	32ae      	adds	r2, #174	@ 0xae
 8007462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	32ae      	adds	r2, #174	@ 0xae
 8007476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747c:	78fa      	ldrb	r2, [r7, #3]
 800747e:	4611      	mov	r1, r2
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00e      	beq.n	80074e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6852      	ldr	r2, [r2, #4]
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	4611      	mov	r1, r2
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	4798      	blx	r3
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80074dc:	2303      	movs	r3, #3
 80074de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	460b      	mov	r3, r1
 80074f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007510:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007512:	4618      	mov	r0, r3
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b086      	sub	sp, #24
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	885b      	ldrh	r3, [r3, #2]
 800753a:	b29b      	uxth	r3, r3
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	7812      	ldrb	r2, [r2, #0]
 8007540:	4293      	cmp	r3, r2
 8007542:	d91f      	bls.n	8007584 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800754a:	e013      	b.n	8007574 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800754c:	f107 030a 	add.w	r3, r7, #10
 8007550:	4619      	mov	r1, r3
 8007552:	6978      	ldr	r0, [r7, #20]
 8007554:	f000 f81b 	bl	800758e <USBD_GetNextDesc>
 8007558:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	785b      	ldrb	r3, [r3, #1]
 800755e:	2b05      	cmp	r3, #5
 8007560:	d108      	bne.n	8007574 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	789b      	ldrb	r3, [r3, #2]
 800756a:	78fa      	ldrb	r2, [r7, #3]
 800756c:	429a      	cmp	r2, r3
 800756e:	d008      	beq.n	8007582 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	885b      	ldrh	r3, [r3, #2]
 8007578:	b29a      	uxth	r2, r3
 800757a:	897b      	ldrh	r3, [r7, #10]
 800757c:	429a      	cmp	r2, r3
 800757e:	d8e5      	bhi.n	800754c <USBD_GetEpDesc+0x2e>
 8007580:	e000      	b.n	8007584 <USBD_GetEpDesc+0x66>
          break;
 8007582:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007584:	693b      	ldr	r3, [r7, #16]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800758e:	b480      	push	{r7}
 8007590:	b085      	sub	sp, #20
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	7812      	ldrb	r2, [r2, #0]
 80075a4:	4413      	add	r3, r2
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	461a      	mov	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4413      	add	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80075b8:	68fb      	ldr	r3, [r7, #12]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b087      	sub	sp, #28
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	3301      	adds	r3, #1
 80075dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80075e4:	8a3b      	ldrh	r3, [r7, #16]
 80075e6:	021b      	lsls	r3, r3, #8
 80075e8:	b21a      	sxth	r2, r3
 80075ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	b21b      	sxth	r3, r3
 80075f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80075f4:	89fb      	ldrh	r3, [r7, #14]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
	...

08007604 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800761a:	2b40      	cmp	r3, #64	@ 0x40
 800761c:	d005      	beq.n	800762a <USBD_StdDevReq+0x26>
 800761e:	2b40      	cmp	r3, #64	@ 0x40
 8007620:	d857      	bhi.n	80076d2 <USBD_StdDevReq+0xce>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00f      	beq.n	8007646 <USBD_StdDevReq+0x42>
 8007626:	2b20      	cmp	r3, #32
 8007628:	d153      	bne.n	80076d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	32ae      	adds	r2, #174	@ 0xae
 8007634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	4798      	blx	r3
 8007640:	4603      	mov	r3, r0
 8007642:	73fb      	strb	r3, [r7, #15]
      break;
 8007644:	e04a      	b.n	80076dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b09      	cmp	r3, #9
 800764c:	d83b      	bhi.n	80076c6 <USBD_StdDevReq+0xc2>
 800764e:	a201      	add	r2, pc, #4	@ (adr r2, 8007654 <USBD_StdDevReq+0x50>)
 8007650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007654:	080076a9 	.word	0x080076a9
 8007658:	080076bd 	.word	0x080076bd
 800765c:	080076c7 	.word	0x080076c7
 8007660:	080076b3 	.word	0x080076b3
 8007664:	080076c7 	.word	0x080076c7
 8007668:	08007687 	.word	0x08007687
 800766c:	0800767d 	.word	0x0800767d
 8007670:	080076c7 	.word	0x080076c7
 8007674:	0800769f 	.word	0x0800769f
 8007678:	08007691 	.word	0x08007691
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa3c 	bl	8007afc <USBD_GetDescriptor>
          break;
 8007684:	e024      	b.n	80076d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fba1 	bl	8007dd0 <USBD_SetAddress>
          break;
 800768e:	e01f      	b.n	80076d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fbe0 	bl	8007e58 <USBD_SetConfig>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
          break;
 800769c:	e018      	b.n	80076d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fc83 	bl	8007fac <USBD_GetConfig>
          break;
 80076a6:	e013      	b.n	80076d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fcb4 	bl	8008018 <USBD_GetStatus>
          break;
 80076b0:	e00e      	b.n	80076d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fce3 	bl	8008080 <USBD_SetFeature>
          break;
 80076ba:	e009      	b.n	80076d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fd07 	bl	80080d2 <USBD_ClrFeature>
          break;
 80076c4:	e004      	b.n	80076d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fd5e 	bl	800818a <USBD_CtlError>
          break;
 80076ce:	bf00      	nop
      }
      break;
 80076d0:	e004      	b.n	80076dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fd58 	bl	800818a <USBD_CtlError>
      break;
 80076da:	bf00      	nop
  }

  return ret;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop

080076e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076fe:	2b40      	cmp	r3, #64	@ 0x40
 8007700:	d005      	beq.n	800770e <USBD_StdItfReq+0x26>
 8007702:	2b40      	cmp	r3, #64	@ 0x40
 8007704:	d852      	bhi.n	80077ac <USBD_StdItfReq+0xc4>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <USBD_StdItfReq+0x26>
 800770a:	2b20      	cmp	r3, #32
 800770c:	d14e      	bne.n	80077ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007714:	b2db      	uxtb	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	2b02      	cmp	r3, #2
 800771a:	d840      	bhi.n	800779e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	889b      	ldrh	r3, [r3, #4]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b01      	cmp	r3, #1
 8007724:	d836      	bhi.n	8007794 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	889b      	ldrh	r3, [r3, #4]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7ff fedb 	bl	80074ea <USBD_CoreFindIF>
 8007734:	4603      	mov	r3, r0
 8007736:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007738:	7bbb      	ldrb	r3, [r7, #14]
 800773a:	2bff      	cmp	r3, #255	@ 0xff
 800773c:	d01d      	beq.n	800777a <USBD_StdItfReq+0x92>
 800773e:	7bbb      	ldrb	r3, [r7, #14]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d11a      	bne.n	800777a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007744:	7bba      	ldrb	r2, [r7, #14]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	32ae      	adds	r2, #174	@ 0xae
 800774a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00f      	beq.n	8007774 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007754:	7bba      	ldrb	r2, [r7, #14]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800775c:	7bba      	ldrb	r2, [r7, #14]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	32ae      	adds	r2, #174	@ 0xae
 8007762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	4798      	blx	r3
 800776e:	4603      	mov	r3, r0
 8007770:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007772:	e004      	b.n	800777e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007774:	2303      	movs	r3, #3
 8007776:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007778:	e001      	b.n	800777e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800777a:	2303      	movs	r3, #3
 800777c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	88db      	ldrh	r3, [r3, #6]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d110      	bne.n	80077a8 <USBD_StdItfReq+0xc0>
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10d      	bne.n	80077a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fdc7 	bl	8008320 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007792:	e009      	b.n	80077a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fcf7 	bl	800818a <USBD_CtlError>
          break;
 800779c:	e004      	b.n	80077a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fcf2 	bl	800818a <USBD_CtlError>
          break;
 80077a6:	e000      	b.n	80077aa <USBD_StdItfReq+0xc2>
          break;
 80077a8:	bf00      	nop
      }
      break;
 80077aa:	e004      	b.n	80077b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fceb 	bl	800818a <USBD_CtlError>
      break;
 80077b4:	bf00      	nop
  }

  return ret;
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	889b      	ldrh	r3, [r3, #4]
 80077d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077dc:	2b40      	cmp	r3, #64	@ 0x40
 80077de:	d007      	beq.n	80077f0 <USBD_StdEPReq+0x30>
 80077e0:	2b40      	cmp	r3, #64	@ 0x40
 80077e2:	f200 817f 	bhi.w	8007ae4 <USBD_StdEPReq+0x324>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d02a      	beq.n	8007840 <USBD_StdEPReq+0x80>
 80077ea:	2b20      	cmp	r3, #32
 80077ec:	f040 817a 	bne.w	8007ae4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff fe85 	bl	8007504 <USBD_CoreFindEP>
 80077fa:	4603      	mov	r3, r0
 80077fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077fe:	7b7b      	ldrb	r3, [r7, #13]
 8007800:	2bff      	cmp	r3, #255	@ 0xff
 8007802:	f000 8174 	beq.w	8007aee <USBD_StdEPReq+0x32e>
 8007806:	7b7b      	ldrb	r3, [r7, #13]
 8007808:	2b00      	cmp	r3, #0
 800780a:	f040 8170 	bne.w	8007aee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800780e:	7b7a      	ldrb	r2, [r7, #13]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007816:	7b7a      	ldrb	r2, [r7, #13]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	32ae      	adds	r2, #174	@ 0xae
 800781c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 8163 	beq.w	8007aee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007828:	7b7a      	ldrb	r2, [r7, #13]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	32ae      	adds	r2, #174	@ 0xae
 800782e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
 800783a:	4603      	mov	r3, r0
 800783c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800783e:	e156      	b.n	8007aee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	785b      	ldrb	r3, [r3, #1]
 8007844:	2b03      	cmp	r3, #3
 8007846:	d008      	beq.n	800785a <USBD_StdEPReq+0x9a>
 8007848:	2b03      	cmp	r3, #3
 800784a:	f300 8145 	bgt.w	8007ad8 <USBD_StdEPReq+0x318>
 800784e:	2b00      	cmp	r3, #0
 8007850:	f000 809b 	beq.w	800798a <USBD_StdEPReq+0x1ca>
 8007854:	2b01      	cmp	r3, #1
 8007856:	d03c      	beq.n	80078d2 <USBD_StdEPReq+0x112>
 8007858:	e13e      	b.n	8007ad8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b02      	cmp	r3, #2
 8007864:	d002      	beq.n	800786c <USBD_StdEPReq+0xac>
 8007866:	2b03      	cmp	r3, #3
 8007868:	d016      	beq.n	8007898 <USBD_StdEPReq+0xd8>
 800786a:	e02c      	b.n	80078c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00d      	beq.n	800788e <USBD_StdEPReq+0xce>
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	2b80      	cmp	r3, #128	@ 0x80
 8007876:	d00a      	beq.n	800788e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 f96d 	bl	8008b5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007882:	2180      	movs	r1, #128	@ 0x80
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 f969 	bl	8008b5c <USBD_LL_StallEP>
 800788a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800788c:	e020      	b.n	80078d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fc7a 	bl	800818a <USBD_CtlError>
              break;
 8007896:	e01b      	b.n	80078d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	885b      	ldrh	r3, [r3, #2]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10e      	bne.n	80078be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00b      	beq.n	80078be <USBD_StdEPReq+0xfe>
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	2b80      	cmp	r3, #128	@ 0x80
 80078aa:	d008      	beq.n	80078be <USBD_StdEPReq+0xfe>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	88db      	ldrh	r3, [r3, #6]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d104      	bne.n	80078be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 f94f 	bl	8008b5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fd2e 	bl	8008320 <USBD_CtlSendStatus>

              break;
 80078c4:	e004      	b.n	80078d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fc5e 	bl	800818a <USBD_CtlError>
              break;
 80078ce:	bf00      	nop
          }
          break;
 80078d0:	e107      	b.n	8007ae2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d002      	beq.n	80078e4 <USBD_StdEPReq+0x124>
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d016      	beq.n	8007910 <USBD_StdEPReq+0x150>
 80078e2:	e04b      	b.n	800797c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00d      	beq.n	8007906 <USBD_StdEPReq+0x146>
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	2b80      	cmp	r3, #128	@ 0x80
 80078ee:	d00a      	beq.n	8007906 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 f931 	bl	8008b5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078fa:	2180      	movs	r1, #128	@ 0x80
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 f92d 	bl	8008b5c <USBD_LL_StallEP>
 8007902:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007904:	e040      	b.n	8007988 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fc3e 	bl	800818a <USBD_CtlError>
              break;
 800790e:	e03b      	b.n	8007988 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	885b      	ldrh	r3, [r3, #2]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d136      	bne.n	8007986 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800791e:	2b00      	cmp	r3, #0
 8007920:	d004      	beq.n	800792c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 f937 	bl	8008b9a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fcf7 	bl	8008320 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff fde4 	bl	8007504 <USBD_CoreFindEP>
 800793c:	4603      	mov	r3, r0
 800793e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007940:	7b7b      	ldrb	r3, [r7, #13]
 8007942:	2bff      	cmp	r3, #255	@ 0xff
 8007944:	d01f      	beq.n	8007986 <USBD_StdEPReq+0x1c6>
 8007946:	7b7b      	ldrb	r3, [r7, #13]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d11c      	bne.n	8007986 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800794c:	7b7a      	ldrb	r2, [r7, #13]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007954:	7b7a      	ldrb	r2, [r7, #13]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	32ae      	adds	r2, #174	@ 0xae
 800795a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d010      	beq.n	8007986 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007964:	7b7a      	ldrb	r2, [r7, #13]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	32ae      	adds	r2, #174	@ 0xae
 800796a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
 8007976:	4603      	mov	r3, r0
 8007978:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800797a:	e004      	b.n	8007986 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fc03 	bl	800818a <USBD_CtlError>
              break;
 8007984:	e000      	b.n	8007988 <USBD_StdEPReq+0x1c8>
              break;
 8007986:	bf00      	nop
          }
          break;
 8007988:	e0ab      	b.n	8007ae2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b02      	cmp	r3, #2
 8007994:	d002      	beq.n	800799c <USBD_StdEPReq+0x1dc>
 8007996:	2b03      	cmp	r3, #3
 8007998:	d032      	beq.n	8007a00 <USBD_StdEPReq+0x240>
 800799a:	e097      	b.n	8007acc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d007      	beq.n	80079b2 <USBD_StdEPReq+0x1f2>
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b80      	cmp	r3, #128	@ 0x80
 80079a6:	d004      	beq.n	80079b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fbed 	bl	800818a <USBD_CtlError>
                break;
 80079b0:	e091      	b.n	8007ad6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	da0b      	bge.n	80079d2 <USBD_StdEPReq+0x212>
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079c0:	4613      	mov	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	3310      	adds	r3, #16
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	4413      	add	r3, r2
 80079ce:	3304      	adds	r3, #4
 80079d0:	e00b      	b.n	80079ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079d8:	4613      	mov	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	4413      	add	r3, r2
 80079e8:	3304      	adds	r3, #4
 80079ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2202      	movs	r2, #2
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fc37 	bl	800826c <USBD_CtlSendData>
              break;
 80079fe:	e06a      	b.n	8007ad6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	da11      	bge.n	8007a2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	f003 020f 	and.w	r2, r3, #15
 8007a0e:	6879      	ldr	r1, [r7, #4]
 8007a10:	4613      	mov	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	440b      	add	r3, r1
 8007a1a:	3324      	adds	r3, #36	@ 0x24
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d117      	bne.n	8007a52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fbb0 	bl	800818a <USBD_CtlError>
                  break;
 8007a2a:	e054      	b.n	8007ad6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	f003 020f 	and.w	r2, r3, #15
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	4613      	mov	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	440b      	add	r3, r1
 8007a3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fb9d 	bl	800818a <USBD_CtlError>
                  break;
 8007a50:	e041      	b.n	8007ad6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	da0b      	bge.n	8007a72 <USBD_StdEPReq+0x2b2>
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	3310      	adds	r3, #16
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	3304      	adds	r3, #4
 8007a70:	e00b      	b.n	8007a8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a78:	4613      	mov	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	4413      	add	r3, r2
 8007a88:	3304      	adds	r3, #4
 8007a8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <USBD_StdEPReq+0x2d8>
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	2b80      	cmp	r3, #128	@ 0x80
 8007a96:	d103      	bne.n	8007aa0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e00e      	b.n	8007abe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 f897 	bl	8008bd8 <USBD_LL_IsStallEP>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	e002      	b.n	8007abe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2200      	movs	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fbd1 	bl	800826c <USBD_CtlSendData>
              break;
 8007aca:	e004      	b.n	8007ad6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fb5b 	bl	800818a <USBD_CtlError>
              break;
 8007ad4:	bf00      	nop
          }
          break;
 8007ad6:	e004      	b.n	8007ae2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fb55 	bl	800818a <USBD_CtlError>
          break;
 8007ae0:	bf00      	nop
      }
      break;
 8007ae2:	e005      	b.n	8007af0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fb4f 	bl	800818a <USBD_CtlError>
      break;
 8007aec:	e000      	b.n	8007af0 <USBD_StdEPReq+0x330>
      break;
 8007aee:	bf00      	nop
  }

  return ret;
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	885b      	ldrh	r3, [r3, #2]
 8007b16:	0a1b      	lsrs	r3, r3, #8
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	2b06      	cmp	r3, #6
 8007b1e:	f200 8128 	bhi.w	8007d72 <USBD_GetDescriptor+0x276>
 8007b22:	a201      	add	r2, pc, #4	@ (adr r2, 8007b28 <USBD_GetDescriptor+0x2c>)
 8007b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b28:	08007b45 	.word	0x08007b45
 8007b2c:	08007b5d 	.word	0x08007b5d
 8007b30:	08007b9d 	.word	0x08007b9d
 8007b34:	08007d73 	.word	0x08007d73
 8007b38:	08007d73 	.word	0x08007d73
 8007b3c:	08007d13 	.word	0x08007d13
 8007b40:	08007d3f 	.word	0x08007d3f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	7c12      	ldrb	r2, [r2, #16]
 8007b50:	f107 0108 	add.w	r1, r7, #8
 8007b54:	4610      	mov	r0, r2
 8007b56:	4798      	blx	r3
 8007b58:	60f8      	str	r0, [r7, #12]
      break;
 8007b5a:	e112      	b.n	8007d82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	7c1b      	ldrb	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10d      	bne.n	8007b80 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6c:	f107 0208 	add.w	r2, r7, #8
 8007b70:	4610      	mov	r0, r2
 8007b72:	4798      	blx	r3
 8007b74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b7e:	e100      	b.n	8007d82 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b88:	f107 0208 	add.w	r2, r7, #8
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4798      	blx	r3
 8007b90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3301      	adds	r3, #1
 8007b96:	2202      	movs	r2, #2
 8007b98:	701a      	strb	r2, [r3, #0]
      break;
 8007b9a:	e0f2      	b.n	8007d82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	885b      	ldrh	r3, [r3, #2]
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b05      	cmp	r3, #5
 8007ba4:	f200 80ac 	bhi.w	8007d00 <USBD_GetDescriptor+0x204>
 8007ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb0 <USBD_GetDescriptor+0xb4>)
 8007baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bae:	bf00      	nop
 8007bb0:	08007bc9 	.word	0x08007bc9
 8007bb4:	08007bfd 	.word	0x08007bfd
 8007bb8:	08007c31 	.word	0x08007c31
 8007bbc:	08007c65 	.word	0x08007c65
 8007bc0:	08007c99 	.word	0x08007c99
 8007bc4:	08007ccd 	.word	0x08007ccd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	7c12      	ldrb	r2, [r2, #16]
 8007be0:	f107 0108 	add.w	r1, r7, #8
 8007be4:	4610      	mov	r0, r2
 8007be6:	4798      	blx	r3
 8007be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bea:	e091      	b.n	8007d10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 facb 	bl	800818a <USBD_CtlError>
            err++;
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bfa:	e089      	b.n	8007d10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	7c12      	ldrb	r2, [r2, #16]
 8007c14:	f107 0108 	add.w	r1, r7, #8
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4798      	blx	r3
 8007c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c1e:	e077      	b.n	8007d10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fab1 	bl	800818a <USBD_CtlError>
            err++;
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c2e:	e06f      	b.n	8007d10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00b      	beq.n	8007c54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	7c12      	ldrb	r2, [r2, #16]
 8007c48:	f107 0108 	add.w	r1, r7, #8
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
 8007c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c52:	e05d      	b.n	8007d10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fa97 	bl	800818a <USBD_CtlError>
            err++;
 8007c5c:	7afb      	ldrb	r3, [r7, #11]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	72fb      	strb	r3, [r7, #11]
          break;
 8007c62:	e055      	b.n	8007d10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00b      	beq.n	8007c88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	7c12      	ldrb	r2, [r2, #16]
 8007c7c:	f107 0108 	add.w	r1, r7, #8
 8007c80:	4610      	mov	r0, r2
 8007c82:	4798      	blx	r3
 8007c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c86:	e043      	b.n	8007d10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa7d 	bl	800818a <USBD_CtlError>
            err++;
 8007c90:	7afb      	ldrb	r3, [r7, #11]
 8007c92:	3301      	adds	r3, #1
 8007c94:	72fb      	strb	r3, [r7, #11]
          break;
 8007c96:	e03b      	b.n	8007d10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00b      	beq.n	8007cbc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	7c12      	ldrb	r2, [r2, #16]
 8007cb0:	f107 0108 	add.w	r1, r7, #8
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4798      	blx	r3
 8007cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cba:	e029      	b.n	8007d10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa63 	bl	800818a <USBD_CtlError>
            err++;
 8007cc4:	7afb      	ldrb	r3, [r7, #11]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cca:	e021      	b.n	8007d10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00b      	beq.n	8007cf0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	7c12      	ldrb	r2, [r2, #16]
 8007ce4:	f107 0108 	add.w	r1, r7, #8
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4798      	blx	r3
 8007cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cee:	e00f      	b.n	8007d10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fa49 	bl	800818a <USBD_CtlError>
            err++;
 8007cf8:	7afb      	ldrb	r3, [r7, #11]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cfe:	e007      	b.n	8007d10 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa41 	bl	800818a <USBD_CtlError>
          err++;
 8007d08:	7afb      	ldrb	r3, [r7, #11]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007d0e:	bf00      	nop
      }
      break;
 8007d10:	e037      	b.n	8007d82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7c1b      	ldrb	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d22:	f107 0208 	add.w	r2, r7, #8
 8007d26:	4610      	mov	r0, r2
 8007d28:	4798      	blx	r3
 8007d2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d2c:	e029      	b.n	8007d82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fa2a 	bl	800818a <USBD_CtlError>
        err++;
 8007d36:	7afb      	ldrb	r3, [r7, #11]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d3c:	e021      	b.n	8007d82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	7c1b      	ldrb	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10d      	bne.n	8007d62 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4e:	f107 0208 	add.w	r2, r7, #8
 8007d52:	4610      	mov	r0, r2
 8007d54:	4798      	blx	r3
 8007d56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	2207      	movs	r2, #7
 8007d5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d60:	e00f      	b.n	8007d82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fa10 	bl	800818a <USBD_CtlError>
        err++;
 8007d6a:	7afb      	ldrb	r3, [r7, #11]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d70:	e007      	b.n	8007d82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fa08 	bl	800818a <USBD_CtlError>
      err++;
 8007d7a:	7afb      	ldrb	r3, [r7, #11]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d80:	bf00      	nop
  }

  if (err != 0U)
 8007d82:	7afb      	ldrb	r3, [r7, #11]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11e      	bne.n	8007dc6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	88db      	ldrh	r3, [r3, #6]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d016      	beq.n	8007dbe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007d90:	893b      	ldrh	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00e      	beq.n	8007db4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	88da      	ldrh	r2, [r3, #6]
 8007d9a:	893b      	ldrh	r3, [r7, #8]
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	bf28      	it	cs
 8007da0:	4613      	movcs	r3, r2
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007da6:	893b      	ldrh	r3, [r7, #8]
 8007da8:	461a      	mov	r2, r3
 8007daa:	68f9      	ldr	r1, [r7, #12]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fa5d 	bl	800826c <USBD_CtlSendData>
 8007db2:	e009      	b.n	8007dc8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f9e7 	bl	800818a <USBD_CtlError>
 8007dbc:	e004      	b.n	8007dc8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 faae 	bl	8008320 <USBD_CtlSendStatus>
 8007dc4:	e000      	b.n	8007dc8 <USBD_GetDescriptor+0x2cc>
    return;
 8007dc6:	bf00      	nop
  }
}
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop

08007dd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	889b      	ldrh	r3, [r3, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d131      	bne.n	8007e46 <USBD_SetAddress+0x76>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	88db      	ldrh	r3, [r3, #6]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d12d      	bne.n	8007e46 <USBD_SetAddress+0x76>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	885b      	ldrh	r3, [r3, #2]
 8007dee:	2b7f      	cmp	r3, #127	@ 0x7f
 8007df0:	d829      	bhi.n	8007e46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	885b      	ldrh	r3, [r3, #2]
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d104      	bne.n	8007e14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f9bc 	bl	800818a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e12:	e01d      	b.n	8007e50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	7bfa      	ldrb	r2, [r7, #15]
 8007e18:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 ff05 	bl	8008c30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fa7a 	bl	8008320 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d004      	beq.n	8007e3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2202      	movs	r2, #2
 8007e36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3a:	e009      	b.n	8007e50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e44:	e004      	b.n	8007e50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f99e 	bl	800818a <USBD_CtlError>
  }
}
 8007e4e:	bf00      	nop
 8007e50:	bf00      	nop
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	885b      	ldrh	r3, [r3, #2]
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	4b4e      	ldr	r3, [pc, #312]	@ (8007fa8 <USBD_SetConfig+0x150>)
 8007e6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e70:	4b4d      	ldr	r3, [pc, #308]	@ (8007fa8 <USBD_SetConfig+0x150>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d905      	bls.n	8007e84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f985 	bl	800818a <USBD_CtlError>
    return USBD_FAIL;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e08c      	b.n	8007f9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d002      	beq.n	8007e96 <USBD_SetConfig+0x3e>
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d029      	beq.n	8007ee8 <USBD_SetConfig+0x90>
 8007e94:	e075      	b.n	8007f82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e96:	4b44      	ldr	r3, [pc, #272]	@ (8007fa8 <USBD_SetConfig+0x150>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d020      	beq.n	8007ee0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007e9e:	4b42      	ldr	r3, [pc, #264]	@ (8007fa8 <USBD_SetConfig+0x150>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8007fa8 <USBD_SetConfig+0x150>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fe ffe3 	bl	8006e7a <USBD_SetClassConfig>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d008      	beq.n	8007ed0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f962 	bl	800818a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2202      	movs	r2, #2
 8007eca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ece:	e065      	b.n	8007f9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fa25 	bl	8008320 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2203      	movs	r2, #3
 8007eda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007ede:	e05d      	b.n	8007f9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fa1d 	bl	8008320 <USBD_CtlSendStatus>
      break;
 8007ee6:	e059      	b.n	8007f9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8007fa8 <USBD_SetConfig+0x150>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d112      	bne.n	8007f16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8007fa8 <USBD_SetConfig+0x150>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	461a      	mov	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f02:	4b29      	ldr	r3, [pc, #164]	@ (8007fa8 <USBD_SetConfig+0x150>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7fe ffd2 	bl	8006eb2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fa06 	bl	8008320 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f14:	e042      	b.n	8007f9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007f16:	4b24      	ldr	r3, [pc, #144]	@ (8007fa8 <USBD_SetConfig+0x150>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d02a      	beq.n	8007f7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7fe ffc0 	bl	8006eb2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f32:	4b1d      	ldr	r3, [pc, #116]	@ (8007fa8 <USBD_SetConfig+0x150>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa8 <USBD_SetConfig+0x150>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7fe ff99 	bl	8006e7a <USBD_SetClassConfig>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00f      	beq.n	8007f72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f918 	bl	800818a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7fe ffa5 	bl	8006eb2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007f70:	e014      	b.n	8007f9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f9d4 	bl	8008320 <USBD_CtlSendStatus>
      break;
 8007f78:	e010      	b.n	8007f9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f9d0 	bl	8008320 <USBD_CtlSendStatus>
      break;
 8007f80:	e00c      	b.n	8007f9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f900 	bl	800818a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f8a:	4b07      	ldr	r3, [pc, #28]	@ (8007fa8 <USBD_SetConfig+0x150>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7fe ff8e 	bl	8006eb2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f96:	2303      	movs	r3, #3
 8007f98:	73fb      	strb	r3, [r7, #15]
      break;
 8007f9a:	bf00      	nop
  }

  return ret;
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200002f8 	.word	0x200002f8

08007fac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	88db      	ldrh	r3, [r3, #6]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d004      	beq.n	8007fc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f8e2 	bl	800818a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fc6:	e023      	b.n	8008010 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	dc02      	bgt.n	8007fda <USBD_GetConfig+0x2e>
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	dc03      	bgt.n	8007fe0 <USBD_GetConfig+0x34>
 8007fd8:	e015      	b.n	8008006 <USBD_GetConfig+0x5a>
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d00b      	beq.n	8007ff6 <USBD_GetConfig+0x4a>
 8007fde:	e012      	b.n	8008006 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	2201      	movs	r2, #1
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f93c 	bl	800826c <USBD_CtlSendData>
        break;
 8007ff4:	e00c      	b.n	8008010 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f934 	bl	800826c <USBD_CtlSendData>
        break;
 8008004:	e004      	b.n	8008010 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f8be 	bl	800818a <USBD_CtlError>
        break;
 800800e:	bf00      	nop
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	3b01      	subs	r3, #1
 800802c:	2b02      	cmp	r3, #2
 800802e:	d81e      	bhi.n	800806e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	88db      	ldrh	r3, [r3, #6]
 8008034:	2b02      	cmp	r3, #2
 8008036:	d004      	beq.n	8008042 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f8a5 	bl	800818a <USBD_CtlError>
        break;
 8008040:	e01a      	b.n	8008078 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800804e:	2b00      	cmp	r3, #0
 8008050:	d005      	beq.n	800805e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f043 0202 	orr.w	r2, r3, #2
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	330c      	adds	r3, #12
 8008062:	2202      	movs	r2, #2
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f900 	bl	800826c <USBD_CtlSendData>
      break;
 800806c:	e004      	b.n	8008078 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f88a 	bl	800818a <USBD_CtlError>
      break;
 8008076:	bf00      	nop
  }
}
 8008078:	bf00      	nop
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	885b      	ldrh	r3, [r3, #2]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d107      	bne.n	80080a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f940 	bl	8008320 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80080a0:	e013      	b.n	80080ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	885b      	ldrh	r3, [r3, #2]
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d10b      	bne.n	80080c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	889b      	ldrh	r3, [r3, #4]
 80080ae:	0a1b      	lsrs	r3, r3, #8
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f930 	bl	8008320 <USBD_CtlSendStatus>
}
 80080c0:	e003      	b.n	80080ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f860 	bl	800818a <USBD_CtlError>
}
 80080ca:	bf00      	nop
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b082      	sub	sp, #8
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	3b01      	subs	r3, #1
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d80b      	bhi.n	8008102 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	885b      	ldrh	r3, [r3, #2]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d10c      	bne.n	800810c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f910 	bl	8008320 <USBD_CtlSendStatus>
      }
      break;
 8008100:	e004      	b.n	800810c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f840 	bl	800818a <USBD_CtlError>
      break;
 800810a:	e000      	b.n	800810e <USBD_ClrFeature+0x3c>
      break;
 800810c:	bf00      	nop
  }
}
 800810e:	bf00      	nop
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	781a      	ldrb	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3301      	adds	r3, #1
 8008130:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3301      	adds	r3, #1
 800813e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7ff fa40 	bl	80075c6 <SWAPBYTE>
 8008146:	4603      	mov	r3, r0
 8008148:	461a      	mov	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3301      	adds	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	3301      	adds	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f7ff fa33 	bl	80075c6 <SWAPBYTE>
 8008160:	4603      	mov	r3, r0
 8008162:	461a      	mov	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3301      	adds	r3, #1
 800816c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3301      	adds	r3, #1
 8008172:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f7ff fa26 	bl	80075c6 <SWAPBYTE>
 800817a:	4603      	mov	r3, r0
 800817c:	461a      	mov	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	80da      	strh	r2, [r3, #6]
}
 8008182:	bf00      	nop
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008194:	2180      	movs	r1, #128	@ 0x80
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fce0 	bl	8008b5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800819c:	2100      	movs	r1, #0
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fcdc 	bl	8008b5c <USBD_LL_StallEP>
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d036      	beq.n	8008230 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081c6:	6938      	ldr	r0, [r7, #16]
 80081c8:	f000 f836 	bl	8008238 <USBD_GetLen>
 80081cc:	4603      	mov	r3, r0
 80081ce:	3301      	adds	r3, #1
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	4413      	add	r3, r2
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	7812      	ldrb	r2, [r2, #0]
 80081e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	3301      	adds	r3, #1
 80081ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4413      	add	r3, r2
 80081f2:	2203      	movs	r2, #3
 80081f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	3301      	adds	r3, #1
 80081fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081fc:	e013      	b.n	8008226 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	4413      	add	r3, r2
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	7812      	ldrb	r2, [r2, #0]
 8008208:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	3301      	adds	r3, #1
 800820e:	613b      	str	r3, [r7, #16]
    idx++;
 8008210:	7dfb      	ldrb	r3, [r7, #23]
 8008212:	3301      	adds	r3, #1
 8008214:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	4413      	add	r3, r2
 800821c:	2200      	movs	r2, #0
 800821e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	3301      	adds	r3, #1
 8008224:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e7      	bne.n	80081fe <USBD_GetString+0x52>
 800822e:	e000      	b.n	8008232 <USBD_GetString+0x86>
    return;
 8008230:	bf00      	nop
  }
}
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008248:	e005      	b.n	8008256 <USBD_GetLen+0x1e>
  {
    len++;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	3301      	adds	r3, #1
 800824e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	3301      	adds	r3, #1
 8008254:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1f5      	bne.n	800824a <USBD_GetLen+0x12>
  }

  return len;
 800825e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2202      	movs	r2, #2
 800827c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	2100      	movs	r1, #0
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 fceb 	bl	8008c6e <USBD_LL_Transmit>

  return USBD_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	2100      	movs	r1, #0
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fcda 	bl	8008c6e <USBD_LL_Transmit>

  return USBD_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2203      	movs	r2, #3
 80082d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	2100      	movs	r1, #0
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 fcde 	bl	8008cb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	60f8      	str	r0, [r7, #12]
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	2100      	movs	r1, #0
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 fccd 	bl	8008cb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2204      	movs	r2, #4
 800832c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008330:	2300      	movs	r3, #0
 8008332:	2200      	movs	r2, #0
 8008334:	2100      	movs	r1, #0
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fc99 	bl	8008c6e <USBD_LL_Transmit>

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2205      	movs	r2, #5
 8008352:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008356:	2300      	movs	r3, #0
 8008358:	2200      	movs	r2, #0
 800835a:	2100      	movs	r1, #0
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fca7 	bl	8008cb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008370:	2200      	movs	r2, #0
 8008372:	4912      	ldr	r1, [pc, #72]	@ (80083bc <MX_USB_DEVICE_Init+0x50>)
 8008374:	4812      	ldr	r0, [pc, #72]	@ (80083c0 <MX_USB_DEVICE_Init+0x54>)
 8008376:	f7fe fd03 	bl	8006d80 <USBD_Init>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008380:	f7f8 fbcc 	bl	8000b1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008384:	490f      	ldr	r1, [pc, #60]	@ (80083c4 <MX_USB_DEVICE_Init+0x58>)
 8008386:	480e      	ldr	r0, [pc, #56]	@ (80083c0 <MX_USB_DEVICE_Init+0x54>)
 8008388:	f7fe fd2a 	bl	8006de0 <USBD_RegisterClass>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008392:	f7f8 fbc3 	bl	8000b1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008396:	490c      	ldr	r1, [pc, #48]	@ (80083c8 <MX_USB_DEVICE_Init+0x5c>)
 8008398:	4809      	ldr	r0, [pc, #36]	@ (80083c0 <MX_USB_DEVICE_Init+0x54>)
 800839a:	f7fe fc21 	bl	8006be0 <USBD_CDC_RegisterInterface>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083a4:	f7f8 fbba 	bl	8000b1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083a8:	4805      	ldr	r0, [pc, #20]	@ (80083c0 <MX_USB_DEVICE_Init+0x54>)
 80083aa:	f7fe fd4f 	bl	8006e4c <USBD_Start>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d001      	beq.n	80083b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083b4:	f7f8 fbb2 	bl	8000b1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083b8:	bf00      	nop
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	200000ac 	.word	0x200000ac
 80083c0:	200002fc 	.word	0x200002fc
 80083c4:	20000018 	.word	0x20000018
 80083c8:	20000098 	.word	0x20000098

080083cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083d0:	2200      	movs	r2, #0
 80083d2:	4905      	ldr	r1, [pc, #20]	@ (80083e8 <CDC_Init_FS+0x1c>)
 80083d4:	4805      	ldr	r0, [pc, #20]	@ (80083ec <CDC_Init_FS+0x20>)
 80083d6:	f7fe fc1d 	bl	8006c14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083da:	4905      	ldr	r1, [pc, #20]	@ (80083f0 <CDC_Init_FS+0x24>)
 80083dc:	4803      	ldr	r0, [pc, #12]	@ (80083ec <CDC_Init_FS+0x20>)
 80083de:	f7fe fc3b 	bl	8006c58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	200009d8 	.word	0x200009d8
 80083ec:	200002fc 	.word	0x200002fc
 80083f0:	200005d8 	.word	0x200005d8

080083f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083f4:	b480      	push	{r7}
 80083f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	6039      	str	r1, [r7, #0]
 800840e:	71fb      	strb	r3, [r7, #7]
 8008410:	4613      	mov	r3, r2
 8008412:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b23      	cmp	r3, #35	@ 0x23
 8008418:	d84a      	bhi.n	80084b0 <CDC_Control_FS+0xac>
 800841a:	a201      	add	r2, pc, #4	@ (adr r2, 8008420 <CDC_Control_FS+0x1c>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	080084b1 	.word	0x080084b1
 8008424:	080084b1 	.word	0x080084b1
 8008428:	080084b1 	.word	0x080084b1
 800842c:	080084b1 	.word	0x080084b1
 8008430:	080084b1 	.word	0x080084b1
 8008434:	080084b1 	.word	0x080084b1
 8008438:	080084b1 	.word	0x080084b1
 800843c:	080084b1 	.word	0x080084b1
 8008440:	080084b1 	.word	0x080084b1
 8008444:	080084b1 	.word	0x080084b1
 8008448:	080084b1 	.word	0x080084b1
 800844c:	080084b1 	.word	0x080084b1
 8008450:	080084b1 	.word	0x080084b1
 8008454:	080084b1 	.word	0x080084b1
 8008458:	080084b1 	.word	0x080084b1
 800845c:	080084b1 	.word	0x080084b1
 8008460:	080084b1 	.word	0x080084b1
 8008464:	080084b1 	.word	0x080084b1
 8008468:	080084b1 	.word	0x080084b1
 800846c:	080084b1 	.word	0x080084b1
 8008470:	080084b1 	.word	0x080084b1
 8008474:	080084b1 	.word	0x080084b1
 8008478:	080084b1 	.word	0x080084b1
 800847c:	080084b1 	.word	0x080084b1
 8008480:	080084b1 	.word	0x080084b1
 8008484:	080084b1 	.word	0x080084b1
 8008488:	080084b1 	.word	0x080084b1
 800848c:	080084b1 	.word	0x080084b1
 8008490:	080084b1 	.word	0x080084b1
 8008494:	080084b1 	.word	0x080084b1
 8008498:	080084b1 	.word	0x080084b1
 800849c:	080084b1 	.word	0x080084b1
 80084a0:	080084b1 	.word	0x080084b1
 80084a4:	080084b1 	.word	0x080084b1
 80084a8:	080084b1 	.word	0x080084b1
 80084ac:	080084b1 	.word	0x080084b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084b0:	bf00      	nop
  }

  return (USBD_OK);
 80084b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	cdc_rx_data = Buf;
 80084ca:	4a09      	ldr	r2, [pc, #36]	@ (80084f0 <CDC_Receive_FS+0x30>)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6013      	str	r3, [r2, #0]
	cdc_rx_flag = true;
 80084d0:	4b08      	ldr	r3, [pc, #32]	@ (80084f4 <CDC_Receive_FS+0x34>)
 80084d2:	2201      	movs	r2, #1
 80084d4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	4807      	ldr	r0, [pc, #28]	@ (80084f8 <CDC_Receive_FS+0x38>)
 80084da:	f7fe fbbd 	bl	8006c58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084de:	4806      	ldr	r0, [pc, #24]	@ (80084f8 <CDC_Receive_FS+0x38>)
 80084e0:	f7fe fc18 	bl	8006d14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20000214 	.word	0x20000214
 80084f4:	20000218 	.word	0x20000218
 80084f8:	200002fc 	.word	0x200002fc

080084fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800850c:	4b0d      	ldr	r3, [pc, #52]	@ (8008544 <CDC_Transmit_FS+0x48>)
 800850e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008512:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800851a:	2b00      	cmp	r3, #0
 800851c:	d001      	beq.n	8008522 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800851e:	2301      	movs	r3, #1
 8008520:	e00b      	b.n	800853a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008522:	887b      	ldrh	r3, [r7, #2]
 8008524:	461a      	mov	r2, r3
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	4806      	ldr	r0, [pc, #24]	@ (8008544 <CDC_Transmit_FS+0x48>)
 800852a:	f7fe fb73 	bl	8006c14 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800852e:	4805      	ldr	r0, [pc, #20]	@ (8008544 <CDC_Transmit_FS+0x48>)
 8008530:	f7fe fbb0 	bl	8006c94 <USBD_CDC_TransmitPacket>
 8008534:	4603      	mov	r3, r0
 8008536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	200002fc 	.word	0x200002fc

08008548 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	4613      	mov	r3, r2
 8008554:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800855a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800855e:	4618      	mov	r0, r3
 8008560:	371c      	adds	r7, #28
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
	...

0800856c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	6039      	str	r1, [r7, #0]
 8008576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2212      	movs	r2, #18
 800857c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800857e:	4b03      	ldr	r3, [pc, #12]	@ (800858c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008580:	4618      	mov	r0, r3
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	200000c8 	.word	0x200000c8

08008590 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	6039      	str	r1, [r7, #0]
 800859a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	2204      	movs	r2, #4
 80085a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085a2:	4b03      	ldr	r3, [pc, #12]	@ (80085b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	200000dc 	.word	0x200000dc

080085b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	4603      	mov	r3, r0
 80085bc:	6039      	str	r1, [r7, #0]
 80085be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085c0:	79fb      	ldrb	r3, [r7, #7]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d105      	bne.n	80085d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	4907      	ldr	r1, [pc, #28]	@ (80085e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80085ca:	4808      	ldr	r0, [pc, #32]	@ (80085ec <USBD_FS_ProductStrDescriptor+0x38>)
 80085cc:	f7ff fdee 	bl	80081ac <USBD_GetString>
 80085d0:	e004      	b.n	80085dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	4904      	ldr	r1, [pc, #16]	@ (80085e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80085d6:	4805      	ldr	r0, [pc, #20]	@ (80085ec <USBD_FS_ProductStrDescriptor+0x38>)
 80085d8:	f7ff fde8 	bl	80081ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80085dc:	4b02      	ldr	r3, [pc, #8]	@ (80085e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20000dd8 	.word	0x20000dd8
 80085ec:	08009770 	.word	0x08009770

080085f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	6039      	str	r1, [r7, #0]
 80085fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	4904      	ldr	r1, [pc, #16]	@ (8008610 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008600:	4804      	ldr	r0, [pc, #16]	@ (8008614 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008602:	f7ff fdd3 	bl	80081ac <USBD_GetString>
  return USBD_StrDesc;
 8008606:	4b02      	ldr	r3, [pc, #8]	@ (8008610 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	20000dd8 	.word	0x20000dd8
 8008614:	08009788 	.word	0x08009788

08008618 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	6039      	str	r1, [r7, #0]
 8008622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	221a      	movs	r2, #26
 8008628:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800862a:	f000 f843 	bl	80086b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800862e:	4b02      	ldr	r3, [pc, #8]	@ (8008638 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008630:	4618      	mov	r0, r3
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	200000e0 	.word	0x200000e0

0800863c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	4603      	mov	r3, r0
 8008644:	6039      	str	r1, [r7, #0]
 8008646:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008648:	79fb      	ldrb	r3, [r7, #7]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d105      	bne.n	800865a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	4907      	ldr	r1, [pc, #28]	@ (8008670 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008652:	4808      	ldr	r0, [pc, #32]	@ (8008674 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008654:	f7ff fdaa 	bl	80081ac <USBD_GetString>
 8008658:	e004      	b.n	8008664 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	4904      	ldr	r1, [pc, #16]	@ (8008670 <USBD_FS_ConfigStrDescriptor+0x34>)
 800865e:	4805      	ldr	r0, [pc, #20]	@ (8008674 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008660:	f7ff fda4 	bl	80081ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008664:	4b02      	ldr	r3, [pc, #8]	@ (8008670 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008666:	4618      	mov	r0, r3
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000dd8 	.word	0x20000dd8
 8008674:	0800979c 	.word	0x0800979c

08008678 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	6039      	str	r1, [r7, #0]
 8008682:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d105      	bne.n	8008696 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	4907      	ldr	r1, [pc, #28]	@ (80086ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800868e:	4808      	ldr	r0, [pc, #32]	@ (80086b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008690:	f7ff fd8c 	bl	80081ac <USBD_GetString>
 8008694:	e004      	b.n	80086a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	4904      	ldr	r1, [pc, #16]	@ (80086ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800869a:	4805      	ldr	r0, [pc, #20]	@ (80086b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800869c:	f7ff fd86 	bl	80081ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80086a0:	4b02      	ldr	r3, [pc, #8]	@ (80086ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20000dd8 	.word	0x20000dd8
 80086b0:	080097a8 	.word	0x080097a8

080086b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086ba:	4b0f      	ldr	r3, [pc, #60]	@ (80086f8 <Get_SerialNum+0x44>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086c0:	4b0e      	ldr	r3, [pc, #56]	@ (80086fc <Get_SerialNum+0x48>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008700 <Get_SerialNum+0x4c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4413      	add	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086da:	2208      	movs	r2, #8
 80086dc:	4909      	ldr	r1, [pc, #36]	@ (8008704 <Get_SerialNum+0x50>)
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 f814 	bl	800870c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086e4:	2204      	movs	r2, #4
 80086e6:	4908      	ldr	r1, [pc, #32]	@ (8008708 <Get_SerialNum+0x54>)
 80086e8:	68b8      	ldr	r0, [r7, #8]
 80086ea:	f000 f80f 	bl	800870c <IntToUnicode>
  }
}
 80086ee:	bf00      	nop
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	1fff7a10 	.word	0x1fff7a10
 80086fc:	1fff7a14 	.word	0x1fff7a14
 8008700:	1fff7a18 	.word	0x1fff7a18
 8008704:	200000e2 	.word	0x200000e2
 8008708:	200000f2 	.word	0x200000f2

0800870c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800870c:	b480      	push	{r7}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	4613      	mov	r3, r2
 8008718:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800871e:	2300      	movs	r3, #0
 8008720:	75fb      	strb	r3, [r7, #23]
 8008722:	e027      	b.n	8008774 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	0f1b      	lsrs	r3, r3, #28
 8008728:	2b09      	cmp	r3, #9
 800872a:	d80b      	bhi.n	8008744 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	0f1b      	lsrs	r3, r3, #28
 8008730:	b2da      	uxtb	r2, r3
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	4619      	mov	r1, r3
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	440b      	add	r3, r1
 800873c:	3230      	adds	r2, #48	@ 0x30
 800873e:	b2d2      	uxtb	r2, r2
 8008740:	701a      	strb	r2, [r3, #0]
 8008742:	e00a      	b.n	800875a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	0f1b      	lsrs	r3, r3, #28
 8008748:	b2da      	uxtb	r2, r3
 800874a:	7dfb      	ldrb	r3, [r7, #23]
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	4619      	mov	r1, r3
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	440b      	add	r3, r1
 8008754:	3237      	adds	r2, #55	@ 0x37
 8008756:	b2d2      	uxtb	r2, r2
 8008758:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	011b      	lsls	r3, r3, #4
 800875e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008760:	7dfb      	ldrb	r3, [r7, #23]
 8008762:	005b      	lsls	r3, r3, #1
 8008764:	3301      	adds	r3, #1
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	4413      	add	r3, r2
 800876a:	2200      	movs	r2, #0
 800876c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	3301      	adds	r3, #1
 8008772:	75fb      	strb	r3, [r7, #23]
 8008774:	7dfa      	ldrb	r2, [r7, #23]
 8008776:	79fb      	ldrb	r3, [r7, #7]
 8008778:	429a      	cmp	r2, r3
 800877a:	d3d3      	bcc.n	8008724 <IntToUnicode+0x18>
  }
}
 800877c:	bf00      	nop
 800877e:	bf00      	nop
 8008780:	371c      	adds	r7, #28
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
	...

0800878c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08a      	sub	sp, #40	@ 0x28
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008794:	f107 0314 	add.w	r3, r7, #20
 8008798:	2200      	movs	r2, #0
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	605a      	str	r2, [r3, #4]
 800879e:	609a      	str	r2, [r3, #8]
 80087a0:	60da      	str	r2, [r3, #12]
 80087a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087ac:	d13a      	bne.n	8008824 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ae:	2300      	movs	r3, #0
 80087b0:	613b      	str	r3, [r7, #16]
 80087b2:	4b1e      	ldr	r3, [pc, #120]	@ (800882c <HAL_PCD_MspInit+0xa0>)
 80087b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b6:	4a1d      	ldr	r2, [pc, #116]	@ (800882c <HAL_PCD_MspInit+0xa0>)
 80087b8:	f043 0301 	orr.w	r3, r3, #1
 80087bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80087be:	4b1b      	ldr	r3, [pc, #108]	@ (800882c <HAL_PCD_MspInit+0xa0>)
 80087c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	613b      	str	r3, [r7, #16]
 80087c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80087ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80087ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087d0:	2302      	movs	r3, #2
 80087d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d4:	2300      	movs	r3, #0
 80087d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087d8:	2303      	movs	r3, #3
 80087da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087dc:	230a      	movs	r3, #10
 80087de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087e0:	f107 0314 	add.w	r3, r7, #20
 80087e4:	4619      	mov	r1, r3
 80087e6:	4812      	ldr	r0, [pc, #72]	@ (8008830 <HAL_PCD_MspInit+0xa4>)
 80087e8:	f7f9 fc46 	bl	8002078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087ec:	4b0f      	ldr	r3, [pc, #60]	@ (800882c <HAL_PCD_MspInit+0xa0>)
 80087ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087f0:	4a0e      	ldr	r2, [pc, #56]	@ (800882c <HAL_PCD_MspInit+0xa0>)
 80087f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087f6:	6353      	str	r3, [r2, #52]	@ 0x34
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	4b0b      	ldr	r3, [pc, #44]	@ (800882c <HAL_PCD_MspInit+0xa0>)
 80087fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008800:	4a0a      	ldr	r2, [pc, #40]	@ (800882c <HAL_PCD_MspInit+0xa0>)
 8008802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008806:	6453      	str	r3, [r2, #68]	@ 0x44
 8008808:	4b08      	ldr	r3, [pc, #32]	@ (800882c <HAL_PCD_MspInit+0xa0>)
 800880a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800880c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008810:	60fb      	str	r3, [r7, #12]
 8008812:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008814:	2200      	movs	r2, #0
 8008816:	2100      	movs	r1, #0
 8008818:	2043      	movs	r0, #67	@ 0x43
 800881a:	f7f9 f886 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800881e:	2043      	movs	r0, #67	@ 0x43
 8008820:	f7f9 f89f 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008824:	bf00      	nop
 8008826:	3728      	adds	r7, #40	@ 0x28
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	40023800 	.word	0x40023800
 8008830:	40020000 	.word	0x40020000

08008834 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008848:	4619      	mov	r1, r3
 800884a:	4610      	mov	r0, r2
 800884c:	f7fe fb4b 	bl	8006ee6 <USBD_LL_SetupStage>
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800886a:	78fa      	ldrb	r2, [r7, #3]
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	4613      	mov	r3, r2
 8008870:	00db      	lsls	r3, r3, #3
 8008872:	4413      	add	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	78fb      	ldrb	r3, [r7, #3]
 8008880:	4619      	mov	r1, r3
 8008882:	f7fe fb85 	bl	8006f90 <USBD_LL_DataOutStage>
}
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	460b      	mov	r3, r1
 8008898:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80088a0:	78fa      	ldrb	r2, [r7, #3]
 80088a2:	6879      	ldr	r1, [r7, #4]
 80088a4:	4613      	mov	r3, r2
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	440b      	add	r3, r1
 80088ae:	3320      	adds	r3, #32
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	78fb      	ldrb	r3, [r7, #3]
 80088b4:	4619      	mov	r1, r3
 80088b6:	f7fe fc1e 	bl	80070f6 <USBD_LL_DataInStage>
}
 80088ba:	bf00      	nop
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fe fd58 	bl	8007386 <USBD_LL_SOF>
}
 80088d6:	bf00      	nop
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088e6:	2301      	movs	r3, #1
 80088e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	79db      	ldrb	r3, [r3, #7]
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d001      	beq.n	80088f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80088f2:	f7f8 f913 	bl	8000b1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088fc:	7bfa      	ldrb	r2, [r7, #15]
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe fcfc 	bl	80072fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800890c:	4618      	mov	r0, r3
 800890e:	f7fe fca4 	bl	800725a <USBD_LL_Reset>
}
 8008912:	bf00      	nop
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe fcf7 	bl	800731e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	6812      	ldr	r2, [r2, #0]
 800893e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008942:	f043 0301 	orr.w	r3, r3, #1
 8008946:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	7adb      	ldrb	r3, [r3, #11]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008950:	4b04      	ldr	r3, [pc, #16]	@ (8008964 <HAL_PCD_SuspendCallback+0x48>)
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	4a03      	ldr	r2, [pc, #12]	@ (8008964 <HAL_PCD_SuspendCallback+0x48>)
 8008956:	f043 0306 	orr.w	r3, r3, #6
 800895a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	e000ed00 	.word	0xe000ed00

08008968 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008976:	4618      	mov	r0, r3
 8008978:	f7fe fced 	bl	8007356 <USBD_LL_Resume>
}
 800897c:	bf00      	nop
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008996:	78fa      	ldrb	r2, [r7, #3]
 8008998:	4611      	mov	r1, r2
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe fd45 	bl	800742a <USBD_LL_IsoOUTIncomplete>
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	460b      	mov	r3, r1
 80089b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	4611      	mov	r1, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe fd01 	bl	80073c6 <USBD_LL_IsoINIncomplete>
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fd57 	bl	800748e <USBD_LL_DevConnected>
}
 80089e0:	bf00      	nop
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fe fd54 	bl	80074a4 <USBD_LL_DevDisconnected>
}
 80089fc:	bf00      	nop
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d13c      	bne.n	8008a8e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a14:	4a20      	ldr	r2, [pc, #128]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a20:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a24:	4b1c      	ldr	r3, [pc, #112]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008a2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a2e:	2204      	movs	r2, #4
 8008a30:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a32:	4b19      	ldr	r3, [pc, #100]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a34:	2202      	movs	r2, #2
 8008a36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a38:	4b17      	ldr	r3, [pc, #92]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a3e:	4b16      	ldr	r3, [pc, #88]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a40:	2202      	movs	r2, #2
 8008a42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a44:	4b14      	ldr	r3, [pc, #80]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a4a:	4b13      	ldr	r3, [pc, #76]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a50:	4b11      	ldr	r3, [pc, #68]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a56:	4b10      	ldr	r3, [pc, #64]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a62:	480d      	ldr	r0, [pc, #52]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a64:	f7f9 fcbf 	bl	80023e6 <HAL_PCD_Init>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a6e:	f7f8 f855 	bl	8000b1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a72:	2180      	movs	r1, #128	@ 0x80
 8008a74:	4808      	ldr	r0, [pc, #32]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a76:	f7fa feea 	bl	800384e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a7a:	2240      	movs	r2, #64	@ 0x40
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	4806      	ldr	r0, [pc, #24]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a80:	f7fa fe9e 	bl	80037c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a84:	2280      	movs	r2, #128	@ 0x80
 8008a86:	2101      	movs	r1, #1
 8008a88:	4803      	ldr	r0, [pc, #12]	@ (8008a98 <USBD_LL_Init+0x94>)
 8008a8a:	f7fa fe99 	bl	80037c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	20000fd8 	.word	0x20000fd8

08008a9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7f9 fda6 	bl	8002604 <HAL_PCD_Start>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 f942 	bl	8008d48 <USBD_Get_USB_Status>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	4608      	mov	r0, r1
 8008adc:	4611      	mov	r1, r2
 8008ade:	461a      	mov	r2, r3
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	70fb      	strb	r3, [r7, #3]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70bb      	strb	r3, [r7, #2]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008afa:	78bb      	ldrb	r3, [r7, #2]
 8008afc:	883a      	ldrh	r2, [r7, #0]
 8008afe:	78f9      	ldrb	r1, [r7, #3]
 8008b00:	f7fa fa7a 	bl	8002ff8 <HAL_PCD_EP_Open>
 8008b04:	4603      	mov	r3, r0
 8008b06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 f91c 	bl	8008d48 <USBD_Get_USB_Status>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b38:	78fa      	ldrb	r2, [r7, #3]
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fa fac3 	bl	80030c8 <HAL_PCD_EP_Close>
 8008b42:	4603      	mov	r3, r0
 8008b44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 f8fd 	bl	8008d48 <USBD_Get_USB_Status>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b76:	78fa      	ldrb	r2, [r7, #3]
 8008b78:	4611      	mov	r1, r2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fa fb7b 	bl	8003276 <HAL_PCD_EP_SetStall>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f8de 	bl	8008d48 <USBD_Get_USB_Status>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bb4:	78fa      	ldrb	r2, [r7, #3]
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fa fbbf 	bl	800333c <HAL_PCD_EP_ClrStall>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 f8bf 	bl	8008d48 <USBD_Get_USB_Status>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	da0b      	bge.n	8008c0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bf4:	78fb      	ldrb	r3, [r7, #3]
 8008bf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bfa:	68f9      	ldr	r1, [r7, #12]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	00db      	lsls	r3, r3, #3
 8008c00:	4413      	add	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	440b      	add	r3, r1
 8008c06:	3316      	adds	r3, #22
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	e00b      	b.n	8008c24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c0c:	78fb      	ldrb	r3, [r7, #3]
 8008c0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c12:	68f9      	ldr	r1, [r7, #12]
 8008c14:	4613      	mov	r3, r2
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	4413      	add	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	440b      	add	r3, r1
 8008c1e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008c22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fa f9ae 	bl	8002fb0 <HAL_PCD_SetAddress>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f874 	bl	8008d48 <USBD_Get_USB_Status>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b086      	sub	sp, #24
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	603b      	str	r3, [r7, #0]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c8c:	7af9      	ldrb	r1, [r7, #11]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	f7fa fab6 	bl	8003202 <HAL_PCD_EP_Transmit>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 f853 	bl	8008d48 <USBD_Get_USB_Status>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ca6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	607a      	str	r2, [r7, #4]
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cce:	7af9      	ldrb	r1, [r7, #11]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	f7fa fa42 	bl	800315c <HAL_PCD_EP_Receive>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f832 	bl	8008d48 <USBD_Get_USB_Status>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ce8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d04:	78fa      	ldrb	r2, [r7, #3]
 8008d06:	4611      	mov	r1, r2
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fa fa62 	bl	80031d2 <HAL_PCD_EP_GetRxCount>
 8008d0e:	4603      	mov	r3, r0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d20:	4b03      	ldr	r3, [pc, #12]	@ (8008d30 <USBD_static_malloc+0x18>)
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	200014bc 	.word	0x200014bc

08008d34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]

}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d56:	79fb      	ldrb	r3, [r7, #7]
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d817      	bhi.n	8008d8c <USBD_Get_USB_Status+0x44>
 8008d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d64 <USBD_Get_USB_Status+0x1c>)
 8008d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d62:	bf00      	nop
 8008d64:	08008d75 	.word	0x08008d75
 8008d68:	08008d7b 	.word	0x08008d7b
 8008d6c:	08008d81 	.word	0x08008d81
 8008d70:	08008d87 	.word	0x08008d87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]
    break;
 8008d78:	e00b      	b.n	8008d92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d7e:	e008      	b.n	8008d92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d80:	2301      	movs	r3, #1
 8008d82:	73fb      	strb	r3, [r7, #15]
    break;
 8008d84:	e005      	b.n	8008d92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d86:	2303      	movs	r3, #3
 8008d88:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8a:	e002      	b.n	8008d92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d90:	bf00      	nop
  }
  return usb_status;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <_vsniprintf_r>:
 8008da0:	b530      	push	{r4, r5, lr}
 8008da2:	4614      	mov	r4, r2
 8008da4:	2c00      	cmp	r4, #0
 8008da6:	b09b      	sub	sp, #108	@ 0x6c
 8008da8:	4605      	mov	r5, r0
 8008daa:	461a      	mov	r2, r3
 8008dac:	da05      	bge.n	8008dba <_vsniprintf_r+0x1a>
 8008dae:	238b      	movs	r3, #139	@ 0x8b
 8008db0:	6003      	str	r3, [r0, #0]
 8008db2:	f04f 30ff 	mov.w	r0, #4294967295
 8008db6:	b01b      	add	sp, #108	@ 0x6c
 8008db8:	bd30      	pop	{r4, r5, pc}
 8008dba:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008dbe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008dc2:	bf14      	ite	ne
 8008dc4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008dc8:	4623      	moveq	r3, r4
 8008dca:	9302      	str	r3, [sp, #8]
 8008dcc:	9305      	str	r3, [sp, #20]
 8008dce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008dd2:	9100      	str	r1, [sp, #0]
 8008dd4:	9104      	str	r1, [sp, #16]
 8008dd6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008dda:	4669      	mov	r1, sp
 8008ddc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008dde:	f000 f9a1 	bl	8009124 <_svfiprintf_r>
 8008de2:	1c43      	adds	r3, r0, #1
 8008de4:	bfbc      	itt	lt
 8008de6:	238b      	movlt	r3, #139	@ 0x8b
 8008de8:	602b      	strlt	r3, [r5, #0]
 8008dea:	2c00      	cmp	r4, #0
 8008dec:	d0e3      	beq.n	8008db6 <_vsniprintf_r+0x16>
 8008dee:	9b00      	ldr	r3, [sp, #0]
 8008df0:	2200      	movs	r2, #0
 8008df2:	701a      	strb	r2, [r3, #0]
 8008df4:	e7df      	b.n	8008db6 <_vsniprintf_r+0x16>
	...

08008df8 <vsniprintf>:
 8008df8:	b507      	push	{r0, r1, r2, lr}
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	460a      	mov	r2, r1
 8008e00:	4601      	mov	r1, r0
 8008e02:	4803      	ldr	r0, [pc, #12]	@ (8008e10 <vsniprintf+0x18>)
 8008e04:	6800      	ldr	r0, [r0, #0]
 8008e06:	f7ff ffcb 	bl	8008da0 <_vsniprintf_r>
 8008e0a:	b003      	add	sp, #12
 8008e0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e10:	200000fc 	.word	0x200000fc

08008e14 <memset>:
 8008e14:	4402      	add	r2, r0
 8008e16:	4603      	mov	r3, r0
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d100      	bne.n	8008e1e <memset+0xa>
 8008e1c:	4770      	bx	lr
 8008e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e22:	e7f9      	b.n	8008e18 <memset+0x4>

08008e24 <__errno>:
 8008e24:	4b01      	ldr	r3, [pc, #4]	@ (8008e2c <__errno+0x8>)
 8008e26:	6818      	ldr	r0, [r3, #0]
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	200000fc 	.word	0x200000fc

08008e30 <__libc_init_array>:
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	4d0d      	ldr	r5, [pc, #52]	@ (8008e68 <__libc_init_array+0x38>)
 8008e34:	4c0d      	ldr	r4, [pc, #52]	@ (8008e6c <__libc_init_array+0x3c>)
 8008e36:	1b64      	subs	r4, r4, r5
 8008e38:	10a4      	asrs	r4, r4, #2
 8008e3a:	2600      	movs	r6, #0
 8008e3c:	42a6      	cmp	r6, r4
 8008e3e:	d109      	bne.n	8008e54 <__libc_init_array+0x24>
 8008e40:	4d0b      	ldr	r5, [pc, #44]	@ (8008e70 <__libc_init_array+0x40>)
 8008e42:	4c0c      	ldr	r4, [pc, #48]	@ (8008e74 <__libc_init_array+0x44>)
 8008e44:	f000 fc66 	bl	8009714 <_init>
 8008e48:	1b64      	subs	r4, r4, r5
 8008e4a:	10a4      	asrs	r4, r4, #2
 8008e4c:	2600      	movs	r6, #0
 8008e4e:	42a6      	cmp	r6, r4
 8008e50:	d105      	bne.n	8008e5e <__libc_init_array+0x2e>
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e58:	4798      	blx	r3
 8008e5a:	3601      	adds	r6, #1
 8008e5c:	e7ee      	b.n	8008e3c <__libc_init_array+0xc>
 8008e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e62:	4798      	blx	r3
 8008e64:	3601      	adds	r6, #1
 8008e66:	e7f2      	b.n	8008e4e <__libc_init_array+0x1e>
 8008e68:	08009814 	.word	0x08009814
 8008e6c:	08009814 	.word	0x08009814
 8008e70:	08009814 	.word	0x08009814
 8008e74:	08009818 	.word	0x08009818

08008e78 <__retarget_lock_acquire_recursive>:
 8008e78:	4770      	bx	lr

08008e7a <__retarget_lock_release_recursive>:
 8008e7a:	4770      	bx	lr

08008e7c <_free_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	4605      	mov	r5, r0
 8008e80:	2900      	cmp	r1, #0
 8008e82:	d041      	beq.n	8008f08 <_free_r+0x8c>
 8008e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e88:	1f0c      	subs	r4, r1, #4
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	bfb8      	it	lt
 8008e8e:	18e4      	addlt	r4, r4, r3
 8008e90:	f000 f8e0 	bl	8009054 <__malloc_lock>
 8008e94:	4a1d      	ldr	r2, [pc, #116]	@ (8008f0c <_free_r+0x90>)
 8008e96:	6813      	ldr	r3, [r2, #0]
 8008e98:	b933      	cbnz	r3, 8008ea8 <_free_r+0x2c>
 8008e9a:	6063      	str	r3, [r4, #4]
 8008e9c:	6014      	str	r4, [r2, #0]
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ea4:	f000 b8dc 	b.w	8009060 <__malloc_unlock>
 8008ea8:	42a3      	cmp	r3, r4
 8008eaa:	d908      	bls.n	8008ebe <_free_r+0x42>
 8008eac:	6820      	ldr	r0, [r4, #0]
 8008eae:	1821      	adds	r1, r4, r0
 8008eb0:	428b      	cmp	r3, r1
 8008eb2:	bf01      	itttt	eq
 8008eb4:	6819      	ldreq	r1, [r3, #0]
 8008eb6:	685b      	ldreq	r3, [r3, #4]
 8008eb8:	1809      	addeq	r1, r1, r0
 8008eba:	6021      	streq	r1, [r4, #0]
 8008ebc:	e7ed      	b.n	8008e9a <_free_r+0x1e>
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	b10b      	cbz	r3, 8008ec8 <_free_r+0x4c>
 8008ec4:	42a3      	cmp	r3, r4
 8008ec6:	d9fa      	bls.n	8008ebe <_free_r+0x42>
 8008ec8:	6811      	ldr	r1, [r2, #0]
 8008eca:	1850      	adds	r0, r2, r1
 8008ecc:	42a0      	cmp	r0, r4
 8008ece:	d10b      	bne.n	8008ee8 <_free_r+0x6c>
 8008ed0:	6820      	ldr	r0, [r4, #0]
 8008ed2:	4401      	add	r1, r0
 8008ed4:	1850      	adds	r0, r2, r1
 8008ed6:	4283      	cmp	r3, r0
 8008ed8:	6011      	str	r1, [r2, #0]
 8008eda:	d1e0      	bne.n	8008e9e <_free_r+0x22>
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	6053      	str	r3, [r2, #4]
 8008ee2:	4408      	add	r0, r1
 8008ee4:	6010      	str	r0, [r2, #0]
 8008ee6:	e7da      	b.n	8008e9e <_free_r+0x22>
 8008ee8:	d902      	bls.n	8008ef0 <_free_r+0x74>
 8008eea:	230c      	movs	r3, #12
 8008eec:	602b      	str	r3, [r5, #0]
 8008eee:	e7d6      	b.n	8008e9e <_free_r+0x22>
 8008ef0:	6820      	ldr	r0, [r4, #0]
 8008ef2:	1821      	adds	r1, r4, r0
 8008ef4:	428b      	cmp	r3, r1
 8008ef6:	bf04      	itt	eq
 8008ef8:	6819      	ldreq	r1, [r3, #0]
 8008efa:	685b      	ldreq	r3, [r3, #4]
 8008efc:	6063      	str	r3, [r4, #4]
 8008efe:	bf04      	itt	eq
 8008f00:	1809      	addeq	r1, r1, r0
 8008f02:	6021      	streq	r1, [r4, #0]
 8008f04:	6054      	str	r4, [r2, #4]
 8008f06:	e7ca      	b.n	8008e9e <_free_r+0x22>
 8008f08:	bd38      	pop	{r3, r4, r5, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20001820 	.word	0x20001820

08008f10 <sbrk_aligned>:
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	4e0f      	ldr	r6, [pc, #60]	@ (8008f50 <sbrk_aligned+0x40>)
 8008f14:	460c      	mov	r4, r1
 8008f16:	6831      	ldr	r1, [r6, #0]
 8008f18:	4605      	mov	r5, r0
 8008f1a:	b911      	cbnz	r1, 8008f22 <sbrk_aligned+0x12>
 8008f1c:	f000 fba6 	bl	800966c <_sbrk_r>
 8008f20:	6030      	str	r0, [r6, #0]
 8008f22:	4621      	mov	r1, r4
 8008f24:	4628      	mov	r0, r5
 8008f26:	f000 fba1 	bl	800966c <_sbrk_r>
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	d103      	bne.n	8008f36 <sbrk_aligned+0x26>
 8008f2e:	f04f 34ff 	mov.w	r4, #4294967295
 8008f32:	4620      	mov	r0, r4
 8008f34:	bd70      	pop	{r4, r5, r6, pc}
 8008f36:	1cc4      	adds	r4, r0, #3
 8008f38:	f024 0403 	bic.w	r4, r4, #3
 8008f3c:	42a0      	cmp	r0, r4
 8008f3e:	d0f8      	beq.n	8008f32 <sbrk_aligned+0x22>
 8008f40:	1a21      	subs	r1, r4, r0
 8008f42:	4628      	mov	r0, r5
 8008f44:	f000 fb92 	bl	800966c <_sbrk_r>
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d1f2      	bne.n	8008f32 <sbrk_aligned+0x22>
 8008f4c:	e7ef      	b.n	8008f2e <sbrk_aligned+0x1e>
 8008f4e:	bf00      	nop
 8008f50:	2000181c 	.word	0x2000181c

08008f54 <_malloc_r>:
 8008f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f58:	1ccd      	adds	r5, r1, #3
 8008f5a:	f025 0503 	bic.w	r5, r5, #3
 8008f5e:	3508      	adds	r5, #8
 8008f60:	2d0c      	cmp	r5, #12
 8008f62:	bf38      	it	cc
 8008f64:	250c      	movcc	r5, #12
 8008f66:	2d00      	cmp	r5, #0
 8008f68:	4606      	mov	r6, r0
 8008f6a:	db01      	blt.n	8008f70 <_malloc_r+0x1c>
 8008f6c:	42a9      	cmp	r1, r5
 8008f6e:	d904      	bls.n	8008f7a <_malloc_r+0x26>
 8008f70:	230c      	movs	r3, #12
 8008f72:	6033      	str	r3, [r6, #0]
 8008f74:	2000      	movs	r0, #0
 8008f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009050 <_malloc_r+0xfc>
 8008f7e:	f000 f869 	bl	8009054 <__malloc_lock>
 8008f82:	f8d8 3000 	ldr.w	r3, [r8]
 8008f86:	461c      	mov	r4, r3
 8008f88:	bb44      	cbnz	r4, 8008fdc <_malloc_r+0x88>
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f7ff ffbf 	bl	8008f10 <sbrk_aligned>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	4604      	mov	r4, r0
 8008f96:	d158      	bne.n	800904a <_malloc_r+0xf6>
 8008f98:	f8d8 4000 	ldr.w	r4, [r8]
 8008f9c:	4627      	mov	r7, r4
 8008f9e:	2f00      	cmp	r7, #0
 8008fa0:	d143      	bne.n	800902a <_malloc_r+0xd6>
 8008fa2:	2c00      	cmp	r4, #0
 8008fa4:	d04b      	beq.n	800903e <_malloc_r+0xea>
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	4639      	mov	r1, r7
 8008faa:	4630      	mov	r0, r6
 8008fac:	eb04 0903 	add.w	r9, r4, r3
 8008fb0:	f000 fb5c 	bl	800966c <_sbrk_r>
 8008fb4:	4581      	cmp	r9, r0
 8008fb6:	d142      	bne.n	800903e <_malloc_r+0xea>
 8008fb8:	6821      	ldr	r1, [r4, #0]
 8008fba:	1a6d      	subs	r5, r5, r1
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7ff ffa6 	bl	8008f10 <sbrk_aligned>
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d03a      	beq.n	800903e <_malloc_r+0xea>
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	442b      	add	r3, r5
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	f8d8 3000 	ldr.w	r3, [r8]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	bb62      	cbnz	r2, 8009030 <_malloc_r+0xdc>
 8008fd6:	f8c8 7000 	str.w	r7, [r8]
 8008fda:	e00f      	b.n	8008ffc <_malloc_r+0xa8>
 8008fdc:	6822      	ldr	r2, [r4, #0]
 8008fde:	1b52      	subs	r2, r2, r5
 8008fe0:	d420      	bmi.n	8009024 <_malloc_r+0xd0>
 8008fe2:	2a0b      	cmp	r2, #11
 8008fe4:	d917      	bls.n	8009016 <_malloc_r+0xc2>
 8008fe6:	1961      	adds	r1, r4, r5
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	6025      	str	r5, [r4, #0]
 8008fec:	bf18      	it	ne
 8008fee:	6059      	strne	r1, [r3, #4]
 8008ff0:	6863      	ldr	r3, [r4, #4]
 8008ff2:	bf08      	it	eq
 8008ff4:	f8c8 1000 	streq.w	r1, [r8]
 8008ff8:	5162      	str	r2, [r4, r5]
 8008ffa:	604b      	str	r3, [r1, #4]
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f000 f82f 	bl	8009060 <__malloc_unlock>
 8009002:	f104 000b 	add.w	r0, r4, #11
 8009006:	1d23      	adds	r3, r4, #4
 8009008:	f020 0007 	bic.w	r0, r0, #7
 800900c:	1ac2      	subs	r2, r0, r3
 800900e:	bf1c      	itt	ne
 8009010:	1a1b      	subne	r3, r3, r0
 8009012:	50a3      	strne	r3, [r4, r2]
 8009014:	e7af      	b.n	8008f76 <_malloc_r+0x22>
 8009016:	6862      	ldr	r2, [r4, #4]
 8009018:	42a3      	cmp	r3, r4
 800901a:	bf0c      	ite	eq
 800901c:	f8c8 2000 	streq.w	r2, [r8]
 8009020:	605a      	strne	r2, [r3, #4]
 8009022:	e7eb      	b.n	8008ffc <_malloc_r+0xa8>
 8009024:	4623      	mov	r3, r4
 8009026:	6864      	ldr	r4, [r4, #4]
 8009028:	e7ae      	b.n	8008f88 <_malloc_r+0x34>
 800902a:	463c      	mov	r4, r7
 800902c:	687f      	ldr	r7, [r7, #4]
 800902e:	e7b6      	b.n	8008f9e <_malloc_r+0x4a>
 8009030:	461a      	mov	r2, r3
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	42a3      	cmp	r3, r4
 8009036:	d1fb      	bne.n	8009030 <_malloc_r+0xdc>
 8009038:	2300      	movs	r3, #0
 800903a:	6053      	str	r3, [r2, #4]
 800903c:	e7de      	b.n	8008ffc <_malloc_r+0xa8>
 800903e:	230c      	movs	r3, #12
 8009040:	6033      	str	r3, [r6, #0]
 8009042:	4630      	mov	r0, r6
 8009044:	f000 f80c 	bl	8009060 <__malloc_unlock>
 8009048:	e794      	b.n	8008f74 <_malloc_r+0x20>
 800904a:	6005      	str	r5, [r0, #0]
 800904c:	e7d6      	b.n	8008ffc <_malloc_r+0xa8>
 800904e:	bf00      	nop
 8009050:	20001820 	.word	0x20001820

08009054 <__malloc_lock>:
 8009054:	4801      	ldr	r0, [pc, #4]	@ (800905c <__malloc_lock+0x8>)
 8009056:	f7ff bf0f 	b.w	8008e78 <__retarget_lock_acquire_recursive>
 800905a:	bf00      	nop
 800905c:	20001818 	.word	0x20001818

08009060 <__malloc_unlock>:
 8009060:	4801      	ldr	r0, [pc, #4]	@ (8009068 <__malloc_unlock+0x8>)
 8009062:	f7ff bf0a 	b.w	8008e7a <__retarget_lock_release_recursive>
 8009066:	bf00      	nop
 8009068:	20001818 	.word	0x20001818

0800906c <__ssputs_r>:
 800906c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009070:	688e      	ldr	r6, [r1, #8]
 8009072:	461f      	mov	r7, r3
 8009074:	42be      	cmp	r6, r7
 8009076:	680b      	ldr	r3, [r1, #0]
 8009078:	4682      	mov	sl, r0
 800907a:	460c      	mov	r4, r1
 800907c:	4690      	mov	r8, r2
 800907e:	d82d      	bhi.n	80090dc <__ssputs_r+0x70>
 8009080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009084:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009088:	d026      	beq.n	80090d8 <__ssputs_r+0x6c>
 800908a:	6965      	ldr	r5, [r4, #20]
 800908c:	6909      	ldr	r1, [r1, #16]
 800908e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009092:	eba3 0901 	sub.w	r9, r3, r1
 8009096:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800909a:	1c7b      	adds	r3, r7, #1
 800909c:	444b      	add	r3, r9
 800909e:	106d      	asrs	r5, r5, #1
 80090a0:	429d      	cmp	r5, r3
 80090a2:	bf38      	it	cc
 80090a4:	461d      	movcc	r5, r3
 80090a6:	0553      	lsls	r3, r2, #21
 80090a8:	d527      	bpl.n	80090fa <__ssputs_r+0x8e>
 80090aa:	4629      	mov	r1, r5
 80090ac:	f7ff ff52 	bl	8008f54 <_malloc_r>
 80090b0:	4606      	mov	r6, r0
 80090b2:	b360      	cbz	r0, 800910e <__ssputs_r+0xa2>
 80090b4:	6921      	ldr	r1, [r4, #16]
 80090b6:	464a      	mov	r2, r9
 80090b8:	f000 fae8 	bl	800968c <memcpy>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090c6:	81a3      	strh	r3, [r4, #12]
 80090c8:	6126      	str	r6, [r4, #16]
 80090ca:	6165      	str	r5, [r4, #20]
 80090cc:	444e      	add	r6, r9
 80090ce:	eba5 0509 	sub.w	r5, r5, r9
 80090d2:	6026      	str	r6, [r4, #0]
 80090d4:	60a5      	str	r5, [r4, #8]
 80090d6:	463e      	mov	r6, r7
 80090d8:	42be      	cmp	r6, r7
 80090da:	d900      	bls.n	80090de <__ssputs_r+0x72>
 80090dc:	463e      	mov	r6, r7
 80090de:	6820      	ldr	r0, [r4, #0]
 80090e0:	4632      	mov	r2, r6
 80090e2:	4641      	mov	r1, r8
 80090e4:	f000 faa8 	bl	8009638 <memmove>
 80090e8:	68a3      	ldr	r3, [r4, #8]
 80090ea:	1b9b      	subs	r3, r3, r6
 80090ec:	60a3      	str	r3, [r4, #8]
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	4433      	add	r3, r6
 80090f2:	6023      	str	r3, [r4, #0]
 80090f4:	2000      	movs	r0, #0
 80090f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fa:	462a      	mov	r2, r5
 80090fc:	f000 fad4 	bl	80096a8 <_realloc_r>
 8009100:	4606      	mov	r6, r0
 8009102:	2800      	cmp	r0, #0
 8009104:	d1e0      	bne.n	80090c8 <__ssputs_r+0x5c>
 8009106:	6921      	ldr	r1, [r4, #16]
 8009108:	4650      	mov	r0, sl
 800910a:	f7ff feb7 	bl	8008e7c <_free_r>
 800910e:	230c      	movs	r3, #12
 8009110:	f8ca 3000 	str.w	r3, [sl]
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800911a:	81a3      	strh	r3, [r4, #12]
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	e7e9      	b.n	80090f6 <__ssputs_r+0x8a>
	...

08009124 <_svfiprintf_r>:
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	4698      	mov	r8, r3
 800912a:	898b      	ldrh	r3, [r1, #12]
 800912c:	061b      	lsls	r3, r3, #24
 800912e:	b09d      	sub	sp, #116	@ 0x74
 8009130:	4607      	mov	r7, r0
 8009132:	460d      	mov	r5, r1
 8009134:	4614      	mov	r4, r2
 8009136:	d510      	bpl.n	800915a <_svfiprintf_r+0x36>
 8009138:	690b      	ldr	r3, [r1, #16]
 800913a:	b973      	cbnz	r3, 800915a <_svfiprintf_r+0x36>
 800913c:	2140      	movs	r1, #64	@ 0x40
 800913e:	f7ff ff09 	bl	8008f54 <_malloc_r>
 8009142:	6028      	str	r0, [r5, #0]
 8009144:	6128      	str	r0, [r5, #16]
 8009146:	b930      	cbnz	r0, 8009156 <_svfiprintf_r+0x32>
 8009148:	230c      	movs	r3, #12
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
 8009150:	b01d      	add	sp, #116	@ 0x74
 8009152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009156:	2340      	movs	r3, #64	@ 0x40
 8009158:	616b      	str	r3, [r5, #20]
 800915a:	2300      	movs	r3, #0
 800915c:	9309      	str	r3, [sp, #36]	@ 0x24
 800915e:	2320      	movs	r3, #32
 8009160:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009164:	f8cd 800c 	str.w	r8, [sp, #12]
 8009168:	2330      	movs	r3, #48	@ 0x30
 800916a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009308 <_svfiprintf_r+0x1e4>
 800916e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009172:	f04f 0901 	mov.w	r9, #1
 8009176:	4623      	mov	r3, r4
 8009178:	469a      	mov	sl, r3
 800917a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800917e:	b10a      	cbz	r2, 8009184 <_svfiprintf_r+0x60>
 8009180:	2a25      	cmp	r2, #37	@ 0x25
 8009182:	d1f9      	bne.n	8009178 <_svfiprintf_r+0x54>
 8009184:	ebba 0b04 	subs.w	fp, sl, r4
 8009188:	d00b      	beq.n	80091a2 <_svfiprintf_r+0x7e>
 800918a:	465b      	mov	r3, fp
 800918c:	4622      	mov	r2, r4
 800918e:	4629      	mov	r1, r5
 8009190:	4638      	mov	r0, r7
 8009192:	f7ff ff6b 	bl	800906c <__ssputs_r>
 8009196:	3001      	adds	r0, #1
 8009198:	f000 80a7 	beq.w	80092ea <_svfiprintf_r+0x1c6>
 800919c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800919e:	445a      	add	r2, fp
 80091a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80091a2:	f89a 3000 	ldrb.w	r3, [sl]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 809f 	beq.w	80092ea <_svfiprintf_r+0x1c6>
 80091ac:	2300      	movs	r3, #0
 80091ae:	f04f 32ff 	mov.w	r2, #4294967295
 80091b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091b6:	f10a 0a01 	add.w	sl, sl, #1
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	9307      	str	r3, [sp, #28]
 80091be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80091c4:	4654      	mov	r4, sl
 80091c6:	2205      	movs	r2, #5
 80091c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091cc:	484e      	ldr	r0, [pc, #312]	@ (8009308 <_svfiprintf_r+0x1e4>)
 80091ce:	f7f7 f807 	bl	80001e0 <memchr>
 80091d2:	9a04      	ldr	r2, [sp, #16]
 80091d4:	b9d8      	cbnz	r0, 800920e <_svfiprintf_r+0xea>
 80091d6:	06d0      	lsls	r0, r2, #27
 80091d8:	bf44      	itt	mi
 80091da:	2320      	movmi	r3, #32
 80091dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091e0:	0711      	lsls	r1, r2, #28
 80091e2:	bf44      	itt	mi
 80091e4:	232b      	movmi	r3, #43	@ 0x2b
 80091e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091ea:	f89a 3000 	ldrb.w	r3, [sl]
 80091ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80091f0:	d015      	beq.n	800921e <_svfiprintf_r+0xfa>
 80091f2:	9a07      	ldr	r2, [sp, #28]
 80091f4:	4654      	mov	r4, sl
 80091f6:	2000      	movs	r0, #0
 80091f8:	f04f 0c0a 	mov.w	ip, #10
 80091fc:	4621      	mov	r1, r4
 80091fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009202:	3b30      	subs	r3, #48	@ 0x30
 8009204:	2b09      	cmp	r3, #9
 8009206:	d94b      	bls.n	80092a0 <_svfiprintf_r+0x17c>
 8009208:	b1b0      	cbz	r0, 8009238 <_svfiprintf_r+0x114>
 800920a:	9207      	str	r2, [sp, #28]
 800920c:	e014      	b.n	8009238 <_svfiprintf_r+0x114>
 800920e:	eba0 0308 	sub.w	r3, r0, r8
 8009212:	fa09 f303 	lsl.w	r3, r9, r3
 8009216:	4313      	orrs	r3, r2
 8009218:	9304      	str	r3, [sp, #16]
 800921a:	46a2      	mov	sl, r4
 800921c:	e7d2      	b.n	80091c4 <_svfiprintf_r+0xa0>
 800921e:	9b03      	ldr	r3, [sp, #12]
 8009220:	1d19      	adds	r1, r3, #4
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	9103      	str	r1, [sp, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	bfbb      	ittet	lt
 800922a:	425b      	neglt	r3, r3
 800922c:	f042 0202 	orrlt.w	r2, r2, #2
 8009230:	9307      	strge	r3, [sp, #28]
 8009232:	9307      	strlt	r3, [sp, #28]
 8009234:	bfb8      	it	lt
 8009236:	9204      	strlt	r2, [sp, #16]
 8009238:	7823      	ldrb	r3, [r4, #0]
 800923a:	2b2e      	cmp	r3, #46	@ 0x2e
 800923c:	d10a      	bne.n	8009254 <_svfiprintf_r+0x130>
 800923e:	7863      	ldrb	r3, [r4, #1]
 8009240:	2b2a      	cmp	r3, #42	@ 0x2a
 8009242:	d132      	bne.n	80092aa <_svfiprintf_r+0x186>
 8009244:	9b03      	ldr	r3, [sp, #12]
 8009246:	1d1a      	adds	r2, r3, #4
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	9203      	str	r2, [sp, #12]
 800924c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009250:	3402      	adds	r4, #2
 8009252:	9305      	str	r3, [sp, #20]
 8009254:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009318 <_svfiprintf_r+0x1f4>
 8009258:	7821      	ldrb	r1, [r4, #0]
 800925a:	2203      	movs	r2, #3
 800925c:	4650      	mov	r0, sl
 800925e:	f7f6 ffbf 	bl	80001e0 <memchr>
 8009262:	b138      	cbz	r0, 8009274 <_svfiprintf_r+0x150>
 8009264:	9b04      	ldr	r3, [sp, #16]
 8009266:	eba0 000a 	sub.w	r0, r0, sl
 800926a:	2240      	movs	r2, #64	@ 0x40
 800926c:	4082      	lsls	r2, r0
 800926e:	4313      	orrs	r3, r2
 8009270:	3401      	adds	r4, #1
 8009272:	9304      	str	r3, [sp, #16]
 8009274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009278:	4824      	ldr	r0, [pc, #144]	@ (800930c <_svfiprintf_r+0x1e8>)
 800927a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800927e:	2206      	movs	r2, #6
 8009280:	f7f6 ffae 	bl	80001e0 <memchr>
 8009284:	2800      	cmp	r0, #0
 8009286:	d036      	beq.n	80092f6 <_svfiprintf_r+0x1d2>
 8009288:	4b21      	ldr	r3, [pc, #132]	@ (8009310 <_svfiprintf_r+0x1ec>)
 800928a:	bb1b      	cbnz	r3, 80092d4 <_svfiprintf_r+0x1b0>
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	3307      	adds	r3, #7
 8009290:	f023 0307 	bic.w	r3, r3, #7
 8009294:	3308      	adds	r3, #8
 8009296:	9303      	str	r3, [sp, #12]
 8009298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929a:	4433      	add	r3, r6
 800929c:	9309      	str	r3, [sp, #36]	@ 0x24
 800929e:	e76a      	b.n	8009176 <_svfiprintf_r+0x52>
 80092a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80092a4:	460c      	mov	r4, r1
 80092a6:	2001      	movs	r0, #1
 80092a8:	e7a8      	b.n	80091fc <_svfiprintf_r+0xd8>
 80092aa:	2300      	movs	r3, #0
 80092ac:	3401      	adds	r4, #1
 80092ae:	9305      	str	r3, [sp, #20]
 80092b0:	4619      	mov	r1, r3
 80092b2:	f04f 0c0a 	mov.w	ip, #10
 80092b6:	4620      	mov	r0, r4
 80092b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092bc:	3a30      	subs	r2, #48	@ 0x30
 80092be:	2a09      	cmp	r2, #9
 80092c0:	d903      	bls.n	80092ca <_svfiprintf_r+0x1a6>
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d0c6      	beq.n	8009254 <_svfiprintf_r+0x130>
 80092c6:	9105      	str	r1, [sp, #20]
 80092c8:	e7c4      	b.n	8009254 <_svfiprintf_r+0x130>
 80092ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80092ce:	4604      	mov	r4, r0
 80092d0:	2301      	movs	r3, #1
 80092d2:	e7f0      	b.n	80092b6 <_svfiprintf_r+0x192>
 80092d4:	ab03      	add	r3, sp, #12
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	462a      	mov	r2, r5
 80092da:	4b0e      	ldr	r3, [pc, #56]	@ (8009314 <_svfiprintf_r+0x1f0>)
 80092dc:	a904      	add	r1, sp, #16
 80092de:	4638      	mov	r0, r7
 80092e0:	f3af 8000 	nop.w
 80092e4:	1c42      	adds	r2, r0, #1
 80092e6:	4606      	mov	r6, r0
 80092e8:	d1d6      	bne.n	8009298 <_svfiprintf_r+0x174>
 80092ea:	89ab      	ldrh	r3, [r5, #12]
 80092ec:	065b      	lsls	r3, r3, #25
 80092ee:	f53f af2d 	bmi.w	800914c <_svfiprintf_r+0x28>
 80092f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092f4:	e72c      	b.n	8009150 <_svfiprintf_r+0x2c>
 80092f6:	ab03      	add	r3, sp, #12
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	462a      	mov	r2, r5
 80092fc:	4b05      	ldr	r3, [pc, #20]	@ (8009314 <_svfiprintf_r+0x1f0>)
 80092fe:	a904      	add	r1, sp, #16
 8009300:	4638      	mov	r0, r7
 8009302:	f000 f879 	bl	80093f8 <_printf_i>
 8009306:	e7ed      	b.n	80092e4 <_svfiprintf_r+0x1c0>
 8009308:	080097d8 	.word	0x080097d8
 800930c:	080097e2 	.word	0x080097e2
 8009310:	00000000 	.word	0x00000000
 8009314:	0800906d 	.word	0x0800906d
 8009318:	080097de 	.word	0x080097de

0800931c <_printf_common>:
 800931c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009320:	4616      	mov	r6, r2
 8009322:	4698      	mov	r8, r3
 8009324:	688a      	ldr	r2, [r1, #8]
 8009326:	690b      	ldr	r3, [r1, #16]
 8009328:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800932c:	4293      	cmp	r3, r2
 800932e:	bfb8      	it	lt
 8009330:	4613      	movlt	r3, r2
 8009332:	6033      	str	r3, [r6, #0]
 8009334:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009338:	4607      	mov	r7, r0
 800933a:	460c      	mov	r4, r1
 800933c:	b10a      	cbz	r2, 8009342 <_printf_common+0x26>
 800933e:	3301      	adds	r3, #1
 8009340:	6033      	str	r3, [r6, #0]
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	0699      	lsls	r1, r3, #26
 8009346:	bf42      	ittt	mi
 8009348:	6833      	ldrmi	r3, [r6, #0]
 800934a:	3302      	addmi	r3, #2
 800934c:	6033      	strmi	r3, [r6, #0]
 800934e:	6825      	ldr	r5, [r4, #0]
 8009350:	f015 0506 	ands.w	r5, r5, #6
 8009354:	d106      	bne.n	8009364 <_printf_common+0x48>
 8009356:	f104 0a19 	add.w	sl, r4, #25
 800935a:	68e3      	ldr	r3, [r4, #12]
 800935c:	6832      	ldr	r2, [r6, #0]
 800935e:	1a9b      	subs	r3, r3, r2
 8009360:	42ab      	cmp	r3, r5
 8009362:	dc26      	bgt.n	80093b2 <_printf_common+0x96>
 8009364:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	3b00      	subs	r3, #0
 800936c:	bf18      	it	ne
 800936e:	2301      	movne	r3, #1
 8009370:	0692      	lsls	r2, r2, #26
 8009372:	d42b      	bmi.n	80093cc <_printf_common+0xb0>
 8009374:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009378:	4641      	mov	r1, r8
 800937a:	4638      	mov	r0, r7
 800937c:	47c8      	blx	r9
 800937e:	3001      	adds	r0, #1
 8009380:	d01e      	beq.n	80093c0 <_printf_common+0xa4>
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	6922      	ldr	r2, [r4, #16]
 8009386:	f003 0306 	and.w	r3, r3, #6
 800938a:	2b04      	cmp	r3, #4
 800938c:	bf02      	ittt	eq
 800938e:	68e5      	ldreq	r5, [r4, #12]
 8009390:	6833      	ldreq	r3, [r6, #0]
 8009392:	1aed      	subeq	r5, r5, r3
 8009394:	68a3      	ldr	r3, [r4, #8]
 8009396:	bf0c      	ite	eq
 8009398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800939c:	2500      	movne	r5, #0
 800939e:	4293      	cmp	r3, r2
 80093a0:	bfc4      	itt	gt
 80093a2:	1a9b      	subgt	r3, r3, r2
 80093a4:	18ed      	addgt	r5, r5, r3
 80093a6:	2600      	movs	r6, #0
 80093a8:	341a      	adds	r4, #26
 80093aa:	42b5      	cmp	r5, r6
 80093ac:	d11a      	bne.n	80093e4 <_printf_common+0xc8>
 80093ae:	2000      	movs	r0, #0
 80093b0:	e008      	b.n	80093c4 <_printf_common+0xa8>
 80093b2:	2301      	movs	r3, #1
 80093b4:	4652      	mov	r2, sl
 80093b6:	4641      	mov	r1, r8
 80093b8:	4638      	mov	r0, r7
 80093ba:	47c8      	blx	r9
 80093bc:	3001      	adds	r0, #1
 80093be:	d103      	bne.n	80093c8 <_printf_common+0xac>
 80093c0:	f04f 30ff 	mov.w	r0, #4294967295
 80093c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c8:	3501      	adds	r5, #1
 80093ca:	e7c6      	b.n	800935a <_printf_common+0x3e>
 80093cc:	18e1      	adds	r1, r4, r3
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	2030      	movs	r0, #48	@ 0x30
 80093d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093d6:	4422      	add	r2, r4
 80093d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093e0:	3302      	adds	r3, #2
 80093e2:	e7c7      	b.n	8009374 <_printf_common+0x58>
 80093e4:	2301      	movs	r3, #1
 80093e6:	4622      	mov	r2, r4
 80093e8:	4641      	mov	r1, r8
 80093ea:	4638      	mov	r0, r7
 80093ec:	47c8      	blx	r9
 80093ee:	3001      	adds	r0, #1
 80093f0:	d0e6      	beq.n	80093c0 <_printf_common+0xa4>
 80093f2:	3601      	adds	r6, #1
 80093f4:	e7d9      	b.n	80093aa <_printf_common+0x8e>
	...

080093f8 <_printf_i>:
 80093f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093fc:	7e0f      	ldrb	r7, [r1, #24]
 80093fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009400:	2f78      	cmp	r7, #120	@ 0x78
 8009402:	4691      	mov	r9, r2
 8009404:	4680      	mov	r8, r0
 8009406:	460c      	mov	r4, r1
 8009408:	469a      	mov	sl, r3
 800940a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800940e:	d807      	bhi.n	8009420 <_printf_i+0x28>
 8009410:	2f62      	cmp	r7, #98	@ 0x62
 8009412:	d80a      	bhi.n	800942a <_printf_i+0x32>
 8009414:	2f00      	cmp	r7, #0
 8009416:	f000 80d2 	beq.w	80095be <_printf_i+0x1c6>
 800941a:	2f58      	cmp	r7, #88	@ 0x58
 800941c:	f000 80b9 	beq.w	8009592 <_printf_i+0x19a>
 8009420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009424:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009428:	e03a      	b.n	80094a0 <_printf_i+0xa8>
 800942a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800942e:	2b15      	cmp	r3, #21
 8009430:	d8f6      	bhi.n	8009420 <_printf_i+0x28>
 8009432:	a101      	add	r1, pc, #4	@ (adr r1, 8009438 <_printf_i+0x40>)
 8009434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009438:	08009491 	.word	0x08009491
 800943c:	080094a5 	.word	0x080094a5
 8009440:	08009421 	.word	0x08009421
 8009444:	08009421 	.word	0x08009421
 8009448:	08009421 	.word	0x08009421
 800944c:	08009421 	.word	0x08009421
 8009450:	080094a5 	.word	0x080094a5
 8009454:	08009421 	.word	0x08009421
 8009458:	08009421 	.word	0x08009421
 800945c:	08009421 	.word	0x08009421
 8009460:	08009421 	.word	0x08009421
 8009464:	080095a5 	.word	0x080095a5
 8009468:	080094cf 	.word	0x080094cf
 800946c:	0800955f 	.word	0x0800955f
 8009470:	08009421 	.word	0x08009421
 8009474:	08009421 	.word	0x08009421
 8009478:	080095c7 	.word	0x080095c7
 800947c:	08009421 	.word	0x08009421
 8009480:	080094cf 	.word	0x080094cf
 8009484:	08009421 	.word	0x08009421
 8009488:	08009421 	.word	0x08009421
 800948c:	08009567 	.word	0x08009567
 8009490:	6833      	ldr	r3, [r6, #0]
 8009492:	1d1a      	adds	r2, r3, #4
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6032      	str	r2, [r6, #0]
 8009498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800949c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094a0:	2301      	movs	r3, #1
 80094a2:	e09d      	b.n	80095e0 <_printf_i+0x1e8>
 80094a4:	6833      	ldr	r3, [r6, #0]
 80094a6:	6820      	ldr	r0, [r4, #0]
 80094a8:	1d19      	adds	r1, r3, #4
 80094aa:	6031      	str	r1, [r6, #0]
 80094ac:	0606      	lsls	r6, r0, #24
 80094ae:	d501      	bpl.n	80094b4 <_printf_i+0xbc>
 80094b0:	681d      	ldr	r5, [r3, #0]
 80094b2:	e003      	b.n	80094bc <_printf_i+0xc4>
 80094b4:	0645      	lsls	r5, r0, #25
 80094b6:	d5fb      	bpl.n	80094b0 <_printf_i+0xb8>
 80094b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094bc:	2d00      	cmp	r5, #0
 80094be:	da03      	bge.n	80094c8 <_printf_i+0xd0>
 80094c0:	232d      	movs	r3, #45	@ 0x2d
 80094c2:	426d      	negs	r5, r5
 80094c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094c8:	4859      	ldr	r0, [pc, #356]	@ (8009630 <_printf_i+0x238>)
 80094ca:	230a      	movs	r3, #10
 80094cc:	e011      	b.n	80094f2 <_printf_i+0xfa>
 80094ce:	6821      	ldr	r1, [r4, #0]
 80094d0:	6833      	ldr	r3, [r6, #0]
 80094d2:	0608      	lsls	r0, r1, #24
 80094d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80094d8:	d402      	bmi.n	80094e0 <_printf_i+0xe8>
 80094da:	0649      	lsls	r1, r1, #25
 80094dc:	bf48      	it	mi
 80094de:	b2ad      	uxthmi	r5, r5
 80094e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80094e2:	4853      	ldr	r0, [pc, #332]	@ (8009630 <_printf_i+0x238>)
 80094e4:	6033      	str	r3, [r6, #0]
 80094e6:	bf14      	ite	ne
 80094e8:	230a      	movne	r3, #10
 80094ea:	2308      	moveq	r3, #8
 80094ec:	2100      	movs	r1, #0
 80094ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094f2:	6866      	ldr	r6, [r4, #4]
 80094f4:	60a6      	str	r6, [r4, #8]
 80094f6:	2e00      	cmp	r6, #0
 80094f8:	bfa2      	ittt	ge
 80094fa:	6821      	ldrge	r1, [r4, #0]
 80094fc:	f021 0104 	bicge.w	r1, r1, #4
 8009500:	6021      	strge	r1, [r4, #0]
 8009502:	b90d      	cbnz	r5, 8009508 <_printf_i+0x110>
 8009504:	2e00      	cmp	r6, #0
 8009506:	d04b      	beq.n	80095a0 <_printf_i+0x1a8>
 8009508:	4616      	mov	r6, r2
 800950a:	fbb5 f1f3 	udiv	r1, r5, r3
 800950e:	fb03 5711 	mls	r7, r3, r1, r5
 8009512:	5dc7      	ldrb	r7, [r0, r7]
 8009514:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009518:	462f      	mov	r7, r5
 800951a:	42bb      	cmp	r3, r7
 800951c:	460d      	mov	r5, r1
 800951e:	d9f4      	bls.n	800950a <_printf_i+0x112>
 8009520:	2b08      	cmp	r3, #8
 8009522:	d10b      	bne.n	800953c <_printf_i+0x144>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	07df      	lsls	r7, r3, #31
 8009528:	d508      	bpl.n	800953c <_printf_i+0x144>
 800952a:	6923      	ldr	r3, [r4, #16]
 800952c:	6861      	ldr	r1, [r4, #4]
 800952e:	4299      	cmp	r1, r3
 8009530:	bfde      	ittt	le
 8009532:	2330      	movle	r3, #48	@ 0x30
 8009534:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009538:	f106 36ff 	addle.w	r6, r6, #4294967295
 800953c:	1b92      	subs	r2, r2, r6
 800953e:	6122      	str	r2, [r4, #16]
 8009540:	f8cd a000 	str.w	sl, [sp]
 8009544:	464b      	mov	r3, r9
 8009546:	aa03      	add	r2, sp, #12
 8009548:	4621      	mov	r1, r4
 800954a:	4640      	mov	r0, r8
 800954c:	f7ff fee6 	bl	800931c <_printf_common>
 8009550:	3001      	adds	r0, #1
 8009552:	d14a      	bne.n	80095ea <_printf_i+0x1f2>
 8009554:	f04f 30ff 	mov.w	r0, #4294967295
 8009558:	b004      	add	sp, #16
 800955a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	f043 0320 	orr.w	r3, r3, #32
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	4833      	ldr	r0, [pc, #204]	@ (8009634 <_printf_i+0x23c>)
 8009568:	2778      	movs	r7, #120	@ 0x78
 800956a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	6831      	ldr	r1, [r6, #0]
 8009572:	061f      	lsls	r7, r3, #24
 8009574:	f851 5b04 	ldr.w	r5, [r1], #4
 8009578:	d402      	bmi.n	8009580 <_printf_i+0x188>
 800957a:	065f      	lsls	r7, r3, #25
 800957c:	bf48      	it	mi
 800957e:	b2ad      	uxthmi	r5, r5
 8009580:	6031      	str	r1, [r6, #0]
 8009582:	07d9      	lsls	r1, r3, #31
 8009584:	bf44      	itt	mi
 8009586:	f043 0320 	orrmi.w	r3, r3, #32
 800958a:	6023      	strmi	r3, [r4, #0]
 800958c:	b11d      	cbz	r5, 8009596 <_printf_i+0x19e>
 800958e:	2310      	movs	r3, #16
 8009590:	e7ac      	b.n	80094ec <_printf_i+0xf4>
 8009592:	4827      	ldr	r0, [pc, #156]	@ (8009630 <_printf_i+0x238>)
 8009594:	e7e9      	b.n	800956a <_printf_i+0x172>
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	f023 0320 	bic.w	r3, r3, #32
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	e7f6      	b.n	800958e <_printf_i+0x196>
 80095a0:	4616      	mov	r6, r2
 80095a2:	e7bd      	b.n	8009520 <_printf_i+0x128>
 80095a4:	6833      	ldr	r3, [r6, #0]
 80095a6:	6825      	ldr	r5, [r4, #0]
 80095a8:	6961      	ldr	r1, [r4, #20]
 80095aa:	1d18      	adds	r0, r3, #4
 80095ac:	6030      	str	r0, [r6, #0]
 80095ae:	062e      	lsls	r6, r5, #24
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	d501      	bpl.n	80095b8 <_printf_i+0x1c0>
 80095b4:	6019      	str	r1, [r3, #0]
 80095b6:	e002      	b.n	80095be <_printf_i+0x1c6>
 80095b8:	0668      	lsls	r0, r5, #25
 80095ba:	d5fb      	bpl.n	80095b4 <_printf_i+0x1bc>
 80095bc:	8019      	strh	r1, [r3, #0]
 80095be:	2300      	movs	r3, #0
 80095c0:	6123      	str	r3, [r4, #16]
 80095c2:	4616      	mov	r6, r2
 80095c4:	e7bc      	b.n	8009540 <_printf_i+0x148>
 80095c6:	6833      	ldr	r3, [r6, #0]
 80095c8:	1d1a      	adds	r2, r3, #4
 80095ca:	6032      	str	r2, [r6, #0]
 80095cc:	681e      	ldr	r6, [r3, #0]
 80095ce:	6862      	ldr	r2, [r4, #4]
 80095d0:	2100      	movs	r1, #0
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7f6 fe04 	bl	80001e0 <memchr>
 80095d8:	b108      	cbz	r0, 80095de <_printf_i+0x1e6>
 80095da:	1b80      	subs	r0, r0, r6
 80095dc:	6060      	str	r0, [r4, #4]
 80095de:	6863      	ldr	r3, [r4, #4]
 80095e0:	6123      	str	r3, [r4, #16]
 80095e2:	2300      	movs	r3, #0
 80095e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095e8:	e7aa      	b.n	8009540 <_printf_i+0x148>
 80095ea:	6923      	ldr	r3, [r4, #16]
 80095ec:	4632      	mov	r2, r6
 80095ee:	4649      	mov	r1, r9
 80095f0:	4640      	mov	r0, r8
 80095f2:	47d0      	blx	sl
 80095f4:	3001      	adds	r0, #1
 80095f6:	d0ad      	beq.n	8009554 <_printf_i+0x15c>
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	079b      	lsls	r3, r3, #30
 80095fc:	d413      	bmi.n	8009626 <_printf_i+0x22e>
 80095fe:	68e0      	ldr	r0, [r4, #12]
 8009600:	9b03      	ldr	r3, [sp, #12]
 8009602:	4298      	cmp	r0, r3
 8009604:	bfb8      	it	lt
 8009606:	4618      	movlt	r0, r3
 8009608:	e7a6      	b.n	8009558 <_printf_i+0x160>
 800960a:	2301      	movs	r3, #1
 800960c:	4632      	mov	r2, r6
 800960e:	4649      	mov	r1, r9
 8009610:	4640      	mov	r0, r8
 8009612:	47d0      	blx	sl
 8009614:	3001      	adds	r0, #1
 8009616:	d09d      	beq.n	8009554 <_printf_i+0x15c>
 8009618:	3501      	adds	r5, #1
 800961a:	68e3      	ldr	r3, [r4, #12]
 800961c:	9903      	ldr	r1, [sp, #12]
 800961e:	1a5b      	subs	r3, r3, r1
 8009620:	42ab      	cmp	r3, r5
 8009622:	dcf2      	bgt.n	800960a <_printf_i+0x212>
 8009624:	e7eb      	b.n	80095fe <_printf_i+0x206>
 8009626:	2500      	movs	r5, #0
 8009628:	f104 0619 	add.w	r6, r4, #25
 800962c:	e7f5      	b.n	800961a <_printf_i+0x222>
 800962e:	bf00      	nop
 8009630:	080097e9 	.word	0x080097e9
 8009634:	080097fa 	.word	0x080097fa

08009638 <memmove>:
 8009638:	4288      	cmp	r0, r1
 800963a:	b510      	push	{r4, lr}
 800963c:	eb01 0402 	add.w	r4, r1, r2
 8009640:	d902      	bls.n	8009648 <memmove+0x10>
 8009642:	4284      	cmp	r4, r0
 8009644:	4623      	mov	r3, r4
 8009646:	d807      	bhi.n	8009658 <memmove+0x20>
 8009648:	1e43      	subs	r3, r0, #1
 800964a:	42a1      	cmp	r1, r4
 800964c:	d008      	beq.n	8009660 <memmove+0x28>
 800964e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009652:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009656:	e7f8      	b.n	800964a <memmove+0x12>
 8009658:	4402      	add	r2, r0
 800965a:	4601      	mov	r1, r0
 800965c:	428a      	cmp	r2, r1
 800965e:	d100      	bne.n	8009662 <memmove+0x2a>
 8009660:	bd10      	pop	{r4, pc}
 8009662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800966a:	e7f7      	b.n	800965c <memmove+0x24>

0800966c <_sbrk_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4d06      	ldr	r5, [pc, #24]	@ (8009688 <_sbrk_r+0x1c>)
 8009670:	2300      	movs	r3, #0
 8009672:	4604      	mov	r4, r0
 8009674:	4608      	mov	r0, r1
 8009676:	602b      	str	r3, [r5, #0]
 8009678:	f7f7 facc 	bl	8000c14 <_sbrk>
 800967c:	1c43      	adds	r3, r0, #1
 800967e:	d102      	bne.n	8009686 <_sbrk_r+0x1a>
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	b103      	cbz	r3, 8009686 <_sbrk_r+0x1a>
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	bd38      	pop	{r3, r4, r5, pc}
 8009688:	20001814 	.word	0x20001814

0800968c <memcpy>:
 800968c:	440a      	add	r2, r1
 800968e:	4291      	cmp	r1, r2
 8009690:	f100 33ff 	add.w	r3, r0, #4294967295
 8009694:	d100      	bne.n	8009698 <memcpy+0xc>
 8009696:	4770      	bx	lr
 8009698:	b510      	push	{r4, lr}
 800969a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800969e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096a2:	4291      	cmp	r1, r2
 80096a4:	d1f9      	bne.n	800969a <memcpy+0xe>
 80096a6:	bd10      	pop	{r4, pc}

080096a8 <_realloc_r>:
 80096a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ac:	4680      	mov	r8, r0
 80096ae:	4615      	mov	r5, r2
 80096b0:	460c      	mov	r4, r1
 80096b2:	b921      	cbnz	r1, 80096be <_realloc_r+0x16>
 80096b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096b8:	4611      	mov	r1, r2
 80096ba:	f7ff bc4b 	b.w	8008f54 <_malloc_r>
 80096be:	b92a      	cbnz	r2, 80096cc <_realloc_r+0x24>
 80096c0:	f7ff fbdc 	bl	8008e7c <_free_r>
 80096c4:	2400      	movs	r4, #0
 80096c6:	4620      	mov	r0, r4
 80096c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096cc:	f000 f81a 	bl	8009704 <_malloc_usable_size_r>
 80096d0:	4285      	cmp	r5, r0
 80096d2:	4606      	mov	r6, r0
 80096d4:	d802      	bhi.n	80096dc <_realloc_r+0x34>
 80096d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80096da:	d8f4      	bhi.n	80096c6 <_realloc_r+0x1e>
 80096dc:	4629      	mov	r1, r5
 80096de:	4640      	mov	r0, r8
 80096e0:	f7ff fc38 	bl	8008f54 <_malloc_r>
 80096e4:	4607      	mov	r7, r0
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d0ec      	beq.n	80096c4 <_realloc_r+0x1c>
 80096ea:	42b5      	cmp	r5, r6
 80096ec:	462a      	mov	r2, r5
 80096ee:	4621      	mov	r1, r4
 80096f0:	bf28      	it	cs
 80096f2:	4632      	movcs	r2, r6
 80096f4:	f7ff ffca 	bl	800968c <memcpy>
 80096f8:	4621      	mov	r1, r4
 80096fa:	4640      	mov	r0, r8
 80096fc:	f7ff fbbe 	bl	8008e7c <_free_r>
 8009700:	463c      	mov	r4, r7
 8009702:	e7e0      	b.n	80096c6 <_realloc_r+0x1e>

08009704 <_malloc_usable_size_r>:
 8009704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009708:	1f18      	subs	r0, r3, #4
 800970a:	2b00      	cmp	r3, #0
 800970c:	bfbc      	itt	lt
 800970e:	580b      	ldrlt	r3, [r1, r0]
 8009710:	18c0      	addlt	r0, r0, r3
 8009712:	4770      	bx	lr

08009714 <_init>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr

08009720 <_fini>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	bf00      	nop
 8009724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009726:	bc08      	pop	{r3}
 8009728:	469e      	mov	lr, r3
 800972a:	4770      	bx	lr
